{"id":"4659a4d1af54e768b4aef484d30d9c26","source_id_to_path":{"0":"lib/forge-std/src/Base.sol","1":"lib/forge-std/src/StdAssertions.sol","2":"lib/forge-std/src/StdChains.sol","3":"lib/forge-std/src/StdCheats.sol","4":"lib/forge-std/src/StdError.sol","5":"lib/forge-std/src/StdInvariant.sol","6":"lib/forge-std/src/StdJson.sol","7":"lib/forge-std/src/StdMath.sol","8":"lib/forge-std/src/StdStorage.sol","9":"lib/forge-std/src/StdStyle.sol","10":"lib/forge-std/src/StdToml.sol","11":"lib/forge-std/src/StdUtils.sol","12":"lib/forge-std/src/Test.sol","13":"lib/forge-std/src/Vm.sol","14":"lib/forge-std/src/console.sol","15":"lib/forge-std/src/console2.sol","16":"lib/forge-std/src/interfaces/IERC165.sol","17":"lib/forge-std/src/interfaces/IERC20.sol","18":"lib/forge-std/src/interfaces/IERC721.sol","19":"lib/forge-std/src/interfaces/IMulticall3.sol","20":"lib/forge-std/src/mocks/MockERC20.sol","21":"lib/forge-std/src/mocks/MockERC721.sol","22":"lib/forge-std/src/safeconsole.sol","23":"lib/fuzzlib/src/FuzzBase.sol","24":"lib/fuzzlib/src/FuzzLibString.sol","25":"lib/fuzzlib/src/Fuzzlib.sol","26":"lib/fuzzlib/src/helpers/HelperAssert.sol","27":"lib/fuzzlib/src/helpers/HelperBase.sol","28":"lib/fuzzlib/src/helpers/HelperClamp.sol","29":"lib/fuzzlib/src/helpers/HelperLog.sol","30":"lib/fuzzlib/src/helpers/HelperMath.sol","31":"lib/fuzzlib/src/helpers/HelperRandom.sol","32":"lib/fuzzlib/src/libraries/LibLog.sol","33":"lib/fuzzlib/src/platform/IPlatform.sol","34":"lib/fuzzlib/src/platform/PlatformCrytic.sol","35":"test/fuzzing/FoundryPlayground.sol","36":"test/fuzzing/FuzzGuided.sol","37":"test/fuzzing/FuzzSampleContract.sol","38":"test/fuzzing/FuzzSetup.sol","39":"test/fuzzing/SampleContract.sol","40":"test/fuzzing/helpers/BeforeAfter.sol","41":"test/fuzzing/helpers/FuzzStorageVariables.sol","42":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol","43":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","44":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol","45":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol","46":"test/fuzzing/properties/Properties.sol","47":"test/fuzzing/properties/PropertiesBase.sol","48":"test/fuzzing/properties/PropertiesDescriptions.sol","49":"test/fuzzing/properties/PropertiesReverts.sol","50":"test/fuzzing/properties/Properties_ERR.sol","51":"test/fuzzing/utils/FunctionCalls.sol","52":"test/fuzzing/utils/FuzzActors.sol","53":"test/fuzzing/utils/FuzzConstants.sol"},"language":"Solidity","_format":"ethers-rs-sol-build-info-1","input":{"version":"0.8.25","language":"Solidity","sources":{"lib/forge-std/src/Base.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {StdStorage} from \"./StdStorage.sol\";\nimport {Vm, VmSafe} from \"./Vm.sol\";\n\nabstract contract CommonBase {\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\n    // console.sol and console2.sol work by executing a staticcall to this address.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    // Deterministic deployment address of the Multicall3 contract.\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\n    // The order of the secp256k1 curve.\n    uint256 internal constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    Vm internal constant vm = Vm(VM_ADDRESS);\n    StdStorage internal stdstore;\n}\n\nabstract contract TestBase is CommonBase {}\n\nabstract contract ScriptBase is CommonBase {\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\n}\n"},"lib/forge-std/src/StdAssertions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdAssertions {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    event log(string);\n    event logs(bytes);\n\n    event log_address(address);\n    event log_bytes32(bytes32);\n    event log_int(int256);\n    event log_uint(uint256);\n    event log_bytes(bytes);\n    event log_string(string);\n\n    event log_named_address(string key, address val);\n    event log_named_bytes32(string key, bytes32 val);\n    event log_named_decimal_int(string key, int256 val, uint256 decimals);\n    event log_named_decimal_uint(string key, uint256 val, uint256 decimals);\n    event log_named_int(string key, int256 val);\n    event log_named_uint(string key, uint256 val);\n    event log_named_bytes(string key, bytes val);\n    event log_named_string(string key, string val);\n\n    event log_array(uint256[] val);\n    event log_array(int256[] val);\n    event log_array(address[] val);\n    event log_named_array(string key, uint256[] val);\n    event log_named_array(string key, int256[] val);\n    event log_named_array(string key, address[] val);\n\n    bool private _failed;\n\n    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n    }\n\n    function fail() internal virtual {\n        vm.store(address(vm), bytes32(\"failed\"), bytes32(uint256(1)));\n        _failed = true;\n    }\n\n    function assertTrue(bool data) internal pure virtual {\n        vm.assertTrue(data);\n    }\n\n    function assertTrue(bool data, string memory err) internal pure virtual {\n        vm.assertTrue(data, err);\n    }\n\n    function assertFalse(bool data) internal pure virtual {\n        vm.assertFalse(data);\n    }\n\n    function assertFalse(bool data, string memory err) internal pure virtual {\n        vm.assertFalse(data, err);\n    }\n\n    function assertEq(bool left, bool right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bool left, bool right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(uint256 left, uint256 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals);\n    }\n\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals, err);\n    }\n\n    function assertEq(int256 left, int256 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals);\n    }\n\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals, err);\n    }\n\n    function assertEq(address left, address right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(address left, address right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes32 left, bytes32 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq32(bytes32 left, bytes32 right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        assertEq(left, right, err);\n    }\n\n    function assertEq(string memory left, string memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(string memory left, string memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes memory left, bytes memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(address[] memory left, address[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(string[] memory left, string[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    // Legacy helper\n    function assertEqUint(uint256 left, uint256 right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertNotEq(bool left, bool right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bool left, bool right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(uint256 left, uint256 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals);\n    }\n\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertNotEqDecimal(left, right, decimals, err);\n    }\n\n    function assertNotEq(int256 left, int256 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals);\n    }\n\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals, err);\n    }\n\n    function assertNotEq(address left, address right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(address left, address right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes32 left, bytes32 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq32(bytes32 left, bytes32 right) internal pure virtual {\n        assertNotEq(left, right);\n    }\n\n    function assertNotEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(string memory left, string memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(string memory left, string memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes memory left, bytes memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bool[] memory left, bool[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(uint256[] memory left, uint256[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(int256[] memory left, int256[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(address[] memory left, address[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(string[] memory left, string[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes[] memory left, bytes[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertLt(uint256 left, uint256 right) internal pure virtual {\n        vm.assertLt(left, right);\n    }\n\n    function assertLt(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertLt(left, right, err);\n    }\n\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals);\n    }\n\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals, err);\n    }\n\n    function assertLt(int256 left, int256 right) internal pure virtual {\n        vm.assertLt(left, right);\n    }\n\n    function assertLt(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertLt(left, right, err);\n    }\n\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals);\n    }\n\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals, err);\n    }\n\n    function assertGt(uint256 left, uint256 right) internal pure virtual {\n        vm.assertGt(left, right);\n    }\n\n    function assertGt(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertGt(left, right, err);\n    }\n\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals);\n    }\n\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals, err);\n    }\n\n    function assertGt(int256 left, int256 right) internal pure virtual {\n        vm.assertGt(left, right);\n    }\n\n    function assertGt(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertGt(left, right, err);\n    }\n\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals);\n    }\n\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals, err);\n    }\n\n    function assertLe(uint256 left, uint256 right) internal pure virtual {\n        vm.assertLe(left, right);\n    }\n\n    function assertLe(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertLe(left, right, err);\n    }\n\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals);\n    }\n\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals, err);\n    }\n\n    function assertLe(int256 left, int256 right) internal pure virtual {\n        vm.assertLe(left, right);\n    }\n\n    function assertLe(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertLe(left, right, err);\n    }\n\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals);\n    }\n\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals, err);\n    }\n\n    function assertGe(uint256 left, uint256 right) internal pure virtual {\n        vm.assertGe(left, right);\n    }\n\n    function assertGe(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertGe(left, right, err);\n    }\n\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals);\n    }\n\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals, err);\n    }\n\n    function assertGe(int256 left, int256 right) internal pure virtual {\n        vm.assertGe(left, right);\n    }\n\n    function assertGe(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertGe(left, right, err);\n    }\n\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals);\n    }\n\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals, err);\n    }\n\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta);\n    }\n\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbs(left, right, maxDelta, err);\n    }\n\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);\n    }\n\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);\n    }\n\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta);\n    }\n\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta, err);\n    }\n\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);\n    }\n\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);\n    }\n\n    function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta);\n    }\n\n    function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }\n\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta);\n    }\n\n    function assertApproxEqRel(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }\n\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }\n\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }\n\n    // Inherited from DSTest, not used but kept for backwards-compatibility\n    function checkEq0(bytes memory left, bytes memory right) internal pure returns (bool) {\n        return keccak256(left) == keccak256(right);\n    }\n\n    function assertEq0(bytes memory left, bytes memory right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        assertEq(left, right, err);\n    }\n\n    function assertNotEq0(bytes memory left, bytes memory right) internal pure virtual {\n        assertNotEq(left, right);\n    }\n\n    function assertNotEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        assertNotEq(left, right, err);\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {\n        assertEqCall(target, callDataA, target, callDataB, true);\n    }\n\n    function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)\n        internal\n        virtual\n    {\n        assertEqCall(targetA, callDataA, targetB, callDataB, true);\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)\n        internal\n        virtual\n    {\n        assertEqCall(target, callDataA, target, callDataB, strictRevertData);\n    }\n\n    function assertEqCall(\n        address targetA,\n        bytes memory callDataA,\n        address targetB,\n        bytes memory callDataB,\n        bool strictRevertData\n    ) internal virtual {\n        (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);\n        (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);\n\n        if (successA && successB) {\n            assertEq(returnDataA, returnDataB, \"Call return data does not match\");\n        }\n\n        if (!successA && !successB && strictRevertData) {\n            assertEq(returnDataA, returnDataB, \"Call revert data does not match\");\n        }\n\n        if (!successA && successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call revert data\", returnDataA);\n            emit log_named_bytes(\" Right call return data\", returnDataB);\n            revert(\"assertion failed\");\n        }\n\n        if (successA && !successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call return data\", returnDataA);\n            emit log_named_bytes(\" Right call revert data\", returnDataB);\n            revert(\"assertion failed\");\n        }\n    }\n}\n"},"lib/forge-std/src/StdChains.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n/**\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\n * alias used in this contract, which can be found as the first argument to the\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\n *\n * There are two main ways to use this contract:\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\n *      `setChain(string memory chainAlias, Chain memory chain)`\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\n *\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\n * `defaultRpcUrls`.\n *\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\n *\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\n * we want to retrieve the RPC URL for `mainnet`:\n *   - If you have specified data with `setChain`, it will return that.\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\n *   - If neither of the above conditions is met, the default data is returned.\n *\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\n */\nabstract contract StdChains {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private stdChainsInitialized;\n\n    struct ChainData {\n        string name;\n        uint256 chainId;\n        string rpcUrl;\n    }\n\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\n        string rpcUrl;\n    }\n\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n    mapping(string => Chain) private chains;\n    // Maps from the chain's alias to it's default RPC URL.\n    mapping(string => string) private defaultRpcUrls;\n    // Maps from a chain ID to it's alias.\n    mapping(uint256 => string) private idToAlias;\n\n    bool private fallbackToDefaultRpcUrls = true;\n\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        initializeStdChains();\n        string memory chainAlias = idToAlias[chainId];\n\n        chain = chains[chainAlias];\n\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }\n\n    function _toUpper(string memory str) private pure returns (string memory) {\n        bytes memory strb = bytes(str);\n        bytes memory copy = new bytes(strb.length);\n        for (uint256 i = 0; i < strb.length; i++) {\n            bytes1 b = strb[i];\n            if (b >= 0x61 && b <= 0x7A) {\n                copy[i] = bytes1(uint8(b) - 32);\n            } else {\n                copy[i] = b;\n            }\n        }\n        return string(copy);\n    }\n\n    // lookup rpcUrl, in descending order of priority:\n    // current -> config (foundry.toml) -> environment variable -> default\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }\n\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\n        fallbackToDefaultRpcUrls = useDefault;\n    }\n\n    function initializeStdChains() private {\n        if (stdChainsInitialized) return;\n\n        stdChainsInitialized = true;\n\n        // If adding an RPC here, make sure to test the default RPC URL in `test_Rpcs` in `StdChains.t.sol`\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\n        setChainWithDefaultRpcUrl(\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\"holesky\", ChainData(\"Holesky\", 17000, \"https://rpc.holesky.ethpandaops.io\"));\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\n        setChainWithDefaultRpcUrl(\n            \"optimism_sepolia\", ChainData(\"Optimism Sepolia\", 11155420, \"https://sepolia.optimism.io\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"arbitrum_one_sepolia\", ChainData(\"Arbitrum One Sepolia\", 421614, \"https://sepolia-rollup.arbitrum.io/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"polygon_amoy\", ChainData(\"Polygon Amoy\", 80002, \"https://rpc-amoy.polygon.technology\")\n        );\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain_testnet\",\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\n        );\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\n        setChainWithDefaultRpcUrl(\"moonbeam\", ChainData(\"Moonbeam\", 1284, \"https://rpc.api.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\n            \"moonriver\", ChainData(\"Moonriver\", 1285, \"https://rpc.api.moonriver.moonbeam.network\")\n        );\n        setChainWithDefaultRpcUrl(\"moonbase\", ChainData(\"Moonbase\", 1287, \"https://rpc.testnet.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\"base_sepolia\", ChainData(\"Base Sepolia\", 84532, \"https://sepolia.base.org\"));\n        setChainWithDefaultRpcUrl(\"base\", ChainData(\"Base\", 8453, \"https://mainnet.base.org\"));\n        setChainWithDefaultRpcUrl(\"blast_sepolia\", ChainData(\"Blast Sepolia\", 168587773, \"https://sepolia.blast.io\"));\n        setChainWithDefaultRpcUrl(\"blast\", ChainData(\"Blast\", 81457, \"https://rpc.blast.io\"));\n        setChainWithDefaultRpcUrl(\"fantom_opera\", ChainData(\"Fantom Opera\", 250, \"https://rpc.ankr.com/fantom/\"));\n        setChainWithDefaultRpcUrl(\n            \"fantom_opera_testnet\", ChainData(\"Fantom Opera Testnet\", 4002, \"https://rpc.ankr.com/fantom_testnet/\")\n        );\n        setChainWithDefaultRpcUrl(\"fraxtal\", ChainData(\"Fraxtal\", 252, \"https://rpc.frax.com\"));\n        setChainWithDefaultRpcUrl(\"fraxtal_testnet\", ChainData(\"Fraxtal Testnet\", 2522, \"https://rpc.testnet.frax.com\"));\n        setChainWithDefaultRpcUrl(\n            \"berachain_bartio_testnet\", ChainData(\"Berachain bArtio Testnet\", 80084, \"https://bartio.rpc.berachain.com\")\n        );\n    }\n\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }\n}\n"},"lib/forge-std/src/StdCheats.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {console2} from \"./console2.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdCheatsSafe {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    bool private gasMeteringOff;\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy {\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList {\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n    struct Account {\n        address addr;\n        uint256 key;\n    }\n\n    enum AddressType {\n        Payable,\n        NonPayable,\n        ZeroAddress,\n        Precompile,\n        ForgeAddress\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n    // backwards compatibility, since this name was used in the original PR which has already has\n    // a release. This function can be removed in a future release once we want a breaking change.\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\n        if (addressType == AddressType.Payable) {\n            assumeNotPayable(addr);\n        } else if (addressType == AddressType.NonPayable) {\n            assumePayable(addr);\n        } else if (addressType == AddressType.ZeroAddress) {\n            assumeNotZeroAddress(addr);\n        } else if (addressType == AddressType.Precompile) {\n            assumeNotPrecompile(addr);\n        } else if (addressType == AddressType.ForgeAddress) {\n            assumeNotForgeAddress(addr);\n        }\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3,\n        AddressType addressType4\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n        assumeAddressIsNot(addr, addressType4);\n    }\n\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n    // `addr` and checking the `success` return value.\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used.\n    function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }\n\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used. See the\n    // `_isPayable` method for more information.\n    function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }\n\n    function assumeNotPayable(address addr) internal virtual {\n        vm.assume(!_isPayable(addr));\n    }\n\n    function assumeNotZeroAddress(address addr) internal pure virtual {\n        vm.assume(addr != address(0));\n    }\n\n    function assumeNotPrecompile(address addr) internal pure virtual {\n        assumeNotPrecompile(addr, _pureChainId());\n    }\n\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\n        // address), but the same rationale for excluding them applies so we include those too.\n\n        // These should be present on all EVM-compatible chains.\n        vm.assume(addr < address(0x1) || addr > address(0x9));\n\n        // forgefmt: disable-start\n        if (chainId == 10 || chainId == 420) {\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\n        } else if (chainId == 42161 || chainId == 421613) {\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\n        } else if (chainId == 43114 || chainId == 43113) {\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\n        }\n        // forgefmt: disable-end\n    }\n\n    function assumeNotForgeAddress(address addr) internal pure virtual {\n        // vm, console, and Create2Deployer addresses\n        vm.assume(\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\n        );\n    }\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        view\n        virtual\n        returns (EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint256 i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash = rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode = rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal\n        pure\n        virtual\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\n        txDetail.txType = _bytesToUint(rawDetail.txType);\n        txDetail.value = _bytesToUint(rawDetail.value);\n        txDetail.gas = _bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n    }\n\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint256 i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\n        receipt.status = _bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal\n        pure\n        virtual\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint256 i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }\n\n    function deployCode(string memory what) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\n    }\n\n    /// @dev deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }\n\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    // Destroys an account immediately, sending the balance to beneficiary.\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n    // only after tx ends, this will run immediately.\n    function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }\n\n    // creates a struct containing both a labeled address and the corresponding private key\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index)\n        internal\n        virtual\n        returns (address who, uint256 privateKey)\n    {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    function isFork() internal view virtual returns (bool status) {\n        try vm.activeFork() {\n            status = true;\n        } catch (bytes memory) {}\n    }\n\n    modifier skipWhenForking() {\n        if (!isFork()) {\n            _;\n        }\n    }\n\n    modifier skipWhenNotForking() {\n        if (isFork()) {\n            _;\n        }\n    }\n\n    modifier noGasMetering() {\n        vm.pauseGasMetering();\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\n        // it back on until we exit the top level function that used the modifier\n        //\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\n        // so we only turn metering back on at the end of the funcA\n        bool gasStartedOff = gasMeteringOff;\n        gasMeteringOff = true;\n\n        _;\n\n        // if gas metering was on when this modifier was called, turn it back on at the end\n        if (!gasStartedOff) {\n            gasMeteringOff = false;\n            vm.resumeGasMetering();\n        }\n    }\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n\n// Wrappers around cheatcodes to avoid footguns\nabstract contract StdCheats is StdCheatsSafe {\n    using stdStorage for StdStorage;\n\n    StdStorage private stdstore;\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }\n\n    function rewind(uint256 time) internal virtual {\n        vm.warp(block.timestamp - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender, origin);\n    }\n\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }\n\n    function startHoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function changePrank(address msgSender) internal virtual {\n        console2_log_StdCheats(\"changePrank is deprecated. Please use vm.startPrank instead.\");\n        vm.stopPrank();\n        vm.startPrank(msgSender);\n    }\n\n    function changePrank(address msgSender, address txOrigin) internal virtual {\n        vm.stopPrank();\n        vm.startPrank(msgSender, txOrigin);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }\n\n    // Set the balance of an account for any ERC1155 token\n    // Use the alternative signature to update `totalSupply`\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\n        }\n    }\n\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\n            require(\n                totSupData.length != 0,\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\n            );\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\n        }\n    }\n\n    function dealERC721(address token, address to, uint256 id) internal virtual {\n        // check if token id is already minted and the actual owner.\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\n\n        // get owner current balance\n        (, bytes memory fromBalData) =\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\n\n        // get new user current balance\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\n\n        // update balances\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\n\n        // update owner\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\n    }\n\n    function deployCodeTo(string memory what, address where) internal virtual {\n        deployCodeTo(what, \"\", 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\n        deployCodeTo(what, args, 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\n        bytes memory creationCode = vm.getCode(what);\n        vm.etch(where, abi.encodePacked(creationCode, args));\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\n        vm.etch(where, runtimeBytecode);\n    }\n\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n    function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }\n}\n"},"lib/forge-std/src/StdError.sol":{"content":"// SPDX-License-Identifier: MIT\n// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdError {\n    bytes public constant assertionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x01);\n    bytes public constant arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11);\n    bytes public constant divisionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x12);\n    bytes public constant enumConversionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x21);\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\"Panic(uint256)\", 0x22);\n    bytes public constant popError = abi.encodeWithSignature(\"Panic(uint256)\", 0x31);\n    bytes public constant indexOOBError = abi.encodeWithSignature(\"Panic(uint256)\", 0x32);\n    bytes public constant memOverflowError = abi.encodeWithSignature(\"Panic(uint256)\", 0x41);\n    bytes public constant zeroVarError = abi.encodeWithSignature(\"Panic(uint256)\", 0x51);\n}\n"},"lib/forge-std/src/StdInvariant.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nabstract contract StdInvariant {\n    struct FuzzSelector {\n        address addr;\n        bytes4[] selectors;\n    }\n\n    struct FuzzArtifactSelector {\n        string artifact;\n        bytes4[] selectors;\n    }\n\n    struct FuzzInterface {\n        address addr;\n        string[] artifacts;\n    }\n\n    address[] private _excludedContracts;\n    address[] private _excludedSenders;\n    address[] private _targetedContracts;\n    address[] private _targetedSenders;\n\n    string[] private _excludedArtifacts;\n    string[] private _targetedArtifacts;\n\n    FuzzArtifactSelector[] private _targetedArtifactSelectors;\n\n    FuzzSelector[] private _excludedSelectors;\n    FuzzSelector[] private _targetedSelectors;\n\n    FuzzInterface[] private _targetedInterfaces;\n\n    // Functions for users:\n    // These are intended to be called in tests.\n\n    function excludeContract(address newExcludedContract_) internal {\n        _excludedContracts.push(newExcludedContract_);\n    }\n\n    function excludeSelector(FuzzSelector memory newExcludedSelector_) internal {\n        _excludedSelectors.push(newExcludedSelector_);\n    }\n\n    function excludeSender(address newExcludedSender_) internal {\n        _excludedSenders.push(newExcludedSender_);\n    }\n\n    function excludeArtifact(string memory newExcludedArtifact_) internal {\n        _excludedArtifacts.push(newExcludedArtifact_);\n    }\n\n    function targetArtifact(string memory newTargetedArtifact_) internal {\n        _targetedArtifacts.push(newTargetedArtifact_);\n    }\n\n    function targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_) internal {\n        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);\n    }\n\n    function targetContract(address newTargetedContract_) internal {\n        _targetedContracts.push(newTargetedContract_);\n    }\n\n    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {\n        _targetedSelectors.push(newTargetedSelector_);\n    }\n\n    function targetSender(address newTargetedSender_) internal {\n        _targetedSenders.push(newTargetedSender_);\n    }\n\n    function targetInterface(FuzzInterface memory newTargetedInterface_) internal {\n        _targetedInterfaces.push(newTargetedInterface_);\n    }\n\n    // Functions for forge:\n    // These are called by forge to run invariant tests and don't need to be called in tests.\n\n    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n    function excludeSelectors() public view returns (FuzzSelector[] memory excludedSelectors_) {\n        excludedSelectors_ = _excludedSelectors;\n    }\n\n    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n    function targetArtifactSelectors() public view returns (FuzzArtifactSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n}\n"},"lib/forge-std/src/StdJson.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"<some_path>\");\n// json.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal pure returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal pure returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal pure returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal pure returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal pure returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n"},"lib/forge-std/src/StdMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n"},"lib/forge-std/src/StdStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct FindData {\n    uint256 slot;\n    uint256 offsetLeft;\n    uint256 offsetRight;\n    bool found;\n}\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n    bool _enable_packed_slots;\n    bytes _calldata;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    function getCallParams(StdStorage storage self) internal view returns (bytes memory) {\n        if (self._calldata.length == 0) {\n            return flatten(self._keys);\n        } else {\n            return self._calldata;\n        }\n    }\n\n    // Calls target contract with configured parameters\n    function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {\n        bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));\n        (bool success, bytes memory rdat) = self._target.staticcall(cald);\n        bytes32 result = bytesToBytes32(rdat, 32 * self._depth);\n\n        return (success, result);\n    }\n\n    // Tries mutating slot value to determine if the targeted value is stored in it.\n    // If current value is 0, then we are setting slot value to type(uint256).max\n    // Otherwise, we set it to 0. That way, return value should always be affected.\n    function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n        (bool success, bytes32 prevReturnValue) = callTarget(self);\n\n        bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);\n        vm.store(self._target, slot, testVal);\n\n        (, bytes32 newReturnValue) = callTarget(self);\n\n        vm.store(self._target, slot, prevSlotValue);\n\n        return (success && (prevReturnValue != newReturnValue));\n    }\n\n    // Tries setting one of the bits in slot to 1 until return value changes.\n    // Index of resulted bit is an offset packed slot has from left/right side\n    function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {\n        for (uint256 offset = 0; offset < 256; offset++) {\n            uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);\n            vm.store(self._target, slot, bytes32(valueToPut));\n\n            (bool success, bytes32 data) = callTarget(self);\n\n            if (success && (uint256(data) > 0)) {\n                return (true, offset);\n            }\n        }\n        return (false, 0);\n    }\n\n    function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n\n        (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);\n        (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);\n\n        // `findOffset` may mutate slot value, so we are setting it to initial value\n        vm.store(self._target, slot, prevSlotValue);\n        return (foundLeft && foundRight, offsetLeft, offsetRight);\n    }\n\n    function find(StdStorage storage self) internal returns (FindData storage) {\n        return find(self, true);\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = getCallParams(self);\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            if (_clear) {\n                clear(self);\n            }\n            return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        }\n        vm.record();\n        (, bytes32 callResult) = callTarget(self);\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n\n        if (reads.length == 0) {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        } else {\n            for (uint256 i = reads.length; --i >= 0;) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n\n                if (!checkSlotMutatesCall(self, reads[i])) {\n                    continue;\n                }\n\n                (uint256 offsetLeft, uint256 offsetRight) = (0, 0);\n\n                if (self._enable_packed_slots) {\n                    bool found;\n                    (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);\n                    if (!found) {\n                        continue;\n                    }\n                }\n\n                // Check that value between found offsets is equal to the current call result\n                uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;\n\n                if (uint256(callResult) != curVal) {\n                    continue;\n                }\n\n                emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));\n                self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =\n                    FindData(uint256(reads[i]), offsetLeft, offsetRight, true);\n                break;\n            }\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        if (_clear) {\n            clear(self);\n        }\n        return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        self._calldata = _calldata;\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        self._enable_packed_slots = true;\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        FindData storage data = find(self, false);\n        uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);\n        uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;\n        clear(self);\n        return abi.encode(value);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        return (uint256(parent_slot), key);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        bool found;\n        bytes32 root_slot;\n        bytes32 parent_slot;\n        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        while (found) {\n            root_slot = parent_slot;\n            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));\n        }\n        return uint256(root_slot);\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n\n    function clear(StdStorage storage self) internal {\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n        delete self._enable_packed_slots;\n        delete self._calldata;\n    }\n\n    // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`\n    // (slotValue & mask) >> offsetRight will be the value of the given packed variable\n    function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {\n        // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;\n        // using assembly because (1 << 256) causes overflow\n        assembly {\n            mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))\n        }\n    }\n\n    // Returns slot value with updated packed variable.\n    function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)\n        internal\n        pure\n        returns (bytes32 newValue)\n    {\n        return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return find(self, true);\n    }\n\n    function find(StdStorage storage self, bool _clear) internal returns (uint256) {\n        return stdStorageSafe.find(self, _clear).slot;\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_calldata(self, _calldata);\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        return stdStorageSafe.enable_packed_slots(self);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function clear(StdStorage storage self) internal {\n        stdStorageSafe.clear(self);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write_int(StdStorage storage self, int256 val) internal {\n        checked_write(self, bytes32(uint256(val)));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = stdStorageSafe.getCallParams(self);\n\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            find(self, false);\n        }\n        FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        if ((data.offsetLeft + data.offsetRight) > 0) {\n            uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));\n            require(\n                uint256(set) < maxVal,\n                string(\n                    abi.encodePacked(\n                        \"stdStorage find(StdStorage): Packed slot. We can't fit value greater than \",\n                        vm.toString(maxVal)\n                    )\n                )\n            );\n        }\n        bytes32 curVal = vm.load(who, bytes32(data.slot));\n        bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);\n\n        vm.store(who, bytes32(data.slot), valToSet);\n\n        (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);\n\n        if (!success || callResult != set) {\n            vm.store(who, bytes32(data.slot), curVal);\n            revert(\"stdStorage find(StdStorage): Failed to write value.\");\n        }\n        clear(self);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        return stdStorageSafe.parent(self);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.root(self);\n    }\n}\n"},"lib/forge-std/src/StdStyle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n"},"lib/forge-std/src/StdToml.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing TOML files\n// To parse:\n// ```\n// using stdToml for string;\n// string memory toml = vm.readFile(\"<some_path>\");\n// toml.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdToml for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdToml {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseToml(toml, key);\n    }\n\n    function readUint(string memory toml, string memory key) internal pure returns (uint256) {\n        return vm.parseTomlUint(toml, key);\n    }\n\n    function readUintArray(string memory toml, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseTomlUintArray(toml, key);\n    }\n\n    function readInt(string memory toml, string memory key) internal pure returns (int256) {\n        return vm.parseTomlInt(toml, key);\n    }\n\n    function readIntArray(string memory toml, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseTomlIntArray(toml, key);\n    }\n\n    function readBytes32(string memory toml, string memory key) internal pure returns (bytes32) {\n        return vm.parseTomlBytes32(toml, key);\n    }\n\n    function readBytes32Array(string memory toml, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseTomlBytes32Array(toml, key);\n    }\n\n    function readString(string memory toml, string memory key) internal pure returns (string memory) {\n        return vm.parseTomlString(toml, key);\n    }\n\n    function readStringArray(string memory toml, string memory key) internal pure returns (string[] memory) {\n        return vm.parseTomlStringArray(toml, key);\n    }\n\n    function readAddress(string memory toml, string memory key) internal pure returns (address) {\n        return vm.parseTomlAddress(toml, key);\n    }\n\n    function readAddressArray(string memory toml, string memory key) internal pure returns (address[] memory) {\n        return vm.parseTomlAddressArray(toml, key);\n    }\n\n    function readBool(string memory toml, string memory key) internal pure returns (bool) {\n        return vm.parseTomlBool(toml, key);\n    }\n\n    function readBoolArray(string memory toml, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseTomlBoolArray(toml, key);\n    }\n\n    function readBytes(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseTomlBytes(toml, key);\n    }\n\n    function readBytesArray(string memory toml, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseTomlBytesArray(toml, key);\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeToml(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeToml(jsonKey, path, valueKey);\n    }\n}\n"},"lib/forge-std/src/StdUtils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\nimport {MockERC20} from \"./mocks/MockERC20.sol\";\nimport {MockERC721} from \"./mocks/MockERC721.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", result);\n    }\n\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\n    }\n\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }\n\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\n        internal\n        pure\n        virtual\n        returns (address)\n    {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }\n\n    /// @dev returns an initialized mock ERC20 contract\n    function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\n        internal\n        returns (MockERC20 mock)\n    {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }\n\n    /// @dev returns an initialized mock ERC721 contract\n    function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n    // any breaking changes to function signatures.\n    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE2_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function console2_log_StdUtils(string memory p0) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n}\n"},"lib/forge-std/src/Test.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\n// 💬 ABOUT\n// Forge Std's default Test.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdAssertions} from \"./StdAssertions.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheats} from \"./StdCheats.sol\";\nimport {stdError} from \"./StdError.sol\";\nimport {StdInvariant} from \"./StdInvariant.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {stdToml} from \"./StdToml.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {Vm} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {TestBase} from \"./Base.sol\";\n\n// ⭐️ TEST\nabstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {\n    // Note: IS_TEST() must return true.\n    bool public IS_TEST = true;\n}\n"},"lib/forge-std/src/Vm.sol":{"content":"// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// Forge execution contexts.\n    enum ForgeContext {\n        // Test group execution context (test, coverage or snapshot).\n        TestGroup,\n        // `forge test` execution context.\n        Test,\n        // `forge coverage` execution context.\n        Coverage,\n        // `forge snapshot` execution context.\n        Snapshot,\n        // Script group execution context (dry run, broadcast or resume).\n        ScriptGroup,\n        // `forge script` execution context.\n        ScriptDryRun,\n        // `forge script --broadcast` execution context.\n        ScriptBroadcast,\n        // `forge script --resume` execution context.\n        ScriptResume,\n        // Unknown `forge` execution context.\n        Unknown\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    /// Gas used. Returned by `lastCallGas`.\n    struct Gas {\n        // The gas limit of the call.\n        uint64 gasLimit;\n        // The total gas used.\n        uint64 gasTotalUsed;\n        // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>\n        uint64 gasMemoryUsed;\n        // The amount of gas refunded.\n        int64 gasRefunded;\n        // The amount of gas remaining.\n        uint64 gasRemaining;\n    }\n\n    // ======== Crypto ========\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Signs data with a `Wallet`.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs data with a `Wallet`.\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and returns true if it exists, else returns false.\n    function envExists(string calldata name) external view returns (bool result);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        view\n        returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        view\n        returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        view\n        returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        view\n        returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        view\n        returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        view\n        returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        view\n        returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n\n    /// Returns true if `forge` command was executed in given context.\n    function isContext(ForgeContext context) external view returns (bool result);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\n        external\n        returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.blobbasefee`.\n    /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlobBaseFee() external view returns (uint256 blobBaseFee);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\n        external\n        returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Get the nonce of a `Wallet`.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Gets the gas used in the last call.\n    function lastCallGas() external view returns (Gas memory gas);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\n\n    /// Performs an Ethereum JSON-RPC request to the given endpoint.\n    function rpc(string calldata urlOrAlias, string calldata method, string calldata params)\n        external\n        returns (bytes memory data);\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function deployCode(string calldata artifactPath) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionaly accepts abi-encoded constructor arguments.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs)\n        external\n        returns (address deployedAddress);\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Prompts the user for a string value in the terminal.\n    function prompt(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for an address in the terminal.\n    function promptAddress(string calldata promptText) external returns (address);\n\n    /// Prompts the user for a hidden string value in the terminal.\n    function promptSecret(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for hidden uint256 in the terminal (usually pk).\n    function promptSecretUint(string calldata promptText) external returns (uint256);\n\n    /// Prompts the user for uint256 in the terminal.\n    function promptUint(string calldata promptText) external returns (uint256);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\n        external\n        view\n        returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(string calldata json, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(string calldata json, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.\n    function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(string calldata typeDescription, bytes calldata value)\n        external\n        pure\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(\n        string calldata objectKey,\n        string calldata valueKey,\n        string calldata typeDescription,\n        bytes calldata value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Scripting ========\n\n    /// Takes a signed transaction and broadcasts it to the network.\n    function broadcastRawTransaction(bytes calldata data) external;\n\n    /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    // ======== String ========\n\n    /// Returns the index of the first occurrence of a `key` in an `input` string.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.\n    /// Returns 0 in case of an empty `key`.\n    function indexOf(string calldata input, string calldata key) external pure returns (uint256);\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(string calldata input, string calldata from, string calldata to)\n        external\n        pure\n        returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external;\n\n    /// Returns the Foundry version.\n    /// Format: <cargo_version>+<git_sha>+<build_timestamp>\n    /// Sample output: 0.2.0+faa94c384+202407110019\n    /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.\n    /// For reliable version comparisons, use YYYYMMDD0000 format (e.g., >= 202407110000)\n    /// to compare timestamps while ignoring minor time differences.\n    function getFoundryVersion() external view returns (string memory version);\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Toml ========\n\n    /// Checks if `key` exists in a TOML table.\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\n    function parseTomlAddressArray(string calldata toml, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a TOML table.\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a TOML table.\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a TOML table at `key`.\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\n    function writeToml(string calldata json, string calldata path) external;\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\n        external\n        pure\n        returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Returns ENS namehash for provided string.\n    function ensNamehash(string calldata name) external pure returns (bytes32);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Returns a random `address`.\n    function randomAddress() external returns (address);\n\n    /// Returns a random uint256 value.\n    function randomUint() external returns (uint256);\n\n    /// Returns random uin256 value between the provided range (=min..=max).\n    function randomUint(uint256 min, uint256 max) external returns (uint256);\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.blobbasefee`\n    function blobBaseFee(uint256 newBlobBaseFee) external;\n\n    /// Sets the blobhashes in the transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function blobhashes(bytes32[] calldata hashes) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Gets the blockhashes from the current transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function getBlobhashes() external view returns (bytes32[] memory hashes);\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory revm state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\n        external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(uint256 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Set blockhash for the current block.\n    /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.\n    function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertTo`.\n    function snapshot() external returns (uint256 snapshotId);\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\n        external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\n\n    /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)\n        external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(\n        bool checkTopic0,\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData,\n        address emitter\n    ) external;\n\n    /// Prepare an expected anonymous log with all topic and data checks enabled.\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmitAnonymous() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(address emitter) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top of the test.\n    function skip(bool skipTest) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n}\n"},"lib/forge-std/src/console.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _castLogPayloadViewToPure(\n        function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(int p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, int p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"},"lib/forge-std/src/console2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {console as console2} from \"./console.sol\";\n"},"lib/forge-std/src/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    /// uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"},"lib/forge-std/src/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n"},"lib/forge-std/src/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC165.sol\";\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC165 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    /// This event emits when NFTs are created (`from` == 0) and destroyed\n    /// (`to` == 0). Exception: during contract creation, any number of NFTs\n    /// may be created and assigned without emitting Transfer. At the time of\n    /// any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    /// reaffirmed. The zero address indicates there is no approved address.\n    /// When a Transfer event emits, this also indicates that the approved\n    /// address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    /// The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    /// function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    /// about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT. When transfer is complete, this function\n    /// checks if `_to` is a smart contract (code size > 0). If so, it calls\n    /// `onERC721Received` on `_to` and throws if the return value is not\n    /// `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    /// except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    /// THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    /// Throws unless `msg.sender` is the current NFT owner, or an authorized\n    /// operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    /// all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    /// multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    /// after a `transfer`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    /// transaction being reverted.\n    /// Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)\n        external\n        returns (bytes4);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata is IERC721 {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    /// 3986. The URI may point to a JSON file that conforms to the \"ERC721\n    /// Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface IERC721Enumerable is IERC721 {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    /// them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    /// (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    /// `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    /// (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"},"lib/forge-std/src/interfaces/IMulticall3.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n"},"lib/forge-std/src/mocks/MockERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract MockERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(\"1\"),\n                _pureChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n"},"lib/forge-std/src/mocks/MockERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC721Metadata, IERC721TokenReceiver} from \"../interfaces/IERC721.sol\";\n\n/// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\ncontract MockERC721 is IERC721Metadata {\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 id) public view virtual override returns (string memory) {}\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual override returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _getApproved;\n\n    mapping(address => mapping(address => bool)) internal _isApprovedForAll;\n\n    function getApproved(uint256 id) public view virtual override returns (address) {\n        return _getApproved[id];\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _isApprovedForAll[owner][operator];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public payable virtual override {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        _getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(address from, address to, uint256 id) public payable virtual override {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        _balanceOf[from]--;\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        delete _getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual override {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data)\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        _balanceOf[owner]--;\n\n        delete _ownerOf[id];\n\n        delete _getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }\n}\n"},"lib/forge-std/src/safeconsole.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n/// @author philogy <https://github.com/philogy>\n/// @dev Code generated automatically by script.\nlibrary safeconsole {\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\n\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\n    // for the view-to-pure log trick.\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\n        function(uint256, uint256) internal pure pureSendLogPayload;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pureSendLogPayload := fnIn\n        }\n        pureSendLogPayload(offset, size);\n    }\n\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\n        }\n    }\n\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pureMemcopy := fnIn\n        }\n        pureMemcopy(fromOffset, toOffset, length);\n    }\n\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\n        }\n    }\n\n    function logMemory(uint256 offset, uint256 length) internal pure {\n        if (offset >= 0x60) {\n            // Sufficient memory before slice to prepare call header.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            /// @solidity memory-safe-assembly\n            assembly {\n                m0 := mload(sub(offset, 0x60))\n                m1 := mload(sub(offset, 0x40))\n                m2 := mload(sub(offset, 0x20))\n                // Selector of `log(bytes)`.\n                mstore(sub(offset, 0x60), 0x0be77f56)\n                mstore(sub(offset, 0x40), 0x20)\n                mstore(sub(offset, 0x20), length)\n            }\n            _sendLogPayload(offset - 0x44, length + 0x44);\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(sub(offset, 0x60), m0)\n                mstore(sub(offset, 0x40), m1)\n                mstore(sub(offset, 0x20), m2)\n            }\n        } else {\n            // Insufficient space, so copy slice forward, add header and reverse.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            uint256 endOffset = offset + length;\n            /// @solidity memory-safe-assembly\n            assembly {\n                m0 := mload(add(endOffset, 0x00))\n                m1 := mload(add(endOffset, 0x20))\n                m2 := mload(add(endOffset, 0x40))\n            }\n            _memcopy(offset, offset + 0x60, length);\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Selector of `log(bytes)`.\n                mstore(add(offset, 0x00), 0x0be77f56)\n                mstore(add(offset, 0x20), 0x20)\n                mstore(add(offset, 0x40), length)\n            }\n            _sendLogPayload(offset + 0x1c, length + 0x44);\n            _memcopy(offset + 0x60, offset, length);\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(endOffset, 0x00), m0)\n                mstore(add(endOffset, 0x20), m1)\n                mstore(add(endOffset, 0x40), m2)\n            }\n        }\n    }\n\n    function log(address p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(address)`.\n            mstore(0x00, 0x2c2ecbc2)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bool p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(bool)`.\n            mstore(0x00, 0x32458eed)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(uint256 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(uint256)`.\n            mstore(0x00, 0xf82c50f1)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bytes32 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(string)`.\n            mstore(0x00, 0x41304fac)\n            mstore(0x20, 0x20)\n            writeString(0x40, p0)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,address)`.\n            mstore(0x00, 0xdaf0d4aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,bool)`.\n            mstore(0x00, 0x75b605d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,uint256)`.\n            mstore(0x00, 0x8309e8a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,string)`.\n            mstore(0x00, 0x759f86bb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,address)`.\n            mstore(0x00, 0x853c4849)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,bool)`.\n            mstore(0x00, 0x2a110e83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,uint256)`.\n            mstore(0x00, 0x399174d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,string)`.\n            mstore(0x00, 0x8feac525)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,address)`.\n            mstore(0x00, 0x69276c86)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,bool)`.\n            mstore(0x00, 0x1c9d7eb3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,uint256)`.\n            mstore(0x00, 0xf666715a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,string)`.\n            mstore(0x00, 0x643fd0df)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,address)`.\n            mstore(0x00, 0x319af333)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,bool)`.\n            mstore(0x00, 0xc3b55635)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,uint256)`.\n            mstore(0x00, 0xb60e72cc)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,string)`.\n            mstore(0x00, 0x4b5c4277)\n            mstore(0x20, 0x40)\n            mstore(0x40, 0x80)\n            writeString(0x60, p0)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,address)`.\n            mstore(0x00, 0x018c84c2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,bool)`.\n            mstore(0x00, 0xf2a66286)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,uint256)`.\n            mstore(0x00, 0x17fe6185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,address,string)`.\n            mstore(0x00, 0x007150be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,address)`.\n            mstore(0x00, 0xf11699ed)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,bool)`.\n            mstore(0x00, 0xeb830c92)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,uint256)`.\n            mstore(0x00, 0x9c4f99fb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,bool,string)`.\n            mstore(0x00, 0x212255cc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,address)`.\n            mstore(0x00, 0x7bc0d848)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,bool)`.\n            mstore(0x00, 0x678209a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,uint256)`.\n            mstore(0x00, 0xb69bcaf6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,uint256,string)`.\n            mstore(0x00, 0xa1f2e8aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,address)`.\n            mstore(0x00, 0xf08744e8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,bool)`.\n            mstore(0x00, 0xcf020fb1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,uint256)`.\n            mstore(0x00, 0x67dd6ff1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(address,string,string)`.\n            mstore(0x00, 0xfb772265)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,address)`.\n            mstore(0x00, 0xd2763667)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,bool)`.\n            mstore(0x00, 0x18c9c746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,uint256)`.\n            mstore(0x00, 0x5f7b9afb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,address,string)`.\n            mstore(0x00, 0xde9a9270)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,address)`.\n            mstore(0x00, 0x1078f68d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,bool)`.\n            mstore(0x00, 0x50709698)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,uint256)`.\n            mstore(0x00, 0x12f21602)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,bool,string)`.\n            mstore(0x00, 0x2555fa46)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,address)`.\n            mstore(0x00, 0x088ef9d2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,bool)`.\n            mstore(0x00, 0xe8defba9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,uint256)`.\n            mstore(0x00, 0x37103367)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,uint256,string)`.\n            mstore(0x00, 0xc3fc3970)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,address)`.\n            mstore(0x00, 0x9591b953)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,bool)`.\n            mstore(0x00, 0xdbb4c247)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,uint256)`.\n            mstore(0x00, 0x1093ee11)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(bool,string,string)`.\n            mstore(0x00, 0xb076847f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,address)`.\n            mstore(0x00, 0xbcfd9be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,bool)`.\n            mstore(0x00, 0x9b6ec042)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,uint256)`.\n            mstore(0x00, 0x5a9b5ed5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,address,string)`.\n            mstore(0x00, 0x63cb41f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,address)`.\n            mstore(0x00, 0x35085f7b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,bool)`.\n            mstore(0x00, 0x20718650)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,uint256)`.\n            mstore(0x00, 0x20098014)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,bool,string)`.\n            mstore(0x00, 0x85775021)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,address)`.\n            mstore(0x00, 0x5c96b331)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,bool)`.\n            mstore(0x00, 0x4766da72)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,uint256)`.\n            mstore(0x00, 0xd1ed7a3c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,uint256,string)`.\n            mstore(0x00, 0x71d04af2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,address)`.\n            mstore(0x00, 0x7afac959)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,bool)`.\n            mstore(0x00, 0x4ceda75a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,uint256)`.\n            mstore(0x00, 0x37aa7d4c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(uint256,string,string)`.\n            mstore(0x00, 0xb115611f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,address)`.\n            mstore(0x00, 0xfcec75e0)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,bool)`.\n            mstore(0x00, 0xc91d5ed4)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,uint256)`.\n            mstore(0x00, 0x0d26b925)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,address,string)`.\n            mstore(0x00, 0xe0e9ad4f)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,address)`.\n            mstore(0x00, 0x932bbb38)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,bool)`.\n            mstore(0x00, 0x850b7ad6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,uint256)`.\n            mstore(0x00, 0xc95958d6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,bool,string)`.\n            mstore(0x00, 0xe298f47d)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,address)`.\n            mstore(0x00, 0x1c7ec448)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,bool)`.\n            mstore(0x00, 0xca7733b1)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,uint256)`.\n            mstore(0x00, 0xca47c4eb)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,uint256,string)`.\n            mstore(0x00, 0x5970e089)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,address)`.\n            mstore(0x00, 0x95ed0195)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,bool)`.\n            mstore(0x00, 0xb0e0f9b5)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,uint256)`.\n            mstore(0x00, 0x5821efa1)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            // Selector of `log(string,string,string)`.\n            mstore(0x00, 0x2ced7cef)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, 0xe0)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n            writeString(0x100, p2)\n        }\n        _sendLogPayload(0x1c, 0x124);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n        }\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,address)`.\n            mstore(0x00, 0x665bf134)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,bool)`.\n            mstore(0x00, 0x0e378994)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,uint256)`.\n            mstore(0x00, 0x94250d77)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,address,string)`.\n            mstore(0x00, 0xf808da20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,address)`.\n            mstore(0x00, 0x9f1bc36e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,bool)`.\n            mstore(0x00, 0x2cd4134a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,uint256)`.\n            mstore(0x00, 0x3971e78c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,bool,string)`.\n            mstore(0x00, 0xaa6540c8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,address)`.\n            mstore(0x00, 0x8da6def5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,bool)`.\n            mstore(0x00, 0x9b4254e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,uint256)`.\n            mstore(0x00, 0xbe553481)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,uint256,string)`.\n            mstore(0x00, 0xfdb4f990)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,address)`.\n            mstore(0x00, 0x8f736d16)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,bool)`.\n            mstore(0x00, 0x6f1a594e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,uint256)`.\n            mstore(0x00, 0xef1cefe7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,address,string,string)`.\n            mstore(0x00, 0x21bdaf25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,address)`.\n            mstore(0x00, 0x660375dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,bool)`.\n            mstore(0x00, 0xa6f50b0f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,uint256)`.\n            mstore(0x00, 0xa75c59de)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,address,string)`.\n            mstore(0x00, 0x2dd778e6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,address)`.\n            mstore(0x00, 0xcf394485)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,bool)`.\n            mstore(0x00, 0xcac43479)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,uint256)`.\n            mstore(0x00, 0x8c4e5de6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,bool,string)`.\n            mstore(0x00, 0xdfc4a2e8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,address)`.\n            mstore(0x00, 0xccf790a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,bool)`.\n            mstore(0x00, 0xc4643e20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,uint256)`.\n            mstore(0x00, 0x386ff5f4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,uint256,string)`.\n            mstore(0x00, 0x0aa6cfad)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,address)`.\n            mstore(0x00, 0x19fd4956)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,bool)`.\n            mstore(0x00, 0x50ad461d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,uint256)`.\n            mstore(0x00, 0x80e6a20b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,bool,string,string)`.\n            mstore(0x00, 0x475c5c33)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,address)`.\n            mstore(0x00, 0x478d1c62)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,bool)`.\n            mstore(0x00, 0xa1bcc9b3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,uint256)`.\n            mstore(0x00, 0x100f650e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,address,string)`.\n            mstore(0x00, 0x1da986ea)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,address)`.\n            mstore(0x00, 0xa31bfdcc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,bool)`.\n            mstore(0x00, 0x3bf5e537)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,uint256)`.\n            mstore(0x00, 0x22f6b999)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,bool,string)`.\n            mstore(0x00, 0xc5ad85f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,address)`.\n            mstore(0x00, 0x20e3984d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,bool)`.\n            mstore(0x00, 0x66f1bc67)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,uint256)`.\n            mstore(0x00, 0x34f0e636)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,uint256,string)`.\n            mstore(0x00, 0x4a28c017)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,address)`.\n            mstore(0x00, 0x5c430d47)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,bool)`.\n            mstore(0x00, 0xcf18105c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,uint256)`.\n            mstore(0x00, 0xbf01f891)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,uint256,string,string)`.\n            mstore(0x00, 0x88a8c406)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,address)`.\n            mstore(0x00, 0x0d36fa20)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,bool)`.\n            mstore(0x00, 0x0df12b76)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,uint256)`.\n            mstore(0x00, 0x457fe3cf)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,address,string)`.\n            mstore(0x00, 0xf7e36245)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,address)`.\n            mstore(0x00, 0x205871c2)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,bool)`.\n            mstore(0x00, 0x5f1d5c9f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,uint256)`.\n            mstore(0x00, 0x515e38b6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,bool,string)`.\n            mstore(0x00, 0xbc0b61fe)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,address)`.\n            mstore(0x00, 0x63183678)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,bool)`.\n            mstore(0x00, 0x0ef7e050)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,uint256)`.\n            mstore(0x00, 0x1dc8e1b8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,uint256,string)`.\n            mstore(0x00, 0x448830a8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,address)`.\n            mstore(0x00, 0xa04e2f87)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,bool)`.\n            mstore(0x00, 0x35a5071f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,uint256)`.\n            mstore(0x00, 0x159f8927)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(address,string,string,string)`.\n            mstore(0x00, 0x5d02c50b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,address)`.\n            mstore(0x00, 0x1d14d001)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,bool)`.\n            mstore(0x00, 0x46600be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,uint256)`.\n            mstore(0x00, 0x0c66d1be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,address,string)`.\n            mstore(0x00, 0xd812a167)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,address)`.\n            mstore(0x00, 0x1c41a336)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,bool)`.\n            mstore(0x00, 0x6a9c478b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,uint256)`.\n            mstore(0x00, 0x07831502)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,bool,string)`.\n            mstore(0x00, 0x4a66cb34)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,address)`.\n            mstore(0x00, 0x136b05dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,bool)`.\n            mstore(0x00, 0xd6019f1c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,uint256)`.\n            mstore(0x00, 0x7bf181a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,uint256,string)`.\n            mstore(0x00, 0x51f09ff8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,address)`.\n            mstore(0x00, 0x6f7c603e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,bool)`.\n            mstore(0x00, 0xe2bfd60b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,uint256)`.\n            mstore(0x00, 0xc21f64c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,address,string,string)`.\n            mstore(0x00, 0xa73c1db6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,address)`.\n            mstore(0x00, 0xf4880ea4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,bool)`.\n            mstore(0x00, 0xc0a302d8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,uint256)`.\n            mstore(0x00, 0x4c123d57)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,address,string)`.\n            mstore(0x00, 0xa0a47963)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,address)`.\n            mstore(0x00, 0x8c329b1a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,bool)`.\n            mstore(0x00, 0x3b2a5ce0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,uint256)`.\n            mstore(0x00, 0x6d7045c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,bool,string)`.\n            mstore(0x00, 0x2ae408d4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,address)`.\n            mstore(0x00, 0x54a7a9a0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,bool)`.\n            mstore(0x00, 0x619e4d0e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,uint256)`.\n            mstore(0x00, 0x0bb00eab)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,uint256,string)`.\n            mstore(0x00, 0x7dd4d0e0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,address)`.\n            mstore(0x00, 0xf9ad2b89)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,bool)`.\n            mstore(0x00, 0xb857163a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,uint256)`.\n            mstore(0x00, 0xe3a9ca2f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,bool,string,string)`.\n            mstore(0x00, 0x6d1e8751)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,address)`.\n            mstore(0x00, 0x26f560a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,bool)`.\n            mstore(0x00, 0xb4c314ff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,uint256)`.\n            mstore(0x00, 0x1537dc87)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,address,string)`.\n            mstore(0x00, 0x1bb3b09a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,address)`.\n            mstore(0x00, 0x9acd3616)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,bool)`.\n            mstore(0x00, 0xceb5f4d7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,uint256)`.\n            mstore(0x00, 0x7f9bbca2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,bool,string)`.\n            mstore(0x00, 0x9143dbb1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,address)`.\n            mstore(0x00, 0x00dd87b9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,bool)`.\n            mstore(0x00, 0xbe984353)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,uint256)`.\n            mstore(0x00, 0x374bb4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,uint256,string)`.\n            mstore(0x00, 0x8e69fb5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,address)`.\n            mstore(0x00, 0xfedd1fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,bool)`.\n            mstore(0x00, 0xe5e70b2b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,uint256)`.\n            mstore(0x00, 0x6a1199e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,uint256,string,string)`.\n            mstore(0x00, 0xf5bc2249)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,address)`.\n            mstore(0x00, 0x2b2b18dc)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,bool)`.\n            mstore(0x00, 0x6dd434ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,uint256)`.\n            mstore(0x00, 0xa5cada94)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,address,string)`.\n            mstore(0x00, 0x12d6c788)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,address)`.\n            mstore(0x00, 0x538e06ab)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,bool)`.\n            mstore(0x00, 0xdc5e935b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,uint256)`.\n            mstore(0x00, 0x1606a393)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,bool,string)`.\n            mstore(0x00, 0x483d0416)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,address)`.\n            mstore(0x00, 0x1596a1ce)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,bool)`.\n            mstore(0x00, 0x6b0e5d53)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,uint256)`.\n            mstore(0x00, 0x28863fcb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,uint256,string)`.\n            mstore(0x00, 0x1ad96de6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,address)`.\n            mstore(0x00, 0x97d394d8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,bool)`.\n            mstore(0x00, 0x1e4b87e5)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,uint256)`.\n            mstore(0x00, 0x7be0c3eb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(bool,string,string,string)`.\n            mstore(0x00, 0x1762e32a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,address)`.\n            mstore(0x00, 0x2488b414)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,bool)`.\n            mstore(0x00, 0x091ffaf5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,uint256)`.\n            mstore(0x00, 0x736efbb6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,address,string)`.\n            mstore(0x00, 0x031c6f73)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,address)`.\n            mstore(0x00, 0xef72c513)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,bool)`.\n            mstore(0x00, 0xe351140f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,uint256)`.\n            mstore(0x00, 0x5abd992a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,bool,string)`.\n            mstore(0x00, 0x90fb06aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,address)`.\n            mstore(0x00, 0x15c127b5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,bool)`.\n            mstore(0x00, 0x5f743a7c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,uint256)`.\n            mstore(0x00, 0x0c9cd9c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,uint256,string)`.\n            mstore(0x00, 0xddb06521)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,address)`.\n            mstore(0x00, 0x9cba8fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,bool)`.\n            mstore(0x00, 0xcc32ab07)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,uint256)`.\n            mstore(0x00, 0x46826b5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,address,string,string)`.\n            mstore(0x00, 0x3e128ca3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,address)`.\n            mstore(0x00, 0xa1ef4cbb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,bool)`.\n            mstore(0x00, 0x454d54a5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,uint256)`.\n            mstore(0x00, 0x078287f5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,address,string)`.\n            mstore(0x00, 0xade052c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,address)`.\n            mstore(0x00, 0x69640b59)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,bool)`.\n            mstore(0x00, 0xb6f577a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,uint256)`.\n            mstore(0x00, 0x7464ce23)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,bool,string)`.\n            mstore(0x00, 0xdddb9561)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,address)`.\n            mstore(0x00, 0x88cb6041)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,bool)`.\n            mstore(0x00, 0x91a02e2a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,uint256)`.\n            mstore(0x00, 0xc6acc7a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,uint256,string)`.\n            mstore(0x00, 0xde03e774)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,address)`.\n            mstore(0x00, 0xef529018)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,bool)`.\n            mstore(0x00, 0xeb928d7f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,uint256)`.\n            mstore(0x00, 0x2c1d0746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,bool,string,string)`.\n            mstore(0x00, 0x68c8b8bd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,address)`.\n            mstore(0x00, 0x56a5d1b1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,bool)`.\n            mstore(0x00, 0x15cac476)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,uint256)`.\n            mstore(0x00, 0x88f6e4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,address,string)`.\n            mstore(0x00, 0x6cde40b8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,address)`.\n            mstore(0x00, 0x9a816a83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,bool)`.\n            mstore(0x00, 0xab085ae6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,uint256)`.\n            mstore(0x00, 0xeb7f6fd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,bool,string)`.\n            mstore(0x00, 0xa5b4fc99)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,address)`.\n            mstore(0x00, 0xfa8185af)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,bool)`.\n            mstore(0x00, 0xc598d185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\n            mstore(0x00, 0x193fb800)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,uint256,string)`.\n            mstore(0x00, 0x59cfcbe3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,address)`.\n            mstore(0x00, 0x42d21db7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,bool)`.\n            mstore(0x00, 0x7af6ab25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,uint256)`.\n            mstore(0x00, 0x5da297eb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,uint256,string,string)`.\n            mstore(0x00, 0x27d8afd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,address)`.\n            mstore(0x00, 0x6168ed61)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,bool)`.\n            mstore(0x00, 0x90c30a56)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,uint256)`.\n            mstore(0x00, 0xe8d3018d)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,address,string)`.\n            mstore(0x00, 0x9c3adfa1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,address)`.\n            mstore(0x00, 0xae2ec581)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,bool)`.\n            mstore(0x00, 0xba535d9c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,uint256)`.\n            mstore(0x00, 0xcf009880)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,bool,string)`.\n            mstore(0x00, 0xd2d423cd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,address)`.\n            mstore(0x00, 0x3b2279b4)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,bool)`.\n            mstore(0x00, 0x691a8f74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,uint256)`.\n            mstore(0x00, 0x82c25b74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,uint256,string)`.\n            mstore(0x00, 0xb7b914ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,address)`.\n            mstore(0x00, 0xd583c602)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,bool)`.\n            mstore(0x00, 0xb3a6b6bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,uint256)`.\n            mstore(0x00, 0xb028c9bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(uint256,string,string,string)`.\n            mstore(0x00, 0x21ad0683)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,address)`.\n            mstore(0x00, 0xed8f28f6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,bool)`.\n            mstore(0x00, 0xb59dbd60)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,uint256)`.\n            mstore(0x00, 0x8ef3f399)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,address,string)`.\n            mstore(0x00, 0x800a1c67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,address)`.\n            mstore(0x00, 0x223603bd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,bool)`.\n            mstore(0x00, 0x79884c2b)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,uint256)`.\n            mstore(0x00, 0x3e9f866a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,bool,string)`.\n            mstore(0x00, 0x0454c079)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,address)`.\n            mstore(0x00, 0x63fb8bc5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,bool)`.\n            mstore(0x00, 0xfc4845f0)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,uint256)`.\n            mstore(0x00, 0xf8f51b1e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,uint256,string)`.\n            mstore(0x00, 0x5a477632)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,address)`.\n            mstore(0x00, 0xaabc9a31)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,bool)`.\n            mstore(0x00, 0x5f15d28c)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,uint256)`.\n            mstore(0x00, 0x91d1112e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,address,string,string)`.\n            mstore(0x00, 0x245986f2)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,address)`.\n            mstore(0x00, 0x33e9dd1d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,bool)`.\n            mstore(0x00, 0x958c28c6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,uint256)`.\n            mstore(0x00, 0x5d08bb05)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,address,string)`.\n            mstore(0x00, 0x2d8e33a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,address)`.\n            mstore(0x00, 0x7190a529)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,bool)`.\n            mstore(0x00, 0x895af8c5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,uint256)`.\n            mstore(0x00, 0x8e3f78a9)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,bool,string)`.\n            mstore(0x00, 0x9d22d5dd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,address)`.\n            mstore(0x00, 0x935e09bf)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,bool)`.\n            mstore(0x00, 0x8af7cf8a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,uint256)`.\n            mstore(0x00, 0x64b5bb67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,uint256,string)`.\n            mstore(0x00, 0x742d6ee7)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,address)`.\n            mstore(0x00, 0xe0625b29)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,bool)`.\n            mstore(0x00, 0x3f8a701d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,uint256)`.\n            mstore(0x00, 0x24f91465)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,bool,string,string)`.\n            mstore(0x00, 0xa826caeb)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,address)`.\n            mstore(0x00, 0x5ea2b7ae)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,bool)`.\n            mstore(0x00, 0x82112a42)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,uint256)`.\n            mstore(0x00, 0x4f04fdc6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,address,string)`.\n            mstore(0x00, 0x9ffb2f93)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,address)`.\n            mstore(0x00, 0xe0e95b98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,bool)`.\n            mstore(0x00, 0x354c36d6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,uint256)`.\n            mstore(0x00, 0xe41b6f6f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,bool,string)`.\n            mstore(0x00, 0xabf73a98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,address)`.\n            mstore(0x00, 0xe21de278)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,bool)`.\n            mstore(0x00, 0x7626db92)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,uint256)`.\n            mstore(0x00, 0xa7a87853)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,uint256,string)`.\n            mstore(0x00, 0x854b3496)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,address)`.\n            mstore(0x00, 0x7c4632a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,bool)`.\n            mstore(0x00, 0x7d24491d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,uint256)`.\n            mstore(0x00, 0xc67ea9d1)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,uint256,string,string)`.\n            mstore(0x00, 0x5ab84e1f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,address)`.\n            mstore(0x00, 0x439c7bef)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,bool)`.\n            mstore(0x00, 0x5ccd4e37)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,uint256)`.\n            mstore(0x00, 0x7cc3c607)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,address,string)`.\n            mstore(0x00, 0xeb1bff80)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,address)`.\n            mstore(0x00, 0xc371c7db)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,bool)`.\n            mstore(0x00, 0x40785869)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,uint256)`.\n            mstore(0x00, 0xd6aefad2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,bool,string)`.\n            mstore(0x00, 0x5e84b0ea)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,address)`.\n            mstore(0x00, 0x1023f7b2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,bool)`.\n            mstore(0x00, 0xc3a8a654)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,uint256)`.\n            mstore(0x00, 0xf45d7d2c)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,uint256,string)`.\n            mstore(0x00, 0x5d1a971a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,address)`.\n            mstore(0x00, 0x6d572f44)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,bool)`.\n            mstore(0x00, 0x2c1754ed)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,uint256)`.\n            mstore(0x00, 0x8eafb02b)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        bytes32 m11;\n        bytes32 m12;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            m11 := mload(0x160)\n            m12 := mload(0x180)\n            // Selector of `log(string,string,string,string)`.\n            mstore(0x00, 0xde68f20a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, 0x140)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n            writeString(0x160, p3)\n        }\n        _sendLogPayload(0x1c, 0x184);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n            mstore(0x160, m11)\n            mstore(0x180, m12)\n        }\n    }\n}\n"},"lib/fuzzlib/src/FuzzBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Fuzzlib} from \"./Fuzzlib.sol\";\nimport {PlatformCrytic} from \"./platform/PlatformCrytic.sol\";\n\nabstract contract FuzzBase {\n    Fuzzlib internal fl = new Fuzzlib();\n\n    constructor() {\n        fl.setPlatform(address(new PlatformCrytic()));\n    }\n}\n"},"lib/fuzzlib/src/FuzzLibString.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice Efficient library for creating string representations of integers.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)\n/// @author Modified from Crytic Properties (https://github.com/crytic/properties/blob/main/contracts/util/PropertiesHelper.sol)\nlibrary FuzzLibString {\n    bytes16 internal constant HEX_DIGITS = \"0123456789abcdef\";\n\n    function toString(int256 value) internal pure returns (string memory str) {\n        uint256 absValue = value >= 0 ? uint256(value) : uint256(-value);\n        str = toString(absValue);\n\n        if (value < 0) {\n            str = string(abi.encodePacked(\"-\", str));\n        }\n    }\n\n    function toString(uint256 value) internal pure returns (string memory str) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes\n            // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the\n            // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.\n            let newFreeMemoryPointer := add(mload(0x40), 160)\n\n            // Update the free memory pointer to avoid overriding our string.\n            mstore(0x40, newFreeMemoryPointer)\n\n            // Assign str to the end of the zone of newly allocated memory.\n            str := sub(newFreeMemoryPointer, 32)\n\n            // Clean the last word of memory it may not be overwritten.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                // Move the pointer 1 byte to the left.\n                str := sub(str, 1)\n\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n\n                // Keep dividing temp until zero.\n                temp := div(temp, 10)\n\n                 // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            // Compute and cache the final total length of the string.\n            let length := sub(end, str)\n\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 32)\n\n            // Store the string's length at the start of memory allocated for our string.\n            mstore(str, length)\n        }\n    }\n\n    function toString(address value) internal pure returns (string memory str) {\n        bytes memory s = new bytes(40);\n        for (uint256 i = 0; i < 20; i++) {\n            bytes1 b = bytes1(\n                uint8(uint256(uint160(value)) / (2**(8 * (19 - i))))\n            );\n            bytes1 hi = bytes1(uint8(b) / 16);\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    function char(bytes1 b) internal pure returns (bytes1 c) {\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n        else return bytes1(uint8(b) + 0x57);\n    }\n\n    // based on OZ's toHexString\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\n    function toHexString(bytes memory value)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * value.length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 0; i < value.length; i++) {\n            uint8 valueByte = uint8(value[i]);\n            buffer[2 * i + 2] = HEX_DIGITS[valueByte >> 4];\n            buffer[2 * i + 3] = HEX_DIGITS[valueByte & 0xf];\n        }\n        return string(buffer);\n    }\n\n    // https://ethereum.stackexchange.com/a/83577\n    function getRevertMsg(bytes memory returnData)\n        internal\n        pure\n        returns (string memory)\n    {\n        // Check that the data has the right size: 4 bytes for signature + 32 bytes for panic code\n        if (returnData.length == 4 + 32) {\n            // Check that the data starts with the Panic signature\n            bytes4 panicSignature = bytes4(keccak256(bytes(\"Panic(uint256)\")));\n            for (uint256 i = 0; i < 4; i++) {\n                if (returnData[i] != panicSignature[i])\n                    return \"Undefined signature\";\n            }\n\n            uint256 panicCode;\n            for (uint256 i = 4; i < 36; i++) {\n                panicCode = panicCode << 8;\n                panicCode |= uint8(returnData[i]);\n            }\n\n            // Now convert the panic code into its string representation\n            if (panicCode == 17) {\n                return \"Panic(17)\";\n            }\n\n            // Add other panic codes as needed or return a generic \"Unknown panic\"\n            return \"Undefined panic code\";\n        }\n\n        // If the returnData length is less than 68, then the transaction failed silently (without a revert message)\n        if (returnData.length < 68) return \"Transaction reverted silently\";\n\n        assembly {\n            // Slice the sighash.\n            returnData := add(returnData, 0x04)\n        }\n        return abi.decode(returnData, (string)); // All that remains is the revert string\n    }\n\n    function isRevertReasonEqual(bytes memory returnData, string memory reason)\n        internal\n        pure\n        returns (bool)\n    {\n        return (keccak256(abi.encodePacked(getRevertMsg(returnData))) ==\n            keccak256(abi.encodePacked(reason)));\n    }\n}\n"},"lib/fuzzlib/src/Fuzzlib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {HelperBase} from \"./helpers/HelperBase.sol\";\nimport {HelperAssert} from \"./helpers/HelperAssert.sol\";\nimport {HelperClamp} from \"./helpers/HelperClamp.sol\";\nimport {HelperLog} from \"./helpers/HelperLog.sol\";\nimport {HelperMath} from \"./helpers/HelperMath.sol\";\nimport {HelperRandom} from \"./helpers/HelperRandom.sol\";\n\ncontract Fuzzlib is\n    HelperBase,\n    HelperAssert,\n    HelperClamp,\n    HelperLog,\n    HelperMath,\n    HelperRandom\n{}\n"},"lib/fuzzlib/src/helpers/HelperAssert.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./HelperBase.sol\";\n\nimport \"../FuzzLibString.sol\";\n\n/// @author Based on Crytic PropertiesHelper (https://github.com/crytic/properties/blob/main/contracts/util/PropertiesHelper.sol)\nabstract contract HelperAssert is HelperBase {\n    event AssertFail(string);\n    event AssertEqFail(string);\n    event AssertNeqFail(string);\n    event AssertGteFail(string);\n    event AssertGtFail(string);\n    event AssertLteFail(string);\n    event AssertLtFail(string);\n\n    function t(bool b, string memory reason) public {\n        if (!b) {\n            emit AssertFail(reason);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice asserts that a is equal to b. Violations are logged using reason.\n    function eq(\n        uint256 a,\n        uint256 b,\n        string memory reason\n    ) public {\n        if (a != b) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"!=\", reason);\n            emit AssertEqFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice int256 version of eq\n    function eq(\n        int256 a,\n        int256 b,\n        string memory reason\n    ) public {\n        if (a != b) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"!=\", reason);\n           emit AssertEqFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice bool version of eq\n    function eq(\n        bool a,\n        bool b,\n        string memory reason\n    ) public {\n        if (a != b) {\n            string memory aStr = a ? \"true\" : \"false\";\n            string memory bStr = b ? \"true\" : \"false\";\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"!=\", reason);\n            emit AssertEqFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice address version of eq\n    function eq(\n        address a,\n        address b,\n        string memory reason\n    ) public {\n        if (a != b) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"!=\", reason);\n            emit AssertEqFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice bytes4 version of eq\n    function eq(\n        bytes4 a,\n        bytes4 b,\n        string memory reason\n    ) public {\n        if (a != b) {\n            bytes memory aBytes = abi.encodePacked(a);\n            bytes memory bBytes = abi.encodePacked(b);\n            string memory aStr = FuzzLibString.toHexString(aBytes);\n            string memory bStr = FuzzLibString.toHexString(bBytes);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"!=\", reason);\n            emit AssertEqFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice asserts that a is not equal to b. Violations are logged using reason.\n    function neq(\n        uint256 a,\n        uint256 b,\n        string memory reason\n    ) public {\n        if (a == b) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"==\", reason);\n            emit AssertNeqFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice int256 version of neq\n    function neq(\n        int256 a,\n        int256 b,\n        string memory reason\n    ) public {\n        if (a == b) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"==\", reason);\n            emit AssertNeqFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice asserts that a is greater than or equal to b. Violations are logged using reason.\n    function gte(\n        uint256 a,\n        uint256 b,\n        string memory reason\n    ) public {\n        if (!(a >= b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"<\", reason);\n            emit AssertGteFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice int256 version of gte\n    function gte(\n        int256 a,\n        int256 b,\n        string memory reason\n    ) public {\n        if (!(a >= b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"<\", reason);\n            emit AssertGteFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice asserts that a is greater than b. Violations are logged using reason.\n    function gt(\n        uint256 a,\n        uint256 b,\n        string memory reason\n    ) public {\n        if (!(a > b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"<=\", reason);\n            emit AssertGtFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice int256 version of gt\n    function gt(\n        int256 a,\n        int256 b,\n        string memory reason\n    ) public {\n        if (!(a > b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \"<=\", reason);\n            emit AssertGtFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice asserts that a is less than or equal to b. Violations are logged using reason.\n    function lte(\n        uint256 a,\n        uint256 b,\n        string memory reason\n    ) public {\n        if (!(a <= b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \">\", reason);\n            emit AssertLteFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice int256 version of lte\n    function lte(\n        int256 a,\n        int256 b,\n        string memory reason\n    ) public {\n        if (!(a <= b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \">\", reason);\n            emit AssertLteFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice asserts that a is less than b. Violations are logged using reason.\n    function lt(\n        uint256 a,\n        uint256 b,\n        string memory reason\n    ) public {\n        if (!(a < b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \">=\", reason);\n            emit AssertLtFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    /// @notice int256 version of lt\n    function lt(\n        int256 a,\n        int256 b,\n        string memory reason\n    ) public {\n        if (!(a < b)) {\n            string memory aStr = FuzzLibString.toString(a);\n            string memory bStr = FuzzLibString.toString(b);\n            string memory assertMsg = createAssertFailMessage(aStr, bStr, \">=\", reason);\n            emit AssertLtFail(assertMsg);\n            platform.assertFail();\n        }\n    }\n\n    function assertRevertReasonNotEqual(\n        bytes memory returnData,\n        string memory reason\n    ) public {\n        bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason);\n        t(!isEqual, reason);\n    }\n\n    function assertRevertReasonEqual(\n        bytes memory returnData,\n        string memory reason\n    ) public {\n        bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason);\n        t(isEqual, reason);\n    }\n\n    function assertRevertReasonEqual(\n        bytes memory returnData,\n        string memory reason1,\n        string memory reason2\n    ) public {\n        bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason1) ||\n            FuzzLibString.isRevertReasonEqual(returnData, reason2);\n        string memory assertMsg = string(\n            abi.encodePacked(reason1, \" OR \", reason2)\n        );\n        t(isEqual, assertMsg);\n    }\n\n    function assertRevertReasonEqual(\n        bytes memory returnData,\n        string memory reason1,\n        string memory reason2,\n        string memory reason3\n    ) public {\n        bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason1) ||\n            FuzzLibString.isRevertReasonEqual(returnData, reason2) ||\n            FuzzLibString.isRevertReasonEqual(returnData, reason3);\n        string memory assertMsg = string(\n            abi.encodePacked(reason1, \" OR \", reason2, \" OR \", reason3)\n        );\n        t(isEqual, assertMsg);\n    }\n\n    function assertRevertReasonEqual(\n        bytes memory returnData,\n        string memory reason1,\n        string memory reason2,\n        string memory reason3,\n        string memory reason4\n    ) public {\n        bool isEqual = FuzzLibString.isRevertReasonEqual(returnData, reason1) ||\n            FuzzLibString.isRevertReasonEqual(returnData, reason2) ||\n            FuzzLibString.isRevertReasonEqual(returnData, reason3) ||\n            FuzzLibString.isRevertReasonEqual(returnData, reason4);\n        string memory assertMsg = string(\n            abi.encodePacked(\n                reason1,\n                \" OR \",\n                reason2,\n                \" OR \",\n                reason3,\n                \" OR \",\n                reason4\n            )\n        );\n        t(isEqual, assertMsg);\n    }\n\n    function errAllow(\n        bytes4 errorSelector,\n        bytes4[] memory allowedErrors,\n        string memory message\n    ) public {\n        bool allowed = false;\n        for (uint256 i = 0; i < allowedErrors.length; i++) {\n            if (errorSelector == allowedErrors[i]) {\n                allowed = true;\n                break;\n            }\n        }\n        t(allowed, message);\n    }\n\n    function errsAllow(\n        bytes4 errorSelector,\n        bytes4[] memory allowedErrors,\n        string[] memory messages\n    ) public {\n        bool allowed = false;\n        uint256 passIndex = 0;\n        for (uint256 i = 0; i < allowedErrors.length; i++) {\n            if (errorSelector == allowedErrors[i]) {\n                allowed = true;\n                passIndex = i;\n                break;\n            }\n        }\n        t(allowed, messages[passIndex]);\n    }\n\n    function createAssertFailMessage(string memory aStr, string memory bStr, string memory operator, string memory reason)internal pure returns (string memory) {\n        return string(abi.encodePacked(\"Invalid: \", aStr, operator, bStr, \", reason: \", reason));\n    }\n\n}\n"},"lib/fuzzlib/src/helpers/HelperBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IPlatform} from \"../platform/IPlatform.sol\";\n\ncontract HelperBase {\n    IPlatform public platform;\n\n    function setPlatform(address _platform) public {\n        platform = IPlatform(_platform);\n    }\n}\n"},"lib/fuzzlib/src/helpers/HelperClamp.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../FuzzLibString.sol\";\nimport \"./HelperAssert.sol\";\n\n/// @author Based on Crytic PropertiesHelper (https://github.com/crytic/properties/blob/main/contracts/util/PropertiesHelper.sol)\nabstract contract HelperClamp is HelperAssert {\n    event Clamped(string);\n\n    /*\n     **************************************************************************\n     * Clamp functions with logging enabled\n     **************************************************************************\n     */\n\n    /// @notice Clamps value to be between low and high, both inclusive\n    function clamp(\n        uint256 value,\n        uint256 low,\n        uint256 high\n    ) public returns (uint256) {\n        return clamp(value, low, high, true);\n    }\n\n    /// @notice int256 version of clamp\n    function clamp(\n        int256 value,\n        int256 low,\n        int256 high\n    ) public returns (int256) {\n        return clamp(value, low, high, true);\n    }\n\n    /// @notice clamps a to be less than b\n    function clampLt(uint256 a, uint256 b) public returns (uint256) {\n        return clampLt(a, b);\n    }\n\n    /// @notice int256 version of clampLt\n    function clampLt(int256 a, int256 b) public returns (int256) {\n        return clampLt(a, b, true);\n    }\n\n    /// @notice clamps a to be less than or equal to b\n    function clampLte(uint256 a, uint256 b) public returns (uint256) {\n        return clampLte(a, b, true);\n    }\n\n    /// @notice int256 version of clampLte\n    function clampLte(int256 a, int256 b) public returns (int256) {\n        return clampLte(a, b, true);\n    }\n\n    /// @notice clamps a to be greater than b\n    function clampGt(uint256 a, uint256 b) public returns (uint256) {\n        return clampGt(a, b, true);\n    }\n\n    /// @notice int256 version of clampGt\n    function clampGt(int256 a, int256 b) public returns (int256) {\n        return clampGt(a, b, true);\n    }\n\n    /// @notice clamps a to be greater than or equal to b\n    function clampGte(uint256 a, uint256 b) public returns (uint256) {\n        return clampGte(a, b, true);\n    }\n\n    /// @notice int256 version of clampGte\n    function clampGte(int256 a, int256 b) public returns (int256) {\n        return clampGte(a, b, true);\n    }\n\n    /*\n     **************************************************************************\n     * Clamp functions with optional logging\n     **************************************************************************\n     */\n\n    /// @notice Clamps value to be between low and high, both inclusive\n    function clamp(\n        uint256 value,\n        uint256 low,\n        uint256 high,\n        bool enableLogs\n    ) public returns (uint256) {\n        if (value < low || value > high) {\n            uint256 ans = low + (value % (high - low + 1));\n            if (enableLogs) {\n                string memory valueStr = FuzzLibString.toString(value);\n                string memory ansStr = FuzzLibString.toString(ans);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    valueStr,\n                    \" to \",\n                    ansStr\n                );\n                emit Clamped(string(message));\n            }\n            return ans;\n        }\n        return value;\n    }\n\n    /// @notice int256 version of clamp\n    function clamp(\n        int256 value,\n        int256 low,\n        int256 high,\n        bool enableLogs\n    ) public returns (int256) {\n        if (value < low || value > high) {\n            int256 range = high - low + 1;\n            int256 clamped = (value - low) % (range);\n            if (clamped < 0) clamped += range;\n            int256 ans = low + clamped;\n            if (enableLogs) {\n                string memory valueStr = FuzzLibString.toString(value);\n                string memory ansStr = FuzzLibString.toString(ans);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    valueStr,\n                    \" to \",\n                    ansStr\n                );\n                emit Clamped(string(message));\n            }\n            return ans;\n        }\n        return value;\n    }\n\n    /// @notice clamps a to be less than b\n    function clampLt(\n        uint256 a,\n        uint256 b,\n        bool enableLogs\n    ) public returns (uint256) {\n        if (!(a < b)) {\n            neq(\n                b,\n                0,\n                \"clampLt cannot clamp value a to be less than zero. Check your inputs/assumptions.\"\n            );\n            uint256 value = a % b;\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        }\n        return a;\n    }\n\n    /// @notice int256 version of clampLt\n    function clampLt(\n        int256 a,\n        int256 b,\n        bool enableLogs\n    ) public returns (int256) {\n        if (!(a < b)) {\n            int256 value = b - 1;\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        }\n        return a;\n    }\n\n    /// @notice clamps a to be less than or equal to b\n    function clampLte(\n        uint256 a,\n        uint256 b,\n        bool enableLogs\n    ) public returns (uint256) {\n        if (!(a <= b)) {\n            uint256 value = a % (b + 1);\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        }\n        return a;\n    }\n\n    /// @notice int256 version of clampLte\n    function clampLte(\n        int256 a,\n        int256 b,\n        bool enableLogs\n    ) public returns (int256) {\n        if (!(a <= b)) {\n            int256 value = b;\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        }\n        return a;\n    }\n\n    /// @notice clamps a to be greater than b\n    function clampGt(\n        uint256 a,\n        uint256 b,\n        bool enableLogs\n    ) public returns (uint256) {\n        if (!(a > b)) {\n            neq(\n                b,\n                type(uint256).max,\n                \"clampGt cannot clamp value a to be larger than uint256.max. Check your inputs/assumptions.\"\n            );\n            uint256 value = b + 1;\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        } else {\n            return a;\n        }\n    }\n\n    /// @notice int256 version of clampGt\n    function clampGt(\n        int256 a,\n        int256 b,\n        bool enableLogs\n    ) public returns (int256) {\n        if (!(a > b)) {\n            int256 value = b + 1;\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        } else {\n            return a;\n        }\n    }\n\n    /// @notice clamps a to be greater than or equal to b\n    function clampGte(\n        uint256 a,\n        uint256 b,\n        bool enableLogs\n    ) public returns (uint256) {\n        if (!(a > b)) {\n            uint256 value = b;\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        }\n        return a;\n    }\n\n    /// @notice int256 version of clampGte\n    function clampGte(\n        int256 a,\n        int256 b,\n        bool enableLogs\n    ) public returns (int256) {\n        if (!(a > b)) {\n            int256 value = b;\n            if (enableLogs) {\n                string memory aStr = FuzzLibString.toString(a);\n                string memory valueStr = FuzzLibString.toString(value);\n                bytes memory message = abi.encodePacked(\n                    \"Clamping value \",\n                    aStr,\n                    \" to \",\n                    valueStr\n                );\n                emit Clamped(string(message));\n            }\n            return value;\n        }\n        return a;\n    }\n}\n"},"lib/fuzzlib/src/helpers/HelperLog.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {LibLog} from \"../libraries/LibLog.sol\";\n\nabstract contract HelperLog {\n    function log(string memory message) public {\n        LibLog.log(message);\n    }\n\n    function log(string memory message, string memory data) public {\n        LibLog.log(message, data);\n    }\n\n    function log(string memory message, bytes memory data) public {\n        LibLog.log(message, data);\n    }\n\n    function log(string memory message, uint256 data) public {\n        LibLog.log(message, data);\n    }\n\n    function log(string memory message, int256 data) public {\n        LibLog.log(message, data);\n    }\n\n    function log(string memory message, address data) public {\n        LibLog.log(message, data);\n    }\n\n    function log(string memory message, bool data) public {\n        LibLog.log(message, data);\n    }\n\n    function log(string memory message, bytes32 data) public {\n        LibLog.log(message, data);\n    }\n\n    function logFail() public {\n        LibLog.logFail();\n    }\n\n    function logFail(string memory message) public {\n        LibLog.logFail(message);\n    }\n\n    function logFail(string memory message, string memory data) public {\n        LibLog.logFail(message, data);\n    }\n\n    function logFail(string memory message, bytes memory data) public {\n        LibLog.logFail(message, data);\n    }\n\n    function logFail(string memory message, uint256 data) public {\n        LibLog.logFail(message, data);\n    }\n\n    function logFail(string memory message, int256 data) public {\n        LibLog.logFail(message, data);\n    }\n\n    function logFail(string memory message, address data) public {\n        LibLog.logFail(message, data);\n    }\n\n    function logFail(string memory message, bool data) public {\n        LibLog.logFail(message, data);\n    }\n\n    function logFail(string memory message, bytes32 data) public {\n        LibLog.log(message, data);\n    }\n}\n"},"lib/fuzzlib/src/helpers/HelperMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract HelperMath {\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b) public pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    // Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.0/contracts/utils/math/SignedMath.sol\n    function max(int256 a, int256 b) public pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    // Forked with modifications from https://ethereum.stackexchange.com/a/84391\n    function abs(int128 n) public pure returns (int128) {\n        return n >= 0 ? n : -n;\n    }\n\n    function abs(int256 n) public pure returns (uint256) {\n        return n >= 0 ? uint256(n) : uint256(-n);\n    }\n\n    function diff(int256 a, int256 b) public pure returns (uint256) {\n        return a >= b ? uint256(a - b) : uint256(b - a);\n    }\n\n    function diff(uint256 a, uint256 b) public pure returns (uint256) {\n        return a >= b ? a - b : b - a;\n    }\n}\n"},"lib/fuzzlib/src/helpers/HelperRandom.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract HelperRandom {\n    /// @notice Shuffle an array using Fisher-Yates algorithm\n    /// @dev Based on https://gist.github.com/scammi/602387a22e04c77beb73c0ebc0f0bc18\n    function shuffleArray(\n        uint256[] memory shuffle,\n        uint256 entropy\n    ) public pure {\n        for (uint256 i = shuffle.length - 1; i > 0; i--) {\n            uint256 swapIndex = entropy % (shuffle.length - i);\n\n            uint256 currentIndex = shuffle[i];\n            uint256 indexToSwap = shuffle[swapIndex];\n\n            shuffle[i] = indexToSwap;\n            shuffle[swapIndex] = currentIndex;\n        }\n    }\n}\n"},"lib/fuzzlib/src/libraries/LibLog.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary LibLog {\n    event Log(string message);\n    event LogString(string message, string data);\n    event LogBytes(string message, bytes data);\n    event LogUint(string message, uint256 data);\n    event LogInt(string message, int256 data);\n    event LogAddress(string message, address data);\n    event LogBool(string message, bool data);\n    event LogBytes32(string message, bytes32 data);\n\n    event AssertionFailed();\n    event AssertionFailed(string message);\n    event AssertionFailed(string message, string data);\n    event AssertionFailed(string message, bytes data);\n    event AssertionFailed(string message, uint256 data);\n    event AssertionFailed(string message, int256 data);\n    event AssertionFailed(string message, address data);\n    event AssertionFailed(string message, bool data);\n\n    function log(string memory message) internal {\n        emit Log(message);\n    }\n\n    function log(string memory message, string memory data) internal {\n        emit LogString(message, data);\n    }\n\n    function log(string memory message, bytes memory data) internal {\n        emit LogBytes(message, data);\n    }\n\n    function log(string memory message, uint256 data) internal {\n        emit LogUint(message, data);\n    }\n\n    function log(string memory message, int256 data) internal {\n        emit LogInt(message, data);\n    }\n\n    function log(string memory message, address data) internal {\n        emit LogAddress(message, data);\n    }\n\n    function log(string memory message, bool data) internal {\n        emit LogBool(message, data);\n    }\n\n    function log(string memory message, bytes32 data) internal {\n        emit LogBytes32(message, data);\n    }\n\n    function logFail() internal {\n        emit AssertionFailed();\n    }\n\n    function logFail(string memory message) internal {\n        emit AssertionFailed(message);\n    }\n\n    function logFail(string memory message, string memory data) internal {\n        emit AssertionFailed(message, data);\n    }\n\n    function logFail(string memory message, bytes memory data) internal {\n        emit AssertionFailed(message, data);\n    }\n\n    function logFail(string memory message, uint256 data) internal {\n        emit AssertionFailed(message, data);\n    }\n\n    function logFail(string memory message, int256 data) internal {\n        emit AssertionFailed(message, data);\n    }\n\n    function logFail(string memory message, address data) internal {\n        emit AssertionFailed(message, data);\n    }\n\n    function logFail(string memory message, bool data) internal {\n        emit AssertionFailed(message, data);\n    }\n\n    function logFail(string memory message, bytes32 data) internal {\n        emit LogBytes32(message, data);\n    }\n}\n"},"lib/fuzzlib/src/platform/IPlatform.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPlatform {\n    function assertFail() pure external;\n}\n"},"lib/fuzzlib/src/platform/PlatformCrytic.sol":{"content":"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IPlatform} from \"./IPlatform.sol\";\n\ncontract PlatformCrytic is IPlatform {\n    function assertFail() pure public override{\n        assert(false);\n    }\n}\n"},"test/fuzzing/FoundryPlayground.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./FuzzGuided.sol\";\n\ncontract FoundryPlayground is FuzzGuided {\n    function setUp() public {\n        vm.warp(1524785992); //echidna starting time\n        fuzzSetup();\n    }\n\n    function test_coverage_SampleFunction() public {\n        fuzz_sampleFunction(1);\n    }\n\n    function test_repro_INV_01() public {\n        fuzz_sampleFunction(1);\n        fuzz_sampleFunction(2);\n    }\n\n    function test_repro_ERR_01_01() public {\n        //fail with require\n        fuzz_sampleFailWithRequire(true);\n    }\n\n    function test_repro_ERR_01_02() public {\n        //fail with custom error\n        fuzz_sampleFailWithCustomError(1);\n    }\n\n    function test_repro_ERR_01_03() public {\n        //fail with panic\n        fuzz_sampleFailWithPanic(1);\n    }\n\n    function test_repro_ERR_01_04() public {\n        //fail with assert\n        fuzz_sampleFailWithAssert(1);\n    }\n\n    function test_repro_ERR_01_05() public {\n        //fail with empty revert\n        fuzz_sampleFailReturnEmptyData(true);\n    }\n}\n"},"test/fuzzing/FuzzGuided.sol":{"content":"// SPDX-License-Identifier: UNTITLED\npragma solidity ^0.8.0;\n\nimport \"./FuzzSampleContract.sol\";\n\ncontract FuzzGuided is FuzzSampleContract {\n    function fuzz_guided_sampleFunctionCallTwice(uint256 sampleInput, uint256 sampleInput2) public setCurrentActor {\n        fuzz_sampleFunction(sampleInput);\n        fuzz_sampleFunction(sampleInput2);\n    }\n}\n"},"test/fuzzing/FuzzSampleContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./helpers/preconditions/PreconditionsSampleContract.sol\";\nimport \"./helpers/postconditions/PostconditionsSampleContract.sol\";\n\ncontract FuzzSampleContract is PreconditionsSampleContract, PostconditionsSampleContract {\n    function fuzz_sampleFunction(uint256 sampleInput) public setCurrentActor {\n        SampleFunctionParams memory params = sampleFunctionPreconditions(sampleInput);\n\n        address[] memory actorsToUpdate = new address[](1);\n        actorsToUpdate[0] = currentActor;\n        _before(actorsToUpdate);\n\n        (bool success, bytes memory returnData) = _sampleFunctionCall(params.sampleUint);\n\n        sampleFunctionPostconditions(success, returnData, actorsToUpdate);\n    }\n\n    function fuzz_sampleFailWithRequire(bool sampleInput) public setCurrentActor {\n        SampleFailWithRequireParams memory params = sampleFailWithRequirePreconditions(sampleInput);\n\n        address[] memory actorsToUpdate = new address[](1);\n        actorsToUpdate[0] = currentActor;\n        _before(actorsToUpdate);\n\n        (bool success, bytes memory returnData) = _sampleFailWithRequireCall(params.sampleUint);\n\n        sampleFailWithRequirePostconditions(success, returnData, actorsToUpdate);\n    }\n\n    function fuzz_sampleFailWithCustomError(uint8 sampleNum) public setCurrentActor {\n        SampleFailWithCustomErrorParams memory params = sampleFailWithCustomErrorPreconditions(sampleNum);\n\n        address[] memory actorsToUpdate = new address[](1);\n        actorsToUpdate[0] = currentActor;\n        _before(actorsToUpdate);\n\n        (bool success, bytes memory returnData) = _sampleFailWithCustomErrorCall(params.sampleUint);\n\n        sampleFailWithCustomErrorPostconditions(success, returnData, actorsToUpdate);\n    }\n\n    function fuzz_sampleFailWithPanic(uint256 sampleInput) public setCurrentActor {\n        SampleFailWithPanicParams memory params = sampleFailWithPanicPreconditions(sampleInput);\n\n        address[] memory actorsToUpdate = new address[](1);\n        actorsToUpdate[0] = currentActor;\n        _before(actorsToUpdate);\n\n        (bool success, bytes memory returnData) = _sampleFailWithPanicCall(params.sampleUint);\n\n        sampleFailWithPanicPostconditions(success, returnData, actorsToUpdate);\n    }\n\n    function fuzz_sampleFailWithAssert(uint256 sampleInput) public setCurrentActor {\n        SampleFailWithAssertParams memory params = sampleFailWithAssertPreconditions(sampleInput);\n\n        address[] memory actorsToUpdate = new address[](1);\n        actorsToUpdate[0] = currentActor;\n        _before(actorsToUpdate);\n\n        (bool success, bytes memory returnData) = _sampleFailWithAssertCall(params.sampleUint);\n\n        sampleFailWithAssertPostconditions(success, returnData, actorsToUpdate);\n    }\n\n    function fuzz_sampleFailReturnEmptyData(bool sampleInput) public setCurrentActor {\n        SampleFailReturnEmptyDataParams memory params = sampleFailReturnEmptyDataPreconditions(sampleInput);\n\n        address[] memory actorsToUpdate = new address[](1);\n        actorsToUpdate[0] = currentActor;\n        _before(actorsToUpdate);\n\n        (bool success, bytes memory returnData) = _sampleFailReturnEmptyDataCall(params.sampleUint);\n\n        sampleFailReturnEmptyDataPostconditions(success, returnData, actorsToUpdate);\n    }\n}\n"},"test/fuzzing/FuzzSetup.sol":{"content":"// SPDX-License-Identifier: UNTITLED\npragma solidity ^0.8.0;\n\nimport \"./utils/FunctionCalls.sol\";\n\ncontract FuzzSetup is FunctionCalls {\n    function fuzzSetup() internal {\n        deploySampleContract();\n        labelAll();\n    }\n\n    function deploySampleContract() internal {\n        sampleContract = new SampleContract();\n    }\n\n    //DO LABELING\n    function labelAll() internal {\n        //CONTRACTS\n        vm.label(address(sampleContract), \"SampleContract\");\n\n        //USERS\n        vm.label(USER1, \"USER1\");\n        vm.label(USER2, \"USER2\");\n        vm.label(USER3, \"USER3\");\n    }\n}\n"},"test/fuzzing/SampleContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SampleContract {\n    error SampleError(string message);\n\n    function sampleFunction(uint256 sampleInput) public {\n        sampleInput = sampleInput + 1;\n    }\n\n    function sampleFailWithRequire() public {\n        require(false, \"Sample fail with require\");\n    }\n\n    function sampleFailWithCustomError() public {\n        revert SampleError(\"Sample fail with custom error\");\n    }\n\n    function sampleFailWithPanic() public {\n        uint256 zero = 1 - 1;\n        uint256(1) / zero;\n    }\n\n    function sampleFailWithAssert() public {\n        assert(false);\n    }\n\n    function sampleFailReturnEmptyData() public {\n        //revert and return nothing\n        assembly {\n            revert(0, 0)\n        }\n    }\n}\n"},"test/fuzzing/helpers/BeforeAfter.sol":{"content":"pragma solidity ^0.8.0;\n\nimport \"../FuzzSetup.sol\";\n\ncontract BeforeAfter is FuzzSetup {\n    struct SampleFunctionParams {\n        uint256 sampleUint;\n    }\n\n    struct SampleFailWithRequireParams {\n        bool sampleUint;\n    }\n\n    struct SampleFailWithCustomErrorParams {\n        uint8 sampleUint;\n    }\n\n    struct SampleFailWithPanicParams {\n        uint256 sampleUint;\n    }\n\n    struct SampleFailWithAssertParams {\n        uint256 sampleUint;\n    }\n\n    struct SampleFailReturnEmptyDataParams {\n        bool sampleUint;\n    }\n\n    mapping(uint8 => State) states;\n\n    struct State {\n        mapping(address => ActorStates) actorStates;\n        uint256 contractEthBalance;\n    }\n\n    struct ActorStates {\n        uint256 userEthBalance;\n    }\n\n    function _before(address[] memory actors) internal {\n        _setStates(0, actors);\n    }\n\n    function _after(address[] memory actors) internal {\n        _setStates(1, actors);\n    }\n\n    function _setStates(uint8 callNum, address[] memory actors) internal {\n        _processActors(callNum, actors);\n        _updateCommonState(callNum);\n    }\n\n    function _processActors(uint8 callNum, address[] memory actors) private {\n        for (uint256 i = 0; i < actors.length; i++) {\n            _setActorState(callNum, actors[i]);\n        }\n    }\n\n    function _updateCommonState(uint8 callNum) private {\n        checkContractEthBalance(callNum);\n    }\n\n    function _setActorState(uint8 callNum, address actor) internal virtual {\n        checkUserEthBalance(callNum, actor);\n    }\n\n    function checkUserEthBalance(uint8 callNum, address user) internal {\n        console.log(\"Before/After userEthBalance\", callNum, user.balance);\n        states[callNum].actorStates[user].userEthBalance = user.balance;\n    }\n\n    function checkContractEthBalance(uint8 callNum) internal {\n        console.log(\"Before/After contractEthBalance\", callNum, address(sampleContract).balance);\n        states[callNum].contractEthBalance = address(sampleContract).balance;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"},"test/fuzzing/helpers/FuzzStorageVariables.sol":{"content":"// SPDX-License-Identifier: UNTITLED\npragma solidity ^0.8.0;\n\nimport \"test/fuzzing/SampleContract.sol\";\n\nimport \"../utils/FuzzActors.sol\";\n\ncontract FuzzStorageVariables is FuzzActors {\n    // ==============================================================\n    // FUZZING SUITE SETUP\n    // ==============================================================\n\n    address currentActor;\n    bool _setActor = true;\n\n    uint256 internal constant PRIME = 2147483647;\n    uint256 internal constant SEED = 22;\n    uint256 iteration = 1; // fuzzing iteration\n    uint256 lastTimestamp;\n\n    //==============================================================\n    // REVERTS CONFIGURATION\n    //==============================================================\n\n    bool internal constant CATCH_REQUIRE_REVERT = true; // Set to false to ignore require()/revert()\n    bool internal constant CATCH_EMPTY_REVERTS = true; // Set to true to allow empty return data\n\n    // ==============================================================\n    // CONTRACTS\n    // ==============================================================\n\n    SampleContract internal sampleContract;\n}\n"},"test/fuzzing/helpers/postconditions/PostconditionsBase.sol":{"content":"pragma solidity ^0.8.25;\n\nimport \"../../properties/Properties.sol\";\n\ncontract PostconditionsBase is Properties {\n    function onSuccessInvariantsGeneral(bytes memory returnData) internal {\n        invariant_GLOB_01();\n    }\n\n    function onFailInvariantsGeneral(bytes memory returnData) internal {\n        invariant_ERR(returnData);\n    }\n}\n"},"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PostconditionsBase.sol\";\n\ncontract PostconditionsSampleContract is PostconditionsBase {\n    function sampleFunctionPostconditions(bool success, bytes memory returnData, address[] memory actorsToUpdate)\n        internal\n    {\n        if (success) {\n            _after(actorsToUpdate);\n\n            invariant_INV_01();\n\n            onSuccessInvariantsGeneral(returnData);\n        } else {\n            onFailInvariantsGeneral(returnData);\n        }\n    }\n\n    function sampleFailWithRequirePostconditions(bool success, bytes memory returnData, address[] memory actorsToUpdate)\n        internal\n    {\n        if (success) {\n            onSuccessInvariantsGeneral(returnData);\n        } else {\n            onFailInvariantsGeneral(returnData);\n        }\n    }\n\n    function sampleFailWithCustomErrorPostconditions(\n        bool success,\n        bytes memory returnData,\n        address[] memory actorsToUpdate\n    ) internal {\n        if (success) {\n            onSuccessInvariantsGeneral(returnData);\n        } else {\n            onFailInvariantsGeneral(returnData);\n        }\n    }\n\n    function sampleFailWithPanicPostconditions(bool success, bytes memory returnData, address[] memory actorsToUpdate)\n        internal\n    {\n        if (success) {\n            onSuccessInvariantsGeneral(returnData);\n        } else {\n            onFailInvariantsGeneral(returnData);\n        }\n    }\n\n    function sampleFailWithAssertPostconditions(bool success, bytes memory returnData, address[] memory actorsToUpdate)\n        internal\n    {\n        if (success) {\n            onSuccessInvariantsGeneral(returnData);\n        } else {\n            onFailInvariantsGeneral(returnData);\n        }\n    }\n\n    function sampleFailReturnEmptyDataPostconditions(\n        bool success,\n        bytes memory returnData,\n        address[] memory actorsToUpdate\n    ) internal {\n        if (success) {\n            onSuccessInvariantsGeneral(returnData);\n        } else {\n            onFailInvariantsGeneral(returnData);\n        }\n    }\n}\n"},"test/fuzzing/helpers/preconditions/PreconditionsBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../BeforeAfter.sol\";\n\ncontract PreconditionsBase is BeforeAfter {\n    event LogAddress(address actor);\n\n    modifier setCurrentActor() {\n        if (_setActor) {\n            uint256 fuzzNumber = generateFuzzNumber(iteration, SEED);\n            console.log(\"fuzz iteration\", iteration);\n            currentActor = USERS[uint256(keccak256(abi.encodePacked(iteration * PRIME + SEED))) % (USERS.length)];\n\n            iteration += 1;\n\n            // vm.startPrank(currentActor);\n            console.log(\"Pranking: \", toString(currentActor)); //echidna logs output\n            console.log(\"Block timestamp: \", block.timestamp);\n            //check state and revert workaround\n            if (block.timestamp < lastTimestamp) {\n                vm.warp(lastTimestamp);\n            } else {\n                lastTimestamp = block.timestamp;\n            }\n        }\n        emit LogAddress(currentActor);\n        _;\n        // vm.stopPrank();\n        // console.log(\"Stopped prank: \", toString(msg.sender));\n    }\n\n    function setActor(address targetUser) internal {\n        address[] memory targetArray = USERS; //use several arrays\n        require(targetArray.length > 0, \"Target array is empty\");\n\n        // Find target user index\n        uint256 targetIndex;\n        bool found = false;\n        for (uint256 i = 0; i < targetArray.length; i++) {\n            if (targetArray[i] == targetUser) {\n                targetIndex = i;\n                console.log(\"Setting user\", targetUser);\n                console.log(\"Index\", i);\n\n                found = true;\n                break;\n            }\n        }\n\n        require(found, \"Target user not found in array\");\n\n        uint256 maxIterations = 100000; //  prevent infinite loops\n        uint256 currentIteration = iteration;\n        bool iterationFound = false;\n\n        for (uint256 i = 0; i < maxIterations; i++) {\n            uint256 hash = uint256(keccak256(abi.encodePacked(currentIteration * PRIME + SEED)));\n            uint256 index = hash % targetArray.length;\n\n            if (index == targetIndex) {\n                iteration = currentIteration;\n                iterationFound = true;\n                break;\n            }\n\n            currentIteration++;\n        }\n\n        require(iterationFound, \"User index not found by setter\");\n    }\n\n    function generateFuzzNumber(uint256 iteration, uint256 seed) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(iteration * PRIME + seed)));\n    }\n\n    function toString(address value) internal pure returns (string memory str) {\n        bytes memory s = new bytes(40);\n        for (uint256 i = 0; i < 20; i++) {\n            bytes1 b = bytes1(uint8(uint256(uint160(value)) / (2 ** (8 * (19 - i)))));\n            bytes1 hi = bytes1(uint8(b) / 16);\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    function char(bytes1 b) internal pure returns (bytes1 c) {\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n        else return bytes1(uint8(b) + 0x57);\n    }\n}\n"},"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PreconditionsBase.sol\";\n\ncontract PreconditionsSampleContract is PreconditionsBase {\n    function sampleFunctionPreconditions(uint256 sampleInput) internal returns (SampleFunctionParams memory params) {\n        params.sampleUint = fl.clamp(sampleInput, 0, 100);\n    }\n\n    function sampleFailWithRequirePreconditions(bool sampleInput)\n        internal\n        returns (SampleFailWithRequireParams memory params)\n    {\n        params.sampleUint = sampleInput;\n    }\n\n    function sampleFailWithCustomErrorPreconditions(uint8 sampleNum)\n        internal\n        returns (SampleFailWithCustomErrorParams memory params)\n    {\n        params.sampleUint = sampleNum;\n    }\n\n    function sampleFailWithPanicPreconditions(uint256 sampleInput)\n        internal\n        returns (SampleFailWithPanicParams memory params)\n    {\n        params.sampleUint = fl.clamp(sampleInput, 0, 8);\n    }\n\n    function sampleFailWithAssertPreconditions(uint256 sampleInput)\n        internal\n        returns (SampleFailWithAssertParams memory params)\n    {\n        params.sampleUint = sampleInput;\n    }\n\n    function sampleFailReturnEmptyDataPreconditions(bool sampleInput)\n        internal\n        returns (SampleFailReturnEmptyDataParams memory params)\n    {\n        params.sampleUint = sampleInput;\n    }\n}\n"},"test/fuzzing/properties/Properties.sol":{"content":"pragma solidity ^0.8.0;\n\nimport \"./Properties_ERR.sol\";\n\ncontract Properties is Properties_ERR {\n    // ==============================================================\n    // Global Properties (GLOB)\n    // ==============================================================\n\n    function invariant_GLOB_01() internal view returns (bool) {\n        return true;\n    }\n\n    // ==============================================================\n    // Invariant Properties (INV)\n    // ==============================================================\n\n    function invariant_INV_01() internal view returns (bool) {\n        return true;\n    }\n}\n"},"test/fuzzing/properties/PropertiesBase.sol":{"content":"pragma solidity ^0.8.0;\n\nimport \"@perimetersec/fuzzlib/src/FuzzBase.sol\";\nimport \"@perimetersec/fuzzlib/src/FuzzLibString.sol\";\nimport \"@perimetersec/fuzzlib/src/FuzzBase.sol\";\n\nimport \"./PropertiesDescriptions.sol\";\nimport \"../helpers/BeforeAfter.sol\";\nimport \"../utils/FuzzConstants.sol\";\n\nimport {stdMath} from \"forge-std/StdMath.sol\";\n\ncontract PropertiesBase is PropertiesDescriptions, BeforeAfter, FuzzConstants {\n    // ==============================================================\n    // Helpers\n    // ==============================================================\n\n    function assertApproxEq(uint256 a, uint256 b, uint256 maxDelta, string memory reason) internal {\n        uint256 dt;\n        if (a >= b) dt = a - b;\n        else dt = b - a;\n        if (dt > maxDelta) {\n            bytes memory aBytes = abi.encodePacked(a);\n            bytes memory bBytes = abi.encodePacked(b);\n            string memory aStr = FuzzLibString.toHexString(aBytes);\n            string memory bStr = FuzzLibString.toHexString(bBytes);\n            fl.log(\"Error: a =~ b not satisfied [uint]\");\n            fl.log(\"   Value a\", a);\n            fl.log(\"   Value b\", b);\n            fl.log(\" Max Delta\", maxDelta);\n            fl.log(\"     Delta\", dt);\n            fl.t(false, reason);\n        }\n    }\n\n    function assertApproxEq(int256 a, int256 b, int256 maxDelta, string memory reason) internal {\n        int256 dt;\n        if (a >= b) dt = a - b;\n        else dt = b - a;\n        if (dt > maxDelta) {\n            bytes memory aBytes = abi.encodePacked(a);\n            bytes memory bBytes = abi.encodePacked(b);\n            string memory aStr = FuzzLibString.toHexString(aBytes);\n            string memory bStr = FuzzLibString.toHexString(bBytes);\n            fl.log(\"Error: a =~ b not satisfied [uint]\");\n            fl.log(\"   Value a\", a);\n            fl.log(\"   Value b\", b);\n            fl.log(\" Max Delta\", maxDelta);\n            fl.log(\"     Delta\", dt);\n            fl.t(false, reason);\n        }\n    }\n\n    function greaterThanOrEqualWithToleranceWei(uint256 a, uint256 b, uint256 maxWeiDiff, string memory reason)\n        internal\n    {\n        if (a >= b) {\n            fl.t(true, \"Invariant ok, checked for: \");\n            fl.log(reason);\n            fl.log(\"a is greater than or equal to b\");\n            return;\n        }\n\n        uint256 diff = b - a;\n\n        if (diff > maxWeiDiff) {\n            fl.log(\"a: \", a);\n            fl.log(\"b: \", b);\n            fl.log(\"Difference in wei is bigger than expected\", diff);\n            fl.t(false, reason);\n        } else {\n            fl.t(true, \"Invariant ok, checked for: \");\n            fl.log(reason);\n            fl.log(\"Difference in wei: \", diff);\n        }\n    }\n\n    function isApproxEqRel(uint256 a, uint256 b, uint256 maxDelta, string memory reason) internal returns (bool) {\n        a < b ? b = a : a = b;\n        uint256 delta = stdMath.percentDelta(a, b);\n        fl.log(\"a: \", a);\n        fl.log(\"b: \", b);\n        fl.log(\"Difference % is bigger than expected\", delta);\n        if (delta > maxDelta) fl.t(false, reason);\n    }\n}\n"},"test/fuzzing/properties/PropertiesDescriptions.sol":{"content":"pragma solidity ^0.8.0;\n\ncontract PropertiesDescriptions {\n    // ==============================================================\n    // Global Properties (GLOB)\n    // These properties define invariants that must hold true across all market states and operations\n    // ==============================================================\n\n    string constant GLOB_01 = \"GLOB_01: Sample Global Invariant\";\n\n    // ==============================================================\n    // Invariant Properties (INV)\n    // These properties define invariants that must hold true as a sample\n    // ==============================================================\n\n    string constant INV_01 = \"INV_01: Sample Invariant\";\n\n    string constant ERR_01 = \"ERR_01: Unexpected Error\";\n}\n"},"test/fuzzing/properties/PropertiesReverts.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./PropertiesBase.sol\";\n\nabstract contract RevertHandler is PropertiesBase {\n    function invariant_ERR(bytes memory returnData) internal {\n        // Handle empty reverts\n        if (returnData.length == 0) {\n            if (CATCH_EMPTY_REVERTS) {\n                fl.t(false, \"Empty revert data not allowed\");\n            } else {\n                fl.t(true, \"Revert data is empty, allowed by config\");\n            }\n\n            return;\n        }\n\n        bytes4 returnedError;\n        assembly {\n            returnedError := mload(add(returnData, 0x20))\n        }\n\n        // Handle Panic errors\n        if (returnedError == bytes4(keccak256(\"Panic(uint256)\"))) {\n            _handlePanic(returnData);\n            return;\n        }\n\n        // Handle Error(string) errors\n        if (returnedError == bytes4(keccak256(\"Error(string)\"))) {\n            _handleError(returnData);\n            return;\n        }\n\n        // Handle custom protocol errors\n        _handleCustomError(returnData);\n    }\n\n    function _getAllowedPanicCodes() internal pure virtual returns (uint256[] memory) {\n        uint256[] memory panicCodes = new uint256[](3);\n        panicCodes[0] = PANIC_ENUM_OUT_OF_BOUNDS;\n        panicCodes[1] = PANIC_POP_EMPTY_ARRAY;\n        panicCodes[2] = PANIC_ARRAY_OUT_OF_BOUNDS;\n        return panicCodes;\n    }\n\n    function _getAllowedCustomErrors() internal pure virtual returns (bytes4[] memory) {\n        bytes4[] memory allowedErrors = new bytes4[](1);\n        // Uncomment to allow empty reverts:\n        // allowedErrors[0] = bytes4(abi.encode(\"\"));\n        return allowedErrors;\n    }\n\n    function _isAllowedERC20Error(bytes memory returnData) internal pure virtual returns (bool) {\n        bytes[] memory allowedErrors = new bytes[](9);\n        allowedErrors[0] = INSUFFICIENT_ALLOWANCE;\n        allowedErrors[1] = TRANSFER_FROM_ZERO;\n        allowedErrors[2] = TRANSFER_TO_ZERO;\n        allowedErrors[3] = APPROVE_TO_ZERO;\n        allowedErrors[4] = MINT_TO_ZERO;\n        allowedErrors[5] = BURN_FROM_ZERO;\n        allowedErrors[6] = DECREASED_ALLOWANCE;\n        allowedErrors[7] = BURN_EXCEEDS_BALANCE;\n        allowedErrors[8] = EXCEEDS_BALANCE_ERROR;\n\n        for (uint256 i = 0; i < allowedErrors.length; i++) {\n            if (keccak256(returnData) == keccak256(allowedErrors[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _handlePanic(bytes memory returnData) private {\n        uint256 panicCode = _extractPanicCode(returnData);\n        uint256[] memory allowedCodes = _getAllowedPanicCodes();\n        bool isAllowed = false;\n\n        for (uint256 i = 0; i < allowedCodes.length; i++) {\n            if (panicCode == allowedCodes[i]) {\n                isAllowed = true;\n                break;\n            }\n        }\n\n        fl.log(\"Panic code\", bytes32(panicCode));\n        if (!isAllowed) {\n            fl.t(false, \"Disallowed Panic code encountered!\");\n        }\n    }\n\n    function _handleError(bytes memory returnData) private {\n        string memory revertMsg = _extractRevertMessage(returnData);\n        fl.log(\"Error(string) revert returnData: \", revertMsg);\n\n        if (_isAllowedERC20Error(returnData)) {\n            fl.log(\"ERC20 error encountered\", revertMsg);\n            return;\n        }\n\n        if (CATCH_REQUIRE_REVERT) {\n            fl.t(false, revertMsg);\n        }\n    }\n\n    function _handleCustomError(bytes memory returnData) private {\n        bytes4 returnedError;\n        assembly {\n            returnedError := mload(add(returnData, 0x20))\n        }\n\n        fl.log(\"Custom protocol error returnData: \", _extractRevertMessage(returnData));\n        fl.errAllow(returnedError, _getAllowedCustomErrors(), ERR_01);\n    }\n\n    function _extractPanicCode(bytes memory revertData) private returns (uint256) {\n        fl.log(\"REVERT DATA LENGTH\", revertData.length);\n        if (revertData.length < 36) {\n            fl.t(false, \"Unexpected revert data length for panic code\");\n            return 0;\n        }\n\n        uint256 panicCode;\n        assembly {\n            panicCode := mload(add(revertData, 36))\n        }\n        return panicCode;\n    }\n\n    function _extractRevertMessage(bytes memory _returnData) private returns (string memory) {\n        if (_returnData.length < 68) {\n            fl.log(\"Raw revert data (hex)\", _returnData);\n            fl.t(false, \"Returned data is not a valid revert message\");\n            return \"Invalid revert data length\";\n        }\n\n        assembly {\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string));\n    }\n}\n"},"test/fuzzing/properties/Properties_ERR.sol":{"content":"//SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./PropertiesReverts.sol\";\n\nabstract contract Properties_ERR is RevertHandler {\n    /*\n    *\n    * FUZZ NOTE: CHECK REVERTS CONFIGURATION IN FUZZ STORAGE VARIABLES\n    *\n    */\n\n    function _getAllowedPanicCodes() internal pure virtual override returns (uint256[] memory) {\n        uint256[] memory panicCodes = new uint256[](4);\n        panicCodes[0] = PANIC_ENUM_OUT_OF_BOUNDS;\n        panicCodes[1] = PANIC_POP_EMPTY_ARRAY;\n        panicCodes[2] = PANIC_ARRAY_OUT_OF_BOUNDS;\n        panicCodes[3] = PANIC_ARITHMETIC;\n\n        // Add additional codes\n        return panicCodes;\n    }\n\n    function _getAllowedCustomErrors() internal pure virtual override returns (bytes4[] memory) {\n        bytes4[] memory allowedErrors = new bytes4[](1);\n        // allowedErrors[0] = bytes4(abi.encode(\"\"));\n        return allowedErrors;\n    }\n\n    function _isAllowedERC20Error(bytes memory returnData) internal pure virtual override returns (bool) {\n        bytes[] memory allowedErrors = new bytes[](9);\n        allowedErrors[0] = INSUFFICIENT_ALLOWANCE;\n        allowedErrors[1] = TRANSFER_FROM_ZERO;\n        allowedErrors[2] = TRANSFER_TO_ZERO;\n        allowedErrors[3] = APPROVE_TO_ZERO;\n        allowedErrors[4] = MINT_TO_ZERO;\n        allowedErrors[5] = BURN_FROM_ZERO;\n        allowedErrors[6] = DECREASED_ALLOWANCE;\n        allowedErrors[7] = BURN_EXCEEDS_BALANCE;\n        allowedErrors[8] = EXCEEDS_BALANCE_ERROR;\n\n        for (uint256 i = 0; i < allowedErrors.length; i++) {\n            if (keccak256(returnData) == keccak256(allowedErrors[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"},"test/fuzzing/utils/FunctionCalls.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@perimetersec/fuzzlib/src/FuzzBase.sol\";\nimport \"../helpers/FuzzStorageVariables.sol\";\n\ncontract FunctionCalls is FuzzBase, FuzzStorageVariables {\n    event SampleFunctionCall(uint256 sampleInput);\n\n    function _sampleFunctionCall(uint256 sampleInput) internal returns (bool success, bytes memory returnData) {\n        emit SampleFunctionCall(sampleInput);\n\n        vm.prank(currentActor);\n        (success, returnData) =\n            address(sampleContract).call(abi.encodeWithSelector(SampleContract.sampleFunction.selector, sampleInput));\n    }\n\n    function _sampleFailWithRequireCall(bool sampleInput) internal returns (bool success, bytes memory returnData) {\n        vm.prank(currentActor);\n        (success, returnData) = address(sampleContract).call(\n            abi.encodeWithSelector(SampleContract.sampleFailWithRequire.selector, sampleInput)\n        );\n    }\n\n    function _sampleFailWithCustomErrorCall(uint8 sampleInput)\n        internal\n        returns (bool success, bytes memory returnData)\n    {\n        vm.prank(currentActor);\n        (success, returnData) = address(sampleContract).call(\n            abi.encodeWithSelector(SampleContract.sampleFailWithCustomError.selector, sampleInput)\n        );\n    }\n\n    function _sampleFailWithPanicCall(uint256 sampleInput) internal returns (bool success, bytes memory returnData) {\n        vm.prank(currentActor);\n        (success, returnData) = address(sampleContract).call(\n            abi.encodeWithSelector(SampleContract.sampleFailWithPanic.selector, sampleInput)\n        );\n    }\n\n    function _sampleFailWithAssertCall(uint256 sampleInput) internal returns (bool success, bytes memory returnData) {\n        vm.prank(currentActor);\n        (success, returnData) = address(sampleContract).call(\n            abi.encodeWithSelector(SampleContract.sampleFailWithAssert.selector, sampleInput)\n        );\n    }\n\n    function _sampleFailReturnEmptyDataCall(bool sampleInput)\n        internal\n        returns (bool success, bytes memory returnData)\n    {\n        vm.prank(currentActor);\n        (success, returnData) = address(sampleContract).call(\n            abi.encodeWithSelector(SampleContract.sampleFailReturnEmptyData.selector, sampleInput)\n        );\n    }\n}\n"},"test/fuzzing/utils/FuzzActors.sol":{"content":"// SPDX-License-Identifier: UNTITLED\npragma solidity ^0.8.0;\n\nimport \"@perimetersec/fuzzlib/src/FuzzBase.sol\";\nimport \"forge-std/Test.sol\";\n\ncontract FuzzActors is FuzzBase, Test {\n    address internal constant owner = address(0xfffff);\n\n    address internal constant USER1 = address(0x10000);\n    address internal constant USER2 = address(0x20000);\n    address internal constant USER3 = address(0x30000);\n\n    address[] internal USERS = [USER1, USER2, USER3];\n}\n"},"test/fuzzing/utils/FuzzConstants.sol":{"content":"pragma solidity ^0.8.0;\n\ncontract FuzzConstants {\n    // ==============================================================\n    // ERC20 v4.9 ERRORS\n    // ==============================================================\n    bytes internal constant EXCEEDS_BALANCE_ERROR =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: transfer amount exceeds balance\");\n    bytes internal constant INSUFFICIENT_ALLOWANCE =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: insufficient allowance\");\n    bytes internal constant TRANSFER_FROM_ZERO =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: transfer from the zero address\");\n    bytes internal constant TRANSFER_TO_ZERO =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: transfer to the zero address\");\n    bytes internal constant APPROVE_TO_ZERO =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: approve to the zero address\");\n    bytes internal constant MINT_TO_ZERO =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: mint to the zero address\");\n    bytes internal constant BURN_FROM_ZERO =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: burn from the zero address\");\n    bytes internal constant DECREASED_ALLOWANCE =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: decreased allowance below zero\");\n    bytes internal constant BURN_EXCEEDS_BALANCE =\n        abi.encodeWithSelector(bytes4(keccak256(\"Error(string)\")), \"ERC20: burn amount exceeds balance\");\n\n    // ==============================================================\n    // PANIC CODES\n    // ==============================================================\n    uint256 internal constant PANIC_GENERAL = 0x00;\n    uint256 internal constant PANIC_ASSERT = 0x01;\n    uint256 internal constant PANIC_ARITHMETIC = 0x11;\n    uint256 internal constant PANIC_DIVISION_BY_ZERO = 0x12;\n    uint256 internal constant PANIC_ENUM_OUT_OF_BOUNDS = 0x21;\n    uint256 internal constant PANIC_STORAGE_BYTES_ARRAY_ENCODING = 0x22;\n    uint256 internal constant PANIC_POP_EMPTY_ARRAY = 0x31;\n    uint256 internal constant PANIC_ARRAY_OUT_OF_BOUNDS = 0x32;\n    uint256 internal constant PANIC_ALLOC_TOO_MUCH_MEMORY = 0x41;\n    uint256 internal constant PANIC_ZERO_INIT_INTERNAL_FUNCTION = 0x51;\n}\n"}},"settings":{"remappings":["ds-test/=lib/ds-test/src/","forge-std/=lib/forge-std/src/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","@uniswap/v3-core/contracts/=lib/v3-core/contracts/","@uniswap/permit2/=lib/permit2/src/","@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/","@ERC721A/=lib/ERC721A/contracts/","@perimetersec/=lib/","ERC721A/=lib/ERC721A/contracts/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","fuzzlib/=lib/fuzzlib/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","permit2/=lib/permit2/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","solmate/=lib/permit2/lib/solmate/","swap-router-contracts/=lib/swap-router-contracts/contracts/","v3-core/=lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"lib/forge-std/src/Base.sol":{"*":[]},"lib/forge-std/src/StdAssertions.sol":{"*":[]},"lib/forge-std/src/StdChains.sol":{"*":[]},"lib/forge-std/src/StdCheats.sol":{"*":[]},"lib/forge-std/src/StdError.sol":{"*":[]},"lib/forge-std/src/StdInvariant.sol":{"*":[]},"lib/forge-std/src/StdJson.sol":{"*":[]},"lib/forge-std/src/StdMath.sol":{"*":[]},"lib/forge-std/src/StdStorage.sol":{"*":[]},"lib/forge-std/src/StdStyle.sol":{"*":[]},"lib/forge-std/src/StdToml.sol":{"*":[]},"lib/forge-std/src/StdUtils.sol":{"*":[]},"lib/forge-std/src/Test.sol":{"*":[]},"lib/forge-std/src/Vm.sol":{"*":[]},"lib/forge-std/src/console.sol":{"*":[]},"lib/forge-std/src/console2.sol":{"*":[]},"lib/forge-std/src/interfaces/IERC165.sol":{"*":[]},"lib/forge-std/src/interfaces/IERC20.sol":{"*":[]},"lib/forge-std/src/interfaces/IERC721.sol":{"*":[]},"lib/forge-std/src/interfaces/IMulticall3.sol":{"*":[]},"lib/forge-std/src/mocks/MockERC20.sol":{"*":[]},"lib/forge-std/src/mocks/MockERC721.sol":{"*":[]},"lib/forge-std/src/safeconsole.sol":{"*":[]},"lib/fuzzlib/src/FuzzBase.sol":{"*":[]},"lib/fuzzlib/src/FuzzLibString.sol":{"*":[]},"lib/fuzzlib/src/Fuzzlib.sol":{"*":[]},"lib/fuzzlib/src/helpers/HelperAssert.sol":{"*":[]},"lib/fuzzlib/src/helpers/HelperBase.sol":{"*":[]},"lib/fuzzlib/src/helpers/HelperClamp.sol":{"*":[]},"lib/fuzzlib/src/helpers/HelperLog.sol":{"*":[]},"lib/fuzzlib/src/helpers/HelperMath.sol":{"*":[]},"lib/fuzzlib/src/helpers/HelperRandom.sol":{"*":[]},"lib/fuzzlib/src/libraries/LibLog.sol":{"*":[]},"lib/fuzzlib/src/platform/IPlatform.sol":{"*":[]},"lib/fuzzlib/src/platform/PlatformCrytic.sol":{"*":[]},"test/fuzzing/FoundryPlayground.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/FuzzGuided.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/FuzzSampleContract.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/FuzzSetup.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/SampleContract.sol":{"*":[]},"test/fuzzing/helpers/BeforeAfter.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/helpers/FuzzStorageVariables.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/helpers/postconditions/PostconditionsBase.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/helpers/preconditions/PreconditionsBase.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/properties/Properties.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/properties/PropertiesBase.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/properties/PropertiesDescriptions.sol":{"*":[]},"test/fuzzing/properties/PropertiesReverts.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/properties/Properties_ERR.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/utils/FunctionCalls.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]},"test/fuzzing/utils/FuzzActors.sol":{"*":[]},"test/fuzzing/utils/FuzzConstants.sol":{"":["ast"],"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata","storageLayout"]}},"evmVersion":"cancun","viaIR":false,"libraries":{}},"allowPaths":["/Users/vladimirdzotov/Dropbox/do/GA/FuzzTemplates/EchidnaFuzzing","/Users/vladimirdzotov/Dropbox/do/GA/FuzzTemplates/EchidnaFuzzing/lib"],"basePath":"/Users/vladimirdzotov/Dropbox/do/GA/FuzzTemplates/EchidnaFuzzing","includePaths":["/Users/vladimirdzotov/Dropbox/do/GA/FuzzTemplates/EchidnaFuzzing"]},"output":{"errors":[{"sourceLocation":{"file":"test/fuzzing/helpers/BeforeAfter.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/fuzzing/helpers/BeforeAfter.sol\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/fuzzing/helpers/postconditions/PostconditionsBase.sol\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/Properties.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/fuzzing/properties/Properties.sol\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/PropertiesBase.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/fuzzing/properties/PropertiesBase.sol\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/PropertiesDescriptions.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/fuzzing/properties/PropertiesDescriptions.sol\n\n"},{"sourceLocation":{"file":"test/fuzzing/utils/FuzzConstants.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/fuzzing/utils/FuzzConstants.sol\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/PropertiesBase.sol","start":2833,"end":2837},"type":"Warning","component":"general","severity":"warning","errorCode":"6321","message":"Unnamed return variable can remain unassigned when the function is called when \"FoundryPlayground\" is the most derived contract. Add an explicit return with value to all non-reverting code paths or name the variable.","formattedMessage":"Warning: Unnamed return variable can remain unassigned when the function is called when \"FoundryPlayground\" is the most derived contract. Add an explicit return with value to all non-reverting code paths or name the variable.\n  --> test/fuzzing/properties/PropertiesBase.sol:78:108:\n   |\n78 |     function isApproxEqRel(uint256 a, uint256 b, uint256 maxDelta, string memory reason) internal returns (bool) {\n   |                                                                                                            ^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/PropertiesBase.sol","start":905,"end":923},"type":"Warning","component":"general","severity":"warning","errorCode":"2072","message":"Unused local variable.","formattedMessage":"Warning: Unused local variable.\n  --> test/fuzzing/properties/PropertiesBase.sol:25:13:\n   |\n25 |             string memory aStr = FuzzLibString.toHexString(aBytes);\n   |             ^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/PropertiesBase.sol","start":973,"end":991},"type":"Warning","component":"general","severity":"warning","errorCode":"2072","message":"Unused local variable.","formattedMessage":"Warning: Unused local variable.\n  --> test/fuzzing/properties/PropertiesBase.sol:26:13:\n   |\n26 |             string memory bStr = FuzzLibString.toHexString(bBytes);\n   |             ^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/PropertiesBase.sol","start":1618,"end":1636},"type":"Warning","component":"general","severity":"warning","errorCode":"2072","message":"Unused local variable.","formattedMessage":"Warning: Unused local variable.\n  --> test/fuzzing/properties/PropertiesBase.sol:43:13:\n   |\n43 |             string memory aStr = FuzzLibString.toHexString(aBytes);\n   |             ^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/PropertiesBase.sol","start":1686,"end":1704},"type":"Warning","component":"general","severity":"warning","errorCode":"2072","message":"Unused local variable.","formattedMessage":"Warning: Unused local variable.\n  --> test/fuzzing/properties/PropertiesBase.sol:44:13:\n   |\n44 |             string memory bStr = FuzzLibString.toHexString(bBytes);\n   |             ^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol","start":153,"end":176},"type":"Warning","component":"general","severity":"warning","errorCode":"5667","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n --> test/fuzzing/helpers/postconditions/PostconditionsBase.sol:6:41:\n  |\n6 |     function onSuccessInvariantsGeneral(bytes memory returnData) internal {\n  |                                         ^^^^^^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","start":608,"end":639},"type":"Warning","component":"general","severity":"warning","errorCode":"5667","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:21:89:\n   |\n21 |     function sampleFailWithRequirePostconditions(bool success, bytes memory returnData, address[] memory actorsToUpdate)\n   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","start":939,"end":970},"type":"Warning","component":"general","severity":"warning","errorCode":"5667","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:34:9:\n   |\n34 |         address[] memory actorsToUpdate\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","start":1232,"end":1263},"type":"Warning","component":"general","severity":"warning","errorCode":"5667","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:43:87:\n   |\n43 |     function sampleFailWithPanicPostconditions(bool success, bytes memory returnData, address[] memory actorsToUpdate)\n   |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","start":1533,"end":1564},"type":"Warning","component":"general","severity":"warning","errorCode":"5667","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:53:88:\n   |\n53 |     function sampleFailWithAssertPostconditions(bool success, bytes memory returnData, address[] memory actorsToUpdate)\n   |                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","start":1864,"end":1895},"type":"Warning","component":"general","severity":"warning","errorCode":"5667","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:66:9:\n   |\n66 |         address[] memory actorsToUpdate\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"},{"sourceLocation":{"file":"test/fuzzing/SampleContract.sol","start":127,"end":225},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n --> test/fuzzing/SampleContract.sol:7:5:\n  |\n7 |     function sampleFunction(uint256 sampleInput) public {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/SampleContract.sol","start":231,"end":330},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/SampleContract.sol:11:5:\n   |\n11 |     function sampleFailWithRequire() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/SampleContract.sol","start":336,"end":448},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/SampleContract.sol:15:5:\n   |\n15 |     function sampleFailWithCustomError() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/SampleContract.sol","start":454,"end":556},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/SampleContract.sol:19:5:\n   |\n19 |     function sampleFailWithPanic() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/SampleContract.sol","start":562,"end":631},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/SampleContract.sol:24:5:\n   |\n24 |     function sampleFailWithAssert() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/SampleContract.sol","start":637,"end":778},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/SampleContract.sol:28:5:\n   |\n28 |     function sampleFailReturnEmptyData() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol","start":340,"end":531},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:11:5:\n   |\n11 |     function sampleFailWithRequirePreconditions(bool sampleInput)\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol","start":537,"end":733},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:18:5:\n   |\n18 |     function sampleFailWithCustomErrorPreconditions(uint8 sampleNum)\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol","start":951,"end":1143},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:32:5:\n   |\n32 |     function sampleFailWithAssertPreconditions(uint256 sampleInput)\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol","start":1149,"end":1348},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:39:5:\n   |\n39 |     function sampleFailReturnEmptyDataPreconditions(bool sampleInput)\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/Properties.sol","start":274,"end":360},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/properties/Properties.sol:10:5:\n   |\n10 |     function invariant_GLOB_01() internal view returns (bool) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/properties/Properties.sol","start":541,"end":626},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to pure","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> test/fuzzing/properties/Properties.sol:18:5:\n   |\n18 |     function invariant_INV_01() internal view returns (bool) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol","start":117,"end":223},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to view","formattedMessage":"Warning: Function state mutability can be restricted to view\n --> test/fuzzing/helpers/postconditions/PostconditionsBase.sol:6:5:\n  |\n6 |     function onSuccessInvariantsGeneral(bytes memory returnData) internal {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/FuzzSampleContract.sol","start":192,"end":3327},"type":"Warning","component":"general","severity":"warning","errorCode":"5574","message":"Contract code size is 26856 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract code size is 26856 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n --> test/fuzzing/FuzzSampleContract.sol:7:1:\n  |\n7 | contract FuzzSampleContract is PreconditionsSampleContract, PostconditionsSampleContract {\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/FuzzSampleContract.sol","start":192,"end":3327},"type":"Warning","component":"general","severity":"warning","errorCode":"3860","message":"Contract initcode size is 51311 bytes and exceeds 49152 bytes (a limit introduced in Shanghai). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract initcode size is 51311 bytes and exceeds 49152 bytes (a limit introduced in Shanghai). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n --> test/fuzzing/FuzzSampleContract.sol:7:1:\n  |\n7 | contract FuzzSampleContract is PreconditionsSampleContract, PostconditionsSampleContract {\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/FuzzGuided.sol","start":98,"end":351},"type":"Warning","component":"general","severity":"warning","errorCode":"5574","message":"Contract code size is 27731 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract code size is 27731 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n --> test/fuzzing/FuzzGuided.sol:6:1:\n  |\n6 | contract FuzzGuided is FuzzSampleContract {\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/FuzzGuided.sol","start":98,"end":351},"type":"Warning","component":"general","severity":"warning","errorCode":"3860","message":"Contract initcode size is 52186 bytes and exceeds 49152 bytes (a limit introduced in Shanghai). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract initcode size is 52186 bytes and exceeds 49152 bytes (a limit introduced in Shanghai). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n --> test/fuzzing/FuzzGuided.sol:6:1:\n  |\n6 | contract FuzzGuided is FuzzSampleContract {\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/FoundryPlayground.sol","start":85,"end":1057},"type":"Warning","component":"general","severity":"warning","errorCode":"5574","message":"Contract code size is 30464 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract code size is 30464 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n --> test/fuzzing/FoundryPlayground.sol:6:1:\n  |\n6 | contract FoundryPlayground is FuzzGuided {\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n"},{"sourceLocation":{"file":"test/fuzzing/FoundryPlayground.sol","start":85,"end":1057},"type":"Warning","component":"general","severity":"warning","errorCode":"3860","message":"Contract initcode size is 54919 bytes and exceeds 49152 bytes (a limit introduced in Shanghai). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.","formattedMessage":"Warning: Contract initcode size is 54919 bytes and exceeds 49152 bytes (a limit introduced in Shanghai). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n --> test/fuzzing/FoundryPlayground.sol:6:1:\n  |\n6 | contract FoundryPlayground is FuzzGuided {\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n"}],"contracts":{"test/fuzzing/FoundryPlayground.sol":{"FoundryPlayground":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"fuzz_guided_sampleFunctionCallTwice","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"},{"name":"sampleInput2","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailReturnEmptyData","inputs":[{"name":"sampleInput","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithAssert","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithCustomError","inputs":[{"name":"sampleNum","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithPanic","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithRequire","inputs":[{"name":"sampleInput","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFunction","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setUp","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"test_coverage_SampleFunction","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"test_repro_ERR_01_01","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"test_repro_ERR_01_02","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"test_repro_ERR_01_03","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"test_repro_ERR_01_04","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"test_repro_ERR_01_05","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"test_repro_INV_01","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"LogAddress","inputs":[{"name":"actor","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sampleInput2\",\"type\":\"uint256\"}],\"name\":\"fuzz_guided_sampleFunctionCallTwice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sampleInput\",\"type\":\"bool\"}],\"name\":\"fuzz_sampleFailReturnEmptyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFailWithAssert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sampleNum\",\"type\":\"uint8\"}],\"name\":\"fuzz_sampleFailWithCustomError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFailWithPanic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sampleInput\",\"type\":\"bool\"}],\"name\":\"fuzz_sampleFailWithRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_coverage_SampleFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_repro_ERR_01_01\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_repro_ERR_01_02\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_repro_ERR_01_03\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_repro_ERR_01_04\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_repro_ERR_01_05\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_repro_INV_01\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/FoundryPlayground.sol\":\"FoundryPlayground\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FoundryPlayground.sol\":{\"keccak256\":\"0x95b63bf5ff58ee3e50e4f087dc3527a5e6952ae8933f11f5530128995da6ec74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://642bd9d0bf49fbeaf16e6e5e4a30656f1173fe8f336955adb28308320888cbc3\",\"dweb:/ipfs/QmXgd6ZVuXzPaYYsHTMEjtq3ki3uZcZ2fLJuxVFeBSPWcd\"]},\"test/fuzzing/FuzzGuided.sol\":{\"keccak256\":\"0x310d52cb020b85793805ba116e390d971cfa6525192109e18e2b976b0e5e4455\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://998f38f12e5fa3db902192f8e1b887d3295ddd15df6b59c2c279d8240afea0dc\",\"dweb:/ipfs/Qmes44NmhDCrH8KYQ8o1ZUom5Ak61YqKVivMEpk7xkUhJw\"]},\"test/fuzzing/FuzzSampleContract.sol\":{\"keccak256\":\"0x0a9ab520029e8fd54a88eb1d168dbdbc7521ce59b5ddfb0fd8c3fd4659688037\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0668ec628afd58fe3a2ddd14e051e3b9f358763dee70820ad5c352be1c995ecd\",\"dweb:/ipfs/QmaeCJ339gt337isPt5MNpSdfSVJDhT2qThGnZjGUZW6QQ\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/helpers/postconditions/PostconditionsBase.sol\":{\"keccak256\":\"0x7620b7f61fcb7e3607679cd40ab9b9fe08ba0753144c3fa16a979f30c7b697bd\",\"urls\":[\"bzz-raw://ac6bc39ae3e07aa7faf390ff8418d680c92b1abe9be3bc459c91fcac243e8b7f\",\"dweb:/ipfs/QmPEnrqNCfrnjrBYZj6S54kBqsVfWx3veSJbXkhqfY8Hjr\"]},\"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol\":{\"keccak256\":\"0xe0b6dfd287772112457c1815e260b672fa4a44eddc8e941bd7e7b7f442cc3f12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://176b618cd965a52efd124215b6d7181e3d852506a34ccf65c80eca366ea5cb52\",\"dweb:/ipfs/QmdyLkLSdU4Kq535JMRxXhcezqn5teK7tb57dGKymmRhKr\"]},\"test/fuzzing/helpers/preconditions/PreconditionsBase.sol\":{\"keccak256\":\"0x97170e06bf494e439c413c6208c5a43f7eadc3d1d6df9a9fe46090057a0e9cae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dc268531095ff7bd00c314e91e78e9b3448008e994c6d84d64d5593355eef4\",\"dweb:/ipfs/QmWmn3tjw7n6qzE6eUgrZ5hZJyVAHMR5dPZsHhnf6jYCh8\"]},\"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol\":{\"keccak256\":\"0x82df89f1b0ff934319ada37fe548c8c94afa1ad0dce56ba1903bd3772e19a456\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dadbd2920843037f75e7d6db220fbacd5c10e8781ef67723b2c1e96b89ac6466\",\"dweb:/ipfs/QmZC7dutMBKeSrqa9Z6DhXpWdamzvUBpWomiheibKV12yQ\"]},\"test/fuzzing/properties/Properties.sol\":{\"keccak256\":\"0xf9182045d5b5f54b24b43a79510b0683415d922ac2b2a6e00321e4084dcff499\",\"urls\":[\"bzz-raw://7e90e9737ec7f84afad701476f596fa5a1d5d0b4120ad3124ae865e8cd4698dd\",\"dweb:/ipfs/QmVNFwyrXGk8VkPScstJo6ZSGuVAY7DLv7aDzCK1jyxJoe\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/properties/Properties_ERR.sol\":{\"keccak256\":\"0x1a72ed86c160f1003cf577e117b9da09614d3ab3519e1aad621a1a35433fb488\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1028b0388ba604c47cb93b24ac5e5a9e569d623ea0e9824fc7ed0ac1f72cf2a0\",\"dweb:/ipfs/QmRwu894BMcJ4C7GQ7M5oMAcqyCRjKnuQZJHn89efn51yc\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/FoundryPlayground.sol:FoundryPlayground","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"85:972:35:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;85:972:35;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;85:972:35;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;85:972:35:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106101a7575f3560e01c806385226c81116100f7578063ba414fa611610095578063e20c9f711161006f578063e20c9f71146103d7578063eb970f49146103f5578063f32edd76146103ff578063fa7626d414610409576101a7565b8063ba414fa614610393578063d469e84e146103b1578063d59e1d2c146103bb576101a7565b8063ad36ac56116100d1578063ad36ac5614610343578063aed1d4cd1461034d578063b0464fdc14610357578063b5508aa914610375576101a7565b806385226c81146102eb578063916a17c614610309578063a99867d014610327576101a7565b80633e5e3c231161016457806357cee9aa1161013e57806357cee9aa1461027957806361583d901461029557806366d9a9a0146102b15780637a24d15d146102cf576101a7565b80633e5e3c23146102215780633f7286f41461023f57806341128bc81461025d576101a7565b80630a9254e4146101ab5780630e96a923146101b55780631ed7831c146101bf578063207b395c146101dd5780632734aab6146101e75780632ade388014610203575b5f80fd5b6101b3610427565b005b6101bd6104bd565b005b6101c76104c9565b6040516101d49190615369565b60405180910390f35b6101e5610554565b005b61020160048036038101906101fc91906153cd565b610560565b005b61020b610945565b6040516102189190615618565b60405180910390f35b610229610ac9565b6040516102369190615369565b60405180910390f35b610247610b54565b6040516102549190615369565b60405180910390f35b6102776004803603810190610272919061566d565b610bdf565b005b610293600480360381019061028e919061566d565b610fc4565b005b6102af60048036038101906102aa91906153cd565b6113a9565b005b6102b961178e565b6040516102c69190615876565b60405180910390f35b6102e960048036038101906102e49190615896565b611910565b005b6102f3611c16565b6040516103009190615957565b60405180910390f35b610311611cea565b60405161031e9190615a6c565b60405180910390f35b610341600480360381019061033c91906153cd565b611e31565b005b61034b612216565b005b610355612222565b005b61035f61222e565b60405161036c9190615a6c565b60405180910390f35b61037d612375565b60405161038a9190615957565b60405180910390f35b61039b612449565b6040516103a89190615a9b565b60405180910390f35b6103b961255d565b005b6103d560048036038101906103d09190615aea565b612569565b005b6103df61294e565b6040516103ec9190615369565b60405180910390f35b6103fd6129d9565b005b6104076129e5565b005b6104116129fb565b60405161041e9190615a9b565b60405180910390f35b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf02635ae263486040518263ffffffff1660e01b81526004016104869190615b57565b5f604051808303815f87803b15801561049d575f80fd5b505af11580156104af573d5f803e3d5ffd5b505050506104bb612a0d565b565b6104c76001610fc4565b565b6060601780548060200260200160405190810160405280929190818152602001828054801561054a57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610501575b5050505050905090565b61055e6001610bdf565b565b602260149054906101000a900460ff16156107f8575f6105836023546016612a1f565b90506105c66040518060400160405280600e81526020017f66757a7a20697465726174696f6e000000000000000000000000000000000000815250602354612a6b565b602180805490506016637fffffff6023546105e19190615b9d565b6105eb9190615bde565b6040516020016105fb9190615c31565b604051602081830303815290604052805190602001205f1c61061d9190615c78565b8154811061062e5761062d615ca8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660225f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160235f8282546106a79190615bde565b925050819055506107166040518060400160405280600a81526020017f5072616e6b696e673a200000000000000000000000000000000000000000000081525061071160225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b07565b612cbd565b6107556040518060400160405280601181526020017f426c6f636b2074696d657374616d703a2000000000000000000000000000000081525042612a6b565b6024544210156107ee577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf026024546040518263ffffffff1660e01b81526004016107bc9190615ce4565b5f604051808303815f87803b1580156107d3575f80fd5b505af11580156107e5573d5f803e3d5ffd5b505050506107f6565b426024819055505b505b7fb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a28460225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516108489190615d0c565b60405180910390a15f61085a82612d59565b90505f600167ffffffffffffffff81111561087857610877615d25565b5b6040519080825280602002602001820160405280156108a65781602001602082028036833780820191505090505b50905060225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f815181106108de576108dd615ca8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061092181612d6f565b5f8061092f845f0151612d7c565b9150915061093e828285612f2f565b5050505050565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610ac0578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b82821015610aa9578382905f5260205f20018054610a1e90615d7f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4a90615d7f565b8015610a955780601f10610a6c57610100808354040283529160200191610a95565b820191905f5260205f20905b815481529060010190602001808311610a7857829003601f168201915b505050505081526020019060010190610a01565b505050508152505081526020019060010190610968565b50505050905090565b60606019805480602002602001604051908101604052809291908181526020018280548015610b4a57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b01575b5050505050905090565b60606018805480602002602001604051908101604052809291908181526020018280548015610bd557602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b8c575b5050505050905090565b602260149054906101000a900460ff1615610e77575f610c026023546016612a1f565b9050610c456040518060400160405280600e81526020017f66757a7a20697465726174696f6e000000000000000000000000000000000000815250602354612a6b565b602180805490506016637fffffff602354610c609190615b9d565b610c6a9190615bde565b604051602001610c7a9190615c31565b604051602081830303815290604052805190602001205f1c610c9c9190615c78565b81548110610cad57610cac615ca8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660225f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160235f828254610d269190615bde565b92505081905550610d956040518060400160405280600a81526020017f5072616e6b696e673a2000000000000000000000000000000000000000000000815250610d9060225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b07565b612cbd565b610dd46040518060400160405280601181526020017f426c6f636b2074696d657374616d703a2000000000000000000000000000000081525042612a6b565b602454421015610e6d577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf026024546040518263ffffffff1660e01b8152600401610e3b9190615ce4565b5f604051808303815f87803b158015610e52575f80fd5b505af1158015610e64573d5f803e3d5ffd5b50505050610e75565b426024819055505b505b7fb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a28460225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610ec79190615d0c565b60405180910390a15f610ed982612f52565b90505f600167ffffffffffffffff811115610ef757610ef6615d25565b5b604051908082528060200260200182016040528015610f255781602001602082028036833780820191505090505b50905060225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f81518110610f5d57610f5c615ca8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610fa081612d6f565b5f80610fae845f0151612f6e565b91509150610fbd828285613121565b5050505050565b602260149054906101000a900460ff161561125c575f610fe76023546016612a1f565b905061102a6040518060400160405280600e81526020017f66757a7a20697465726174696f6e000000000000000000000000000000000000815250602354612a6b565b602180805490506016637fffffff6023546110459190615b9d565b61104f9190615bde565b60405160200161105f9190615c31565b604051602081830303815290604052805190602001205f1c6110819190615c78565b8154811061109257611091615ca8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660225f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160235f82825461110b9190615bde565b9250508190555061117a6040518060400160405280600a81526020017f5072616e6b696e673a200000000000000000000000000000000000000000000081525061117560225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b07565b612cbd565b6111b96040518060400160405280601181526020017f426c6f636b2074696d657374616d703a2000000000000000000000000000000081525042612a6b565b602454421015611252577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf026024546040518263ffffffff1660e01b81526004016112209190615ce4565b5f604051808303815f87803b158015611237575f80fd5b505af1158015611249573d5f803e3d5ffd5b5050505061125a565b426024819055505b505b7fb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a28460225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516112ac9190615d0c565b60405180910390a15f6112be82613144565b90505f600167ffffffffffffffff8111156112dc576112db615d25565b5b60405190808252806020026020018201604052801561130a5781602001602082028036833780820191505090505b50905060225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f8151811061134257611341615ca8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061138581612d6f565b5f80611393845f0151613160565b915091506113a2828285613313565b5050505050565b602260149054906101000a900460ff1615611641575f6113cc6023546016612a1f565b905061140f6040518060400160405280600e81526020017f66757a7a20697465726174696f6e000000000000000000000000000000000000815250602354612a6b565b602180805490506016637fffffff60235461142a9190615b9d565b6114349190615bde565b6040516020016114449190615c31565b604051602081830303815290604052805190602001205f1c6114669190615c78565b8154811061147757611476615ca8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660225f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160235f8282546114f09190615bde565b9250508190555061155f6040518060400160405280600a81526020017f5072616e6b696e673a200000000000000000000000000000000000000000000081525061155a60225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b07565b612cbd565b61159e6040518060400160405280601181526020017f426c6f636b2074696d657374616d703a2000000000000000000000000000000081525042612a6b565b602454421015611637577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf026024546040518263ffffffff1660e01b81526004016116059190615ce4565b5f604051808303815f87803b15801561161c575f80fd5b505af115801561162e573d5f803e3d5ffd5b5050505061163f565b426024819055505b505b7fb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a28460225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516116919190615d0c565b60405180910390a15f6116a382613336565b90505f600167ffffffffffffffff8111156116c1576116c0615d25565b5b6040519080825280602002602001820160405280156116ef5781602001602082028036833780820191505090505b50905060225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f8151811061172757611726615ca8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061176a81612d6f565b5f80611778845f01516133e8565b9150915061178782828561359b565b5050505050565b6060601c805480602002602001604051908101604052809291908181526020015f905b82821015611907578382905f5260205f2090600202016040518060400160405290815f820180546117e190615d7f565b80601f016020809104026020016040519081016040528092919081815260200182805461180d90615d7f565b80156118585780601f1061182f57610100808354040283529160200191611858565b820191905f5260205f20905b81548152906001019060200180831161183b57829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156118ef57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161189c5790505b505050505081525050815260200190600101906117b1565b50505050905090565b602260149054906101000a900460ff1615611ba8575f6119336023546016612a1f565b90506119766040518060400160405280600e81526020017f66757a7a20697465726174696f6e000000000000000000000000000000000000815250602354612a6b565b602180805490506016637fffffff6023546119919190615b9d565b61199b9190615bde565b6040516020016119ab9190615c31565b604051602081830303815290604052805190602001205f1c6119cd9190615c78565b815481106119de576119dd615ca8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660225f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160235f828254611a579190615bde565b92505081905550611ac66040518060400160405280600a81526020017f5072616e6b696e673a2000000000000000000000000000000000000000000000815250611ac160225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b07565b612cbd565b611b056040518060400160405280601181526020017f426c6f636b2074696d657374616d703a2000000000000000000000000000000081525042612a6b565b602454421015611b9e577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf026024546040518263ffffffff1660e01b8152600401611b6c9190615ce4565b5f604051808303815f87803b158015611b83575f80fd5b505af1158015611b95573d5f803e3d5ffd5b50505050611ba6565b426024819055505b505b7fb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a28460225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611bf89190615d0c565b60405180910390a1611c0982611e31565b611c1281611e31565b5050565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015611ce1578382905f5260205f20018054611c5690615d7f565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8290615d7f565b8015611ccd5780601f10611ca457610100808354040283529160200191611ccd565b820191905f5260205f20905b815481529060010190602001808311611cb057829003601f168201915b505050505081526020019060010190611c39565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b82821015611e28578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015611e1057602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411611dbd5790505b50505050508152505081526020019060010190611d0d565b50505050905090565b602260149054906101000a900460ff16156120c9575f611e546023546016612a1f565b9050611e976040518060400160405280600e81526020017f66757a7a20697465726174696f6e000000000000000000000000000000000000815250602354612a6b565b602180805490506016637fffffff602354611eb29190615b9d565b611ebc9190615bde565b604051602001611ecc9190615c31565b604051602081830303815290604052805190602001205f1c611eee9190615c78565b81548110611eff57611efe615ca8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660225f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160235f828254611f789190615bde565b92505081905550611fe76040518060400160405280600a81526020017f5072616e6b696e673a2000000000000000000000000000000000000000000000815250611fe260225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b07565b612cbd565b6120266040518060400160405280601181526020017f426c6f636b2074696d657374616d703a2000000000000000000000000000000081525042612a6b565b6024544210156120bf577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf026024546040518263ffffffff1660e01b815260040161208d9190615ce4565b5f604051808303815f87803b1580156120a4575f80fd5b505af11580156120b6573d5f803e3d5ffd5b505050506120c7565b426024819055505b505b7fb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a28460225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516121199190615d0c565b60405180910390a15f61212b826135be565b90505f600167ffffffffffffffff81111561214957612148615d25565b5b6040519080825280602002602001820160405280156121775781602001602082028036833780820191505090505b50905060225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f815181106121af576121ae615ca8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506121f281612d6f565b5f80612200845f0151613670565b9150915061220f82828561385a565b5050505050565b6122206001611e31565b565b61222c6001610560565b565b6060601d805480602002602001604051908101604052809291908181526020015f905b8282101561236c578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561235457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116123015790505b50505050508152505081526020019060010190612251565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015612440578382905f5260205f200180546123b590615d7f565b80601f01602080910402602001604051908101604052809291908181526020018280546123e190615d7f565b801561242c5780601f106124035761010080835404028352916020019161242c565b820191905f5260205f20905b81548152906001019060200180831161240f57829003601f168201915b505050505081526020019060010190612398565b50505050905090565b5f60095f9054906101000a900460ff16156124745760095f9054906101000a900460ff16905061255a565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401612516929190615dc7565b602060405180830381865afa158015612531573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125559190615e18565b141590505b90565b6125676001612569565b565b602260149054906101000a900460ff1615612801575f61258c6023546016612a1f565b90506125cf6040518060400160405280600e81526020017f66757a7a20697465726174696f6e000000000000000000000000000000000000815250602354612a6b565b602180805490506016637fffffff6023546125ea9190615b9d565b6125f49190615bde565b6040516020016126049190615c31565b604051602081830303815290604052805190602001205f1c6126269190615c78565b8154811061263757612636615ca8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660225f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160235f8282546126b09190615bde565b9250508190555061271f6040518060400160405280600a81526020017f5072616e6b696e673a200000000000000000000000000000000000000000000081525061271a60225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b07565b612cbd565b61275e6040518060400160405280601181526020017f426c6f636b2074696d657374616d703a2000000000000000000000000000000081525042612a6b565b6024544210156127f7577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663e5d6bf026024546040518263ffffffff1660e01b81526004016127c59190615ce4565b5f604051808303815f87803b1580156127dc575f80fd5b505af11580156127ee573d5f803e3d5ffd5b505050506127ff565b426024819055505b505b7fb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a28460225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516128519190615d0c565b60405180910390a15f6128638261388f565b90505f600167ffffffffffffffff81111561288157612880615d25565b5b6040519080825280602002602001820160405280156128af5781602001602082028036833780820191505090505b50905060225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f815181106128e7576128e6615ca8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061292a81612d6f565b5f80612938845f01516138ad565b91509150612947828285613a60565b5050505050565b606060168054806020026020016040519081016040528092919081815260200182805480156129cf57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612986575b5050505050905090565b6129e360016113a9565b565b6129ef6001611e31565b6129f96002611e31565b565b60205f9054906101000a900460ff1681565b612a15613a83565b612a1d613aea565b565b5f81637fffffff84612a319190615b9d565b612a3b9190615bde565b604051602001612a4b9190615c31565b604051602081830303815290604052805190602001205f1c905092915050565b612b038282604051602401612a81929190615e8b565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613d36565b5050565b60605f602867ffffffffffffffff811115612b2557612b24615d25565b5b6040519080825280601f01601f191660200182016040528015612b575781602001600182028036833780820191505090505b5090505f5b6014811015612cb3575f816013612b739190615eb9565b6008612b7f9190615b9d565b6002612b8b919061601b565b8573ffffffffffffffffffffffffffffffffffffffff16612bac9190616065565b60f81b90505f60108260f81c612bc29190616095565b60f81b90505f8160f81c6010612bd891906160c5565b8360f81c612be69190616101565b60f81b9050612bf482613d50565b85856002612c029190615b9d565b81518110612c1357612c12615ca8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350612c4a81613d50565b856001866002612c5a9190615b9d565b612c649190615bde565b81518110612c7557612c74615ca8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505050508080600101915050612b5c565b5080915050919050565b612d558282604051602401612cd3929190616135565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613d36565b5050565b612d616151f8565b81815f018181525050919050565b612d795f82613d95565b50565b5f60607f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663ca669fa760225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401612dfb9190615d0c565b5f604051808303815f87803b158015612e12575f80fd5b505af1158015612e24573d5f803e3d5ffd5b5050505060255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfb827b860e01b84604051602401612e799190615ce4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612ee391906161ae565b5f604051808303815f865af19150503d805f8114612f1c576040519150601f19603f3d011682016040523d82523d5f602084013e612f21565b606091505b508092508193505050915091565b8215612f4357612f3e82613dac565b612f4d565b612f4c82613db8565b5b505050565b612f5a61520a565b81815f019015159081151581525050919050565b5f60607f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663ca669fa760225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401612fed9190615d0c565b5f604051808303815f87803b158015613004575f80fd5b505af1158015613016573d5f803e3d5ffd5b5050505060255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663794a433b60e01b8460405160240161306b9190615a9b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516130d591906161ae565b5f604051808303815f865af19150503d805f811461310e576040519150601f19603f3d011682016040523d82523d5f602084013e613113565b606091505b508092508193505050915091565b82156131355761313082613dac565b61313f565b61313e82613db8565b5b505050565b61314c61521e565b81815f019015159081151581525050919050565b5f60607f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663ca669fa760225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016131df9190615d0c565b5f604051808303815f87803b1580156131f6575f80fd5b505af1158015613208573d5f803e3d5ffd5b5050505060255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390dca6f660e01b8460405160240161325d9190615a9b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516132c791906161ae565b5f604051808303815f865af19150503d805f8114613300576040519150601f19603f3d011682016040523d82523d5f602084013e613305565b606091505b508092508193505050915091565b82156133275761332282613dac565b613331565b61333082613db8565b5b505050565b61333e615232565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e422447835f60086040518463ffffffff1660e01b815260040161339b93929190616236565b6020604051808303815f875af11580156133b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906133db919061627f565b815f018181525050919050565b5f60607f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663ca669fa760225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016134679190615d0c565b5f604051808303815f87803b15801561347e575f80fd5b505af1158015613490573d5f803e3d5ffd5b5050505060255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630786ca7360e01b846040516024016134e59190615ce4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161354f91906161ae565b5f604051808303815f865af19150503d805f8114613588576040519150601f19603f3d011682016040523d82523d5f602084013e61358d565b606091505b508092508193505050915091565b82156135af576135aa82613dac565b6135b9565b6135b882613db8565b5b505050565b6135c6615244565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e422447835f60646040518463ffffffff1660e01b8152600401613623939291906162e3565b6020604051808303815f875af115801561363f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613663919061627f565b815f018181525050919050565b5f60607f5b79e5e399858b8631a3a68acc1e6aafebcd8cfb9a8090eadd55191ab84b4481836040516136a29190615ce4565b60405180910390a17f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663ca669fa760225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016137269190615d0c565b5f604051808303815f87803b15801561373d575f80fd5b505af115801561374f573d5f803e3d5ffd5b5050505060255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fe811260e01b846040516024016137a49190615ce4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161380e91906161ae565b5f604051808303815f865af19150503d805f8114613847576040519150601f19603f3d011682016040523d82523d5f602084013e61384c565b606091505b508092508193505050915091565b82156138805761386981613dc4565b613871613dd2565b5061387b82613dac565b61388a565b61388982613db8565b5b505050565b613897615256565b81815f019060ff16908160ff1681525050919050565b5f60607f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663ca669fa760225f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161392c9190615d0c565b5f604051808303815f87803b158015613943575f80fd5b505af1158015613955573d5f803e3d5ffd5b5050505060255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368b3ad3b60e01b846040516024016139aa9190616327565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613a1491906161ae565b5f604051808303815f865af19150503d805f8114613a4d576040519150601f19603f3d011682016040523d82523d5f602084013e613a52565b606091505b508092508193505050915091565b8215613a7457613a6f82613dac565b613a7e565b613a7d82613db8565b5b505050565b604051613a8f9061526b565b604051809103905ff080158015613aa8573d5f803e3d5ffd5b5060255f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663c657c71860255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401613b66919061638a565b5f604051808303815f87803b158015613b7d575f80fd5b505af1158015613b8f573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663c657c718620100006040518263ffffffff1660e01b8152600401613bf19190616400565b5f604051808303815f87803b158015613c08575f80fd5b505af1158015613c1a573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663c657c718620200006040518263ffffffff1660e01b8152600401613c7c9190616476565b5f604051808303815f87803b158015613c93575f80fd5b505af1158015613ca5573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663c657c718620300006040518263ffffffff1660e01b8152600401613d0791906164ec565b5f604051808303815f87803b158015613d1e575f80fd5b505af1158015613d30573d5f803e3d5ffd5b50505050565b613d4d81613d45613dda613e00565b63ffffffff16565b50565b5f600a8260f81c60ff161015613d7a5760308260f81c613d709190616518565b60f81b9050613d90565b60578260f81c613d8a9190616518565b60f81b90505b919050565b613d9f8282613e0b565b613da882613e4c565b5050565b613db4613e58565b5050565b613dc181613e60565b50565b613dcf600182613d95565b50565b5f6001905090565b5f815190505f6a636f6e736f6c652e6c6f679050602083015f808483855afa5050505050565b615278819050919050565b5f5b8151811015613e4757613e3a83838381518110613e2d57613e2c615ca8565b5b6020026020010151614083565b8080600101915050613e0d565b505050565b613e5581614091565b50565b5f6001905090565b5f815103613f8557600115613ef9575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a15f9f075f6040518263ffffffff1660e01b8152600401613ec79190616596565b5f604051808303815f87803b158015613ede575f80fd5b505af1158015613ef0573d5f803e3d5ffd5b50505050613f80565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a15f9f0760016040518263ffffffff1660e01b8152600401613f529190616632565b5f604051808303815f87803b158015613f69575f80fd5b505af1158015613f7b573d5f803e3d5ffd5b505050505b614080565b5f602082015190507f4e487b71539e0164c9d29506cc725e49342bcac15e0927282bf30fedfe1c72687bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361400157613ffb82614166565b50614080565b7f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036140755761406f826142d9565b50614080565b61407e82614497565b505b50565b61408d82826145f5565b5050565b61410c6040518060400160405280601f81526020017f4265666f72652f416674657220636f6e747261637445746842616c616e6365008152508260ff1660255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16316146c5565b60255f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160265f8360ff1660ff1681526020019081526020015f206001018190555050565b5f61417082614764565b90505f61417b614895565b90505f805b82518110156141c05782818151811061419c5761419b615ca8565b5b602002602001015184036141b357600191506141c0565b8080600101915050614180565b505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633692d61a845f1b6040518263ffffffff1660e01b815260040161421b91906166a8565b5f604051808303815f87803b158015614232575f80fd5b505af1158015614244573d5f803e3d5ffd5b50505050806142d3575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a15f9f075f6040518263ffffffff1660e01b81526004016142a59190616744565b5f604051808303815f87803b1580156142bc575f80fd5b505af11580156142ce573d5f803e3d5ffd5b505050505b50505050565b5f6142e382614972565b90505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b5c4277826040518263ffffffff1660e01b815260040161433d91906167e0565b5f604051808303815f87803b158015614354575f80fd5b505af1158015614366573d5f803e3d5ffd5b5050505061437382614ae7565b15614403575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b5c4277826040518263ffffffff1660e01b81526004016143d0919061685d565b5f604051808303815f87803b1580156143e7575f80fd5b505af11580156143f9573d5f803e3d5ffd5b5050505050614494565b600115614492575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a15f9f075f836040518363ffffffff1660e01b8152600401614464929190616890565b5f604051808303815f87803b15801561447b575f80fd5b505af115801561448d573d5f803e3d5ffd5b505050505b505b50565b5f602082015190505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b5c42776144e384614972565b6040518263ffffffff1660e01b81526004016144ff919061692e565b5f604051808303815f87803b158015614516575f80fd5b505af1158015614528573d5f803e3d5ffd5b505050505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388e362c6826145706151a2565b6040518060400160405280601881526020017f4552525f30313a20556e6578706563746564204572726f7200000000000000008152506040518463ffffffff1660e01b81526004016145c4939291906169dc565b5f604051808303815f87803b1580156145db575f80fd5b505af11580156145ed573d5f803e3d5ffd5b505050505050565b61464f6040518060400160405280601b81526020017f4265666f72652f4166746572207573657245746842616c616e636500000000008152508360ff168373ffffffffffffffffffffffffffffffffffffffff16316146c5565b8073ffffffffffffffffffffffffffffffffffffffff163160265f8460ff1660ff1681526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01819055505050565b61475f8383836040516024016146dd93929190616a1f565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613d36565b505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b60e72cc83516040518263ffffffff1660e01b81526004016147bf9190616aa5565b5f604051808303815f87803b1580156147d6575f80fd5b505af11580156147e8573d5f803e3d5ffd5b50505050602482511015614883575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a15f9f075f6040518263ffffffff1660e01b815260040161484e9190616b41565b5f604051808303815f87803b158015614865575f80fd5b505af1158015614877573d5f803e3d5ffd5b505050505f9050614890565b5f60248301519050809150505b919050565b60605f600467ffffffffffffffff8111156148b3576148b2615d25565b5b6040519080825280602002602001820160405280156148e15781602001602082028036833780820191505090505b5090506021815f815181106148f9576148f8615ca8565b5b60200260200101818152505060318160018151811061491b5761491a615ca8565b5b60200260200101818152505060328160028151811061493d5761493c615ca8565b5b60200260200101818152505060118160038151811061495f5761495e615ca8565b5b6020026020010181815250508091505090565b6060604482511015614ac5575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323cdd8e8836040518263ffffffff1660e01b81526004016149d69190616bff565b5f604051808303815f87803b1580156149ed575f80fd5b505af11580156149ff573d5f803e3d5ffd5b505050505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a15f9f075f6040518263ffffffff1660e01b8152600401614a5b9190616ca2565b5f604051808303815f87803b158015614a72575f80fd5b505af1158015614a84573d5f803e3d5ffd5b505050506040518060400160405280601a81526020017f496e76616c6964207265766572742064617461206c656e6774680000000000008152509050614ae2565b60048201915081806020019051810190614adf9190616dbf565b90505b919050565b5f80600967ffffffffffffffff811115614b0457614b03615d25565b5b604051908082528060200260200182016040528015614b3757816020015b6060815260200190600190039081614b225790505b5090507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051602401614b6a90616e50565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050815f81518110614bda57614bd9615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051602401614c1590616ede565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600181518110614c8657614c85615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051602401614cc190616f6c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600281518110614d3257614d31615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051602401614d6d90616ffa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600381518110614dde57614ddd615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051602401614e1990617062565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600481518110614e8a57614e89615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051602401614ec5906170f0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600581518110614f3657614f35615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051602401614f719061717e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600681518110614fe257614fe1615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa60405160240161501d9061720c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508160078151811061508e5761508d615ca8565b5b60200260200101819052507f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa6040516024016150c99061729a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508160088151811061513a57615139615ca8565b5b60200260200101819052505f5b81518110156151975781818151811061516357615162615ca8565b5b60200260200101518051906020012084805190602001200361518a5760019250505061519d565b8080600101915050615147565b505f9150505b919050565b60605f600167ffffffffffffffff8111156151c0576151bf615d25565b5b6040519080825280602002602001820160405280156151ee5781602001602082028036833780820191505090505b5090508091505090565b60405180602001604052805f81525090565b60405180602001604052805f151581525090565b60405180602001604052805f151581525090565b60405180602001604052805f81525090565b60405180602001604052805f81525090565b60405180602001604052805f60ff1681525090565b6103e5806172e683390190565b6152806172b8565b565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6152d4826152ab565b9050919050565b6152e4816152ca565b82525050565b5f6152f583836152db565b60208301905092915050565b5f602082019050919050565b5f61531782615282565b615321818561528c565b935061532c8361529c565b805f5b8381101561535c57815161534388826152ea565b975061534e83615301565b92505060018101905061532f565b5085935050505092915050565b5f6020820190508181035f830152615381818461530d565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6153ac8161539a565b81146153b6575f80fd5b50565b5f813590506153c7816153a3565b92915050565b5f602082840312156153e2576153e1615392565b5b5f6153ef848285016153b9565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61548c8261544a565b6154968185615454565b93506154a6818560208601615464565b6154af81615472565b840191505092915050565b5f6154c58383615482565b905092915050565b5f602082019050919050565b5f6154e382615421565b6154ed818561542b565b9350836020820285016154ff8561543b565b805f5b8581101561553a578484038952815161551b85826154ba565b9450615526836154cd565b925060208a01995050600181019050615502565b50829750879550505050505092915050565b5f604083015f8301516155615f8601826152db565b506020830151848203602086015261557982826154d9565b9150508091505092915050565b5f615591838361554c565b905092915050565b5f602082019050919050565b5f6155af826153f8565b6155b98185615402565b9350836020820285016155cb85615412565b805f5b8581101561560657848403895281516155e78582615586565b94506155f283615599565b925060208a019950506001810190506155ce565b50829750879550505050505092915050565b5f6020820190508181035f83015261563081846155a5565b905092915050565b5f8115159050919050565b61564c81615638565b8114615656575f80fd5b50565b5f8135905061566781615643565b92915050565b5f6020828403121561568257615681615392565b5b5f61568f84828501615659565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61571e816156ea565b82525050565b5f61572f8383615715565b60208301905092915050565b5f602082019050919050565b5f615751826156c1565b61575b81856156cb565b9350615766836156db565b805f5b8381101561579657815161577d8882615724565b97506157888361573b565b925050600181019050615769565b5085935050505092915050565b5f604083015f8301518482035f8601526157bd8282615482565b915050602083015184820360208601526157d78282615747565b9150508091505092915050565b5f6157ef83836157a3565b905092915050565b5f602082019050919050565b5f61580d82615698565b61581781856156a2565b935083602082028501615829856156b2565b805f5b85811015615864578484038952815161584585826157e4565b9450615850836157f7565b925060208a0199505060018101905061582c565b50829750879550505050505092915050565b5f6020820190508181035f83015261588e8184615803565b905092915050565b5f80604083850312156158ac576158ab615392565b5b5f6158b9858286016153b9565b92505060206158ca858286016153b9565b9150509250929050565b5f82825260208201905092915050565b5f6158ee82615421565b6158f881856158d4565b93508360208202850161590a8561543b565b805f5b85811015615945578484038952815161592685826154ba565b9450615931836154cd565b925060208a0199505060018101905061590d565b50829750879550505050505092915050565b5f6020820190508181035f83015261596f81846158e4565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516159b55f8601826152db565b50602083015184820360208601526159cd8282615747565b9150508091505092915050565b5f6159e583836159a0565b905092915050565b5f602082019050919050565b5f615a0382615977565b615a0d8185615981565b935083602082028501615a1f85615991565b805f5b85811015615a5a5784840389528151615a3b85826159da565b9450615a46836159ed565b925060208a01995050600181019050615a22565b50829750879550505050505092915050565b5f6020820190508181035f830152615a8481846159f9565b905092915050565b615a9581615638565b82525050565b5f602082019050615aae5f830184615a8c565b92915050565b5f60ff82169050919050565b615ac981615ab4565b8114615ad3575f80fd5b50565b5f81359050615ae481615ac0565b92915050565b5f60208284031215615aff57615afe615392565b5b5f615b0c84828501615ad6565b91505092915050565b5f819050919050565b5f819050919050565b5f615b41615b3c615b3784615b15565b615b1e565b61539a565b9050919050565b615b5181615b27565b82525050565b5f602082019050615b6a5f830184615b48565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f615ba78261539a565b9150615bb28361539a565b9250828202615bc08161539a565b91508282048414831517615bd757615bd6615b70565b5b5092915050565b5f615be88261539a565b9150615bf38361539a565b9250828201905080821115615c0b57615c0a615b70565b5b92915050565b5f819050919050565b615c2b615c268261539a565b615c11565b82525050565b5f615c3c8284615c1a565b60208201915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f615c828261539a565b9150615c8d8361539a565b925082615c9d57615c9c615c4b565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b615cde8161539a565b82525050565b5f602082019050615cf75f830184615cd5565b92915050565b615d06816152ca565b82525050565b5f602082019050615d1f5f830184615cfd565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680615d9657607f821691505b602082108103615da957615da8615d52565b5b50919050565b5f819050919050565b615dc181615daf565b82525050565b5f604082019050615dda5f830185615cfd565b615de76020830184615db8565b9392505050565b615df781615daf565b8114615e01575f80fd5b50565b5f81519050615e1281615dee565b92915050565b5f60208284031215615e2d57615e2c615392565b5b5f615e3a84828501615e04565b91505092915050565b5f82825260208201905092915050565b5f615e5d8261544a565b615e678185615e43565b9350615e77818560208601615464565b615e8081615472565b840191505092915050565b5f6040820190508181035f830152615ea38185615e53565b9050615eb26020830184615cd5565b9392505050565b5f615ec38261539a565b9150615ece8361539a565b9250828203905081811115615ee657615ee5615b70565b5b92915050565b5f8160011c9050919050565b5f808291508390505b6001851115615f4157808604811115615f1d57615f1c615b70565b5b6001851615615f2c5780820291505b8081029050615f3a85615eec565b9450615f01565b94509492505050565b5f82615f595760019050616014565b81615f66575f9050616014565b8160018114615f7c5760028114615f8657615fb5565b6001915050616014565b60ff841115615f9857615f97615b70565b5b8360020a915084821115615faf57615fae615b70565b5b50616014565b5060208310610133831016604e8410600b8410161715615fea5782820a905083811115615fe557615fe4615b70565b5b616014565b615ff78484846001615ef8565b9250905081840481111561600e5761600d615b70565b5b81810290505b9392505050565b5f6160258261539a565b91506160308361539a565b925061605d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615f4a565b905092915050565b5f61606f8261539a565b915061607a8361539a565b92508261608a57616089615c4b565b5b828204905092915050565b5f61609f82615ab4565b91506160aa83615ab4565b9250826160ba576160b9615c4b565b5b828204905092915050565b5f6160cf82615ab4565b91506160da83615ab4565b92508282026160e881615ab4565b91508082146160fa576160f9615b70565b5b5092915050565b5f61610b82615ab4565b915061611683615ab4565b9250828203905060ff81111561612f5761612e615b70565b5b92915050565b5f6040820190508181035f83015261614d8185615e53565b905081810360208301526161618184615e53565b90509392505050565b5f81519050919050565b5f81905092915050565b5f6161888261616a565b6161928185616174565b93506161a2818560208601615464565b80840191505092915050565b5f6161b9828461617e565b915081905092915050565b5f819050919050565b5f6161e76161e26161dd846161c4565b615b1e565b61539a565b9050919050565b6161f7816161cd565b82525050565b5f819050919050565b5f61622061621b616216846161fd565b615b1e565b61539a565b9050919050565b61623081616206565b82525050565b5f6060820190506162495f830186615cd5565b61625660208301856161ee565b6162636040830184616227565b949350505050565b5f81519050616279816153a3565b92915050565b5f6020828403121561629457616293615392565b5b5f6162a18482850161626b565b91505092915050565b5f819050919050565b5f6162cd6162c86162c3846162aa565b615b1e565b61539a565b9050919050565b6162dd816162b3565b82525050565b5f6060820190506162f65f830186615cd5565b61630360208301856161ee565b61631060408301846162d4565b949350505050565b61632181615ab4565b82525050565b5f60208201905061633a5f830184616318565b92915050565b7f53616d706c65436f6e74726163740000000000000000000000000000000000005f82015250565b5f616374600e83615e43565b915061637f82616340565b602082019050919050565b5f60408201905061639d5f830184615cfd565b81810360208301526163ae81616368565b905092915050565b7f55534552310000000000000000000000000000000000000000000000000000005f82015250565b5f6163ea600583615e43565b91506163f5826163b6565b602082019050919050565b5f6040820190506164135f830184615cfd565b8181036020830152616424816163de565b905092915050565b7f55534552320000000000000000000000000000000000000000000000000000005f82015250565b5f616460600583615e43565b915061646b8261642c565b602082019050919050565b5f6040820190506164895f830184615cfd565b818103602083015261649a81616454565b905092915050565b7f55534552330000000000000000000000000000000000000000000000000000005f82015250565b5f6164d6600583615e43565b91506164e1826164a2565b602082019050919050565b5f6040820190506164ff5f830184615cfd565b8181036020830152616510816164ca565b905092915050565b5f61652282615ab4565b915061652d83615ab4565b9250828201905060ff81111561654657616545615b70565b5b92915050565b7f456d707479207265766572742064617461206e6f7420616c6c6f7765640000005f82015250565b5f616580601d83615e43565b915061658b8261654c565b602082019050919050565b5f6040820190506165a95f830184615a8c565b81810360208301526165ba81616574565b905092915050565b7f526576657274206461746120697320656d7074792c20616c6c6f7765642062795f8201527f20636f6e66696700000000000000000000000000000000000000000000000000602082015250565b5f61661c602783615e43565b9150616627826165c2565b604082019050919050565b5f6040820190506166455f830184615a8c565b818103602083015261665681616610565b905092915050565b7f50616e696320636f6465000000000000000000000000000000000000000000005f82015250565b5f616692600a83615e43565b915061669d8261665e565b602082019050919050565b5f6040820190508181035f8301526166bf81616686565b90506166ce6020830184615db8565b92915050565b7f446973616c6c6f7765642050616e696320636f646520656e636f756e746572655f8201527f6421000000000000000000000000000000000000000000000000000000000000602082015250565b5f61672e602283615e43565b9150616739826166d4565b604082019050919050565b5f6040820190506167575f830184615a8c565b818103602083015261676881616722565b905092915050565b7f4572726f7228737472696e6729207265766572742072657475726e446174613a5f8201527f2000000000000000000000000000000000000000000000000000000000000000602082015250565b5f6167ca602183615e43565b91506167d582616770565b604082019050919050565b5f6040820190508181035f8301526167f7816167be565b9050818103602083015261680b8184615e53565b905092915050565b7f4552433230206572726f7220656e636f756e74657265640000000000000000005f82015250565b5f616847601783615e43565b915061685282616813565b602082019050919050565b5f6040820190508181035f8301526168748161683b565b905081810360208301526168888184615e53565b905092915050565b5f6040820190506168a35f830185615a8c565b81810360208301526168b58184615e53565b90509392505050565b7f437573746f6d2070726f746f636f6c206572726f722072657475726e446174615f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f616918602283615e43565b9150616923826168be565b604082019050919050565b5f6040820190508181035f8301526169458161690c565b905081810360208301526169598184615e53565b905092915050565b61696a816156ea565b82525050565b5f82825260208201905092915050565b5f61698a826156c1565b6169948185616970565b935061699f836156db565b805f5b838110156169cf5781516169b68882615724565b97506169c18361573b565b9250506001810190506169a2565b5085935050505092915050565b5f6060820190506169ef5f830186616961565b8181036020830152616a018185616980565b90508181036040830152616a158184615e53565b9050949350505050565b5f6060820190508181035f830152616a378186615e53565b9050616a466020830185615cd5565b616a536040830184615cd5565b949350505050565b7f5245564552542044415441204c454e47544800000000000000000000000000005f82015250565b5f616a8f601283615e43565b9150616a9a82616a5b565b602082019050919050565b5f6040820190508181035f830152616abc81616a83565b9050616acb6020830184615cd5565b92915050565b7f556e6578706563746564207265766572742064617461206c656e67746820666f5f8201527f722070616e696320636f64650000000000000000000000000000000000000000602082015250565b5f616b2b602c83615e43565b9150616b3682616ad1565b604082019050919050565b5f604082019050616b545f830184615a8c565b8181036020830152616b6581616b1f565b905092915050565b7f52617720726576657274206461746120286865782900000000000000000000005f82015250565b5f616ba1601583615e43565b9150616bac82616b6d565b602082019050919050565b5f82825260208201905092915050565b5f616bd18261616a565b616bdb8185616bb7565b9350616beb818560208601615464565b616bf481615472565b840191505092915050565b5f6040820190508181035f830152616c1681616b95565b90508181036020830152616c2a8184616bc7565b905092915050565b7f52657475726e65642064617461206973206e6f7420612076616c6964207265765f8201527f657274206d657373616765000000000000000000000000000000000000000000602082015250565b5f616c8c602b83615e43565b9150616c9782616c32565b604082019050919050565b5f604082019050616cb55f830184615a8c565b8181036020830152616cc681616c80565b905092915050565b5f80fd5b5f80fd5b616cdf82615472565b810181811067ffffffffffffffff82111715616cfe57616cfd615d25565b5b80604052505050565b5f616d10615389565b9050616d1c8282616cd6565b919050565b5f67ffffffffffffffff821115616d3b57616d3a615d25565b5b616d4482615472565b9050602081019050919050565b5f616d63616d5e84616d21565b616d07565b905082815260208101848484011115616d7f57616d7e616cd2565b5b616d8a848285615464565b509392505050565b5f82601f830112616da657616da5616cce565b5b8151616db6848260208601616d51565b91505092915050565b5f60208284031215616dd457616dd3615392565b5b5f82015167ffffffffffffffff811115616df157616df0615396565b5b616dfd84828501616d92565b91505092915050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f616e3a601d83615e43565b9150616e4582616e06565b602082019050919050565b5f6020820190508181035f830152616e6781616e2e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f616ec8602583615e43565b9150616ed382616e6e565b604082019050919050565b5f6020820190508181035f830152616ef581616ebc565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f616f56602383615e43565b9150616f6182616efc565b604082019050919050565b5f6020820190508181035f830152616f8381616f4a565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f616fe4602283615e43565b9150616fef82616f8a565b604082019050919050565b5f6020820190508181035f83015261701181616fd8565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f61704c601f83615e43565b915061705782617018565b602082019050919050565b5f6020820190508181035f83015261707981617040565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f6170da602183615e43565b91506170e582617080565b604082019050919050565b5f6020820190508181035f830152617107816170ce565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f617168602583615e43565b91506171738261710e565b604082019050919050565b5f6020820190508181035f8301526171958161715c565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f6171f6602283615e43565b91506172018261719c565b604082019050919050565b5f6020820190508181035f830152617223816171ea565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f617284602683615e43565b915061728f8261722a565b604082019050919050565b5f6020820190508181035f8301526172b181617278565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52605160045260245ffdfe6080604052348015600e575f80fd5b506103c98061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80630786ca731461006457806354fe81121461006e57806368b3ad3b1461008a578063794a433b1461009457806390dca6f61461009e578063dfb827b8146100a8575b5f80fd5b61006c6100b2565b005b6100886004803603810190610083919061019e565b6100c4565b005b6100926100d6565b005b61009c610111565b005b6100a6610115565b005b6100b0610157565b005b5f8060016100c09190610223565b5050565b6001816100d19190610253565b905050565b6040517fd7f75eac000000000000000000000000000000000000000000000000000000008152600401610108906102e0565b60405180910390fd5b5f80fd5b5f610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90610348565b60405180910390fd5b565b5f61016557610164610366565b5b565b5f80fd5b5f819050919050565b61017d8161016b565b8114610187575f80fd5b50565b5f8135905061019881610174565b92915050565b5f602082840312156101b3576101b2610167565b5b5f6101c08482850161018a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61022d8261016b565b91506102388361016b565b925082610248576102476101c9565b5b828204905092915050565b5f61025d8261016b565b91506102688361016b565b92508282019050808211156102805761027f6101f6565b5b92915050565b5f82825260208201905092915050565b7f53616d706c65206661696c207769746820637573746f6d206572726f720000005f82015250565b5f6102ca601d83610286565b91506102d582610296565b602082019050919050565b5f6020820190508181035f8301526102f7816102be565b9050919050565b7f53616d706c65206661696c2077697468207265717569726500000000000000005f82015250565b5f610332601883610286565b915061033d826102fe565b602082019050919050565b5f6020820190508181035f83015261035f81610326565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220a367d8b1ab69b75f9816ce37431c824d46a8d7a97a9fbf3ab89e39eb64a30f7164736f6c63430008190033a26469706673582212201e7f50efec86752e54a12123aeb30003c015114c7d27d02f6753250cf1df618f64736f6c63430008190033","sourceMap":"85:972:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;132:105;;;:::i;:::-;;448:116;;;:::i;:::-;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;930:125:35;;;:::i;:::-;;2297:500:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3823:151:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2803:522:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;763:502;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1796:495;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3193:186:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;146:203:36;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3047:140:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;287:470:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;243:86:35;;;:::i;:::-;;813:111;;;:::i;:::-;;2754:147:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;570:122:35;;;:::i;:::-;;1271:519:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;698:109:35;;;:::i;:::-;;335:107;;;:::i;:::-;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;132:105:35;317:28:0;309:37;;166:7:35;;;174:10;166:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;219:11;:9;:11::i;:::-;132:105::o;448:116::-;525:32;552:4;525:26;:32::i;:::-;448:116::o;2907:134:5:-;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;930:125:35:-;1012:36;1043:4;1012:30;:36::i;:::-;930:125::o;2297:500:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;2386:40:37::1;2429:46;2463:11;2429:33;:46::i;:::-;2386:89;;2486:31;2534:1;2520:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2486:50;;2566:12;;;;;;;;;;;2546:14;2561:1;2546:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;2588:23;2596:14;2588:7;:23::i;:::-;2623:12;2637:23:::0;2664:44:::1;2690:6;:17;;;2664:25;:44::i;:::-;2622:86;;;;2719:71;2754:7;2763:10;2775:14;2719:34;:71::i;:::-;2376:421;;;;2297:500:::0;:::o;3823:151:5:-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;2803:522:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;2894:45:37::1;2942:51;2981:11;2942:38;:51::i;:::-;2894:99;;3004:31;3052:1;3038:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3004:50;;3084:12;;;;;;;;;;;3064:14;3079:1;3064:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;3106:23;3114:14;3106:7;:23::i;:::-;3141:12;3155:23:::0;3182:49:::1;3213:6;:17;;;3182:30;:49::i;:::-;3140:91;;;;3242:76;3282:7;3291:10;3303:14;3242:39;:76::i;:::-;2884:441;;;;2803:522:::0;:::o;763:502::-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;850:41:37::1;894:47;929:11;894:34;:47::i;:::-;850:91;;952:31;1000:1;986:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;952:50;;1032:12;;;;;;;;;;;1012:14;1027:1;1012:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;1054:23;1062:14;1054:7;:23::i;:::-;1089:12;1103:23:::0;1130:45:::1;1157:6;:17;;;1130:26;:45::i;:::-;1088:87;;;;1186:72;1222:7;1231:10;1243:14;1186:35;:72::i;:::-;840:425;;;;763:502:::0;:::o;1796:495::-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;1884:39:37::1;1926:45;1959:11;1926:32;:45::i;:::-;1884:87;;1982:31;2030:1;2016:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1982:50;;2062:12;;;;;;;;;;;2042:14;2057:1;2042:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;2084:23;2092:14;2084:7;:23::i;:::-;2119:12;2133:23:::0;2160:43:::1;2185:6;:17;;;2160:24;:43::i;:::-;2118:85;;;;2214:70;2248:7;2257:10;2269:14;2214:33;:70::i;:::-;1874:417;;;;1796:495:::0;:::o;3193:186:5:-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;146:203:36:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;267:32:36::1;287:11;267:19;:32::i;:::-;309:33;329:12;309:19;:33::i;:::-;146:203:::0;;:::o;3047:140:5:-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;287:470:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;370:34:37::1;407:40;435:11;407:27;:40::i;:::-;370:77;;458:31;506:1;492:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;458:50;;538:12;;;;;;;;;;;518:14;533:1;518:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;560:23;568:14;560:7;:23::i;:::-;595:12;609:23:::0;636:38:::1;656:6;:17;;;636:19;:38::i;:::-;594:80;;;;685:65;714:7;723:10;735:14;685:28;:65::i;:::-;360:397;;;;287:470:::0;:::o;243:86:35:-;300:22;320:1;300:19;:22::i;:::-;243:86::o;813:111::-;889:28;915:1;889:25;:28::i;:::-;813:111::o;2754:147:5:-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;570:122:35:-;652:33;683:1;652:30;:33::i;:::-;570:122::o;1271:519:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;1361:45:37::1;1409:49;1448:9;1409:38;:49::i;:::-;1361:97;;1469:31;1517:1;1503:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1469:50;;1549:12;;;;;;;;;;;1529:14;1544:1;1529:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;1571:23;1579:14;1571:7;:23::i;:::-;1606:12;1620:23:::0;1647:49:::1;1678:6;:17;;;1647:30;:49::i;:::-;1605:91;;;;1707:76;1747:7;1756:10;1768:14;1707:39;:76::i;:::-;1351:439;;;;1271:519:::0;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;698:109:35:-;773:27;798:1;773:24;:27::i;:::-;698:109::o;335:107::-;381:22;401:1;381:19;:22::i;:::-;413;433:1;413:19;:22::i;:::-;335:107::o;1016:26:12:-;;;;;;;;;;;;;:::o;141:89:38:-;181:22;:20;:22::i;:::-;213:10;:8;:10::i;:::-;141:89::o;2367:179:44:-;2451:7;2532:4;446:10:41;2512:9:44;:17;;;;:::i;:::-;:24;;;;:::i;:::-;2495:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;2485:53;;;;;;2477:62;;2470:69;;2367:179;;;;:::o;7032:139:14:-;7096:68;7156:2;7160;7112:51;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7096:15;:68::i;:::-;7032:139;;:::o;2552:464:44:-;2608:17;2637:14;2664:2;2654:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2637:30;;2682:9;2677:307;2701:2;2697:1;:6;2677:307;;;2724:8;2791:1;2786:2;:6;;;;:::i;:::-;2781:1;:12;;;;:::i;:::-;2775:1;:19;;;;:::i;:::-;2764:5;2748:23;;:47;;;;:::i;:::-;2735:62;;2724:73;;2811:9;2841:2;2836:1;2830:8;;:13;;;;:::i;:::-;2823:21;;2811:33;;2858:9;2899:2;2893:9;;2888:2;:14;;;;:::i;:::-;2883:1;2877:8;;:25;;;;:::i;:::-;2870:33;;2858:45;;2928:8;2933:2;2928:4;:8::i;:::-;2917:1;2923;2919;:5;;;;:::i;:::-;2917:8;;;;;;;;:::i;:::-;;;;;:19;;;;;;;;;;;2965:8;2970:2;2965:4;:8::i;:::-;2950:1;2960;2956;2952;:5;;;;:::i;:::-;:9;;;;:::i;:::-;2950:12;;;;;;;;:::i;:::-;;;;;:23;;;;;;;;;;;2710:274;;;2705:3;;;;;;;2677:307;;;;3007:1;2993:16;;;2552:464;;;:::o;7320:150:14:-;7393:70;7455:2;7459;7409:53;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7393:15;:70::i;:::-;7320:150;;:::o;951:192:45:-;1049:40;;:::i;:::-;1125:11;1105:6;:17;;:31;;;;;951:192;;;:::o;755:89:40:-;816:21;827:1;830:6;816:10;:21::i;:::-;755:89;:::o;1618:319:51:-;1692:12;1706:23;317:28:0;309:37;;1741:8:51;;;1750:12;;;;;;;;;;;1741:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1805:14;;;;;;;;;;;1797:28;;1862:44;;;1908:11;1839:81;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1797:133;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1773:157;;;;;;;;1618:319;;;:::o;1450:295:43:-;1601:7;1597:142;;;1624:38;1651:10;1624:26;:38::i;:::-;1597:142;;;1693:35;1717:10;1693:23;:35::i;:::-;1597:142;1450:295;;;:::o;1149:199:45:-;1249:45;;:::i;:::-;1330:11;1310:6;:17;;:31;;;;;;;;;;;1149:199;;;:::o;1943:346:51:-;2035:12;2049:23;317:28:0;309:37;;2088:8:51;;;2097:12;;;;;;;;;;;2088:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2152:14;;;;;;;;;;;2144:28;;2209:49;;;2260:11;2186:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2144:138;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2120:162;;;;;;;;1943:346;;;:::o;1751:318:43:-;1925:7;1921:142;;;1948:38;1975:10;1948:26;:38::i;:::-;1921:142;;;2017:35;2041:10;2017:23;:35::i;:::-;1921:142;1751:318;;;:::o;340:191:45:-;436:41;;:::i;:::-;513:11;493:6;:17;;:31;;;;;;;;;;;340:191;;;:::o;618:318:51:-;690:12;704:23;317:28:0;309:37;;739:8:51;;;748:12;;;;;;;;;;;739:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;803:14;;;;;;;;;;;795:28;;860:45;;;907:11;837:82;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;795:134;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;771:158;;;;;;;;618:318;;;:::o;524:296:43:-;676:7;672:142;;;699:38;726:10;699:26;:38::i;:::-;672:142;;;768:35;792:10;768:23;:35::i;:::-;672:142;524:296;;;:::o;739:206:45:-;836:39;;:::i;:::-;911:2;;;;;;;;;;:8;;;920:11;933:1;936;911:27;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;891:6;:17;;:47;;;;;739:206;;;:::o;1295:317:51:-;1368:12;1382:23;317:28:0;309:37;;1417:8:51;;;1426:12;;;;;;;;;;;1417:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1481:14;;;;;;;;;;;1473:28;;1538:43;;;1583:11;1515:80;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1473:132;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1449:156;;;;;;;;1295:317;;;:::o;1150:294:43:-;1300:7;1296:142;;;1323:38;1350:10;1323:26;:38::i;:::-;1296:142;;;1392:35;1416:10;1392:23;:35::i;:::-;1296:142;1150:294;;;:::o;156:178:45:-;232:34;;:::i;:::-;298:2;;;;;;;;;;:8;;;307:11;320:1;323:3;298:29;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;278:6;:17;;:49;;;;;156:178;;;:::o;268:344:51:-;336:12;350:23;390:31;409:11;390:31;;;;;;:::i;:::-;;;;;;;;317:28:0;309:37;;432:8:51;;;441:12;;;;;;;;;;;432:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;508:14;;;;;;;;;;;500:28;;552:38;;;592:11;529:75;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;500:105;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;464:141;;;;;;;;268:344;;;:::o;159:359:43:-;304:7;300:212;;;327:22;334:14;327:6;:22::i;:::-;364:18;:16;:18::i;:::-;;397:38;424:10;397:26;:38::i;:::-;300:212;;;466:35;490:10;466:23;:35::i;:::-;300:212;159:359;;;:::o;537:196:45:-;636:45;;:::i;:::-;717:9;697:6;:17;;:29;;;;;;;;;;;537:196;;;:::o;942:347:51:-;1035:12;1049:23;317:28:0;309:37;;1088:8:51;;;1097:12;;;;;;;;;;;1088:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1152:14;;;;;;;;;;;1144:28;;1209:49;;;1260:11;1186:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1144:138;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:162;;;;;;;;942:347;;;:::o;826:318:43:-;1000:7;996:142;;;1023:38;1050:10;1023:26;:38::i;:::-;996:142;;;1092:35;1116:10;1092:23;:35::i;:::-;996:142;826:318;;;:::o;236:95:38:-;304:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;287:14;;:37;;;;;;;;;;;;;;;;;;236:95::o;355:236::-;317:28:0;309:37;;414:8:38;;;431:14;;;;;;;;;;;414:51;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;317:28:0;309:37;;492:8:38;;;284:7:52;492:24:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;317:28:0;309:37;;526:8:38;;;340:7:52;526:24:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;317:28:0;309:37;;560:8:38;;;396:7:52;560:24:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;355:236::o;408:133:14:-;479:55;526:7;479:46;505:19;479:25;:46::i;:::-;:55;;:::i;:::-;408:133;:::o;3022:168:44:-;3069:8;3104:2;3099:1;3093:8;;:13;;;3089:94;;;3133:4;3128:1;3122:8;;:15;;;;:::i;:::-;3115:23;;3108:30;;;;3089:94;3178:4;3173:1;3167:8;;:15;;;;:::i;:::-;3160:23;;3153:30;;3022:168;;;;:::o;944:154:40:-;1023:31;1038:7;1047:6;1023:14;:31::i;:::-;1064:27;1083:7;1064:18;:27::i;:::-;944:154;;:::o;117:106:42:-;197:19;:17;:19::i;:::-;;117:106;:::o;229:109::-;306:25;320:10;306:13;:25::i;:::-;229:109;:::o;850:88:40:-;910:21;921:1;924:6;910:10;:21::i;:::-;850:88;:::o;541:85:46:-;592:4;615;608:11;;541:85;:::o;547:380:14:-;621:21;645:7;:14;621:38;;669:22;131:42;669:40;;818:2;809:7;805:16;909:1;906;891:13;877:12;861:14;854:5;843:68;771:150;;;;547:380;:::o;181:221::-;296:42;382:4;373:13;;181:221;;;:::o;1104:191:40:-;1191:9;1186:103;1210:6;:13;1206:1;:17;1186:103;;;1244:34;1259:7;1268:6;1275:1;1268:9;;;;;;;;:::i;:::-;;;;;;;;1244:14;:34::i;:::-;1225:3;;;;;;;1186:103;;;;1104:191;;:::o;1301:100::-;1362:32;1386:7;1362:23;:32::i;:::-;1301:100;:::o;274:86:46:-;326:4;349;342:11;;274:86;:::o;149:915:49:-;273:1;252:10;:17;:22;248:267;;893:4:41;290:194:49;;;333:2;;;;;;;;;;:4;;;338:5;333:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;290:194;;;416:2;;;;;;;;;;:4;;;421;416:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;290:194;498:7;;248:267;525:20;617:4;605:10;601:21;595:28;578:45;;702:27;678:52;;;:13;:52;;;;674:127;;746:24;759:10;746:12;:24::i;:::-;784:7;;;674:127;878:26;854:51;;;:13;:51;;;;850:126;;921:24;934:10;921:12;:24::i;:::-;959:7;;;850:126;1027:30;1046:10;1027:18;:30::i;:::-;206:858;149:915;;:::o;1407:123:40:-;1488:35;1508:7;1517:5;1488:19;:35::i;:::-;1407:123;;:::o;1764:240::-;1831:88;;;;;;;;;;;;;;;;;;1878:7;1831:88;;1895:14;;;;;;;;;;;1887:31;;;1831:11;:88::i;:::-;1974:14;;;;;;;;;;;1966:31;;;1929:6;:15;1936:7;1929:15;;;;;;;;;;;;;;;:34;;:68;;;;1764:240;:::o;2465:558:49:-;2530:17;2550:29;2568:10;2550:17;:29::i;:::-;2530:49;;2589:29;2621:23;:21;:23::i;:::-;2589:55;;2654:14;2692:9;2687:180;2711:12;:19;2707:1;:23;2687:180;;;2768:12;2781:1;2768:15;;;;;;;;:::i;:::-;;;;;;;;2755:9;:28;2751:106;;2815:4;2803:16;;2837:5;;2751:106;2732:3;;;;;;;2687:180;;;;2877:2;;;;;;;;;;:6;;;2906:9;2898:18;;2877:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2932:9;2927:90;;2957:2;;;;;;;;;;:4;;;2962:5;2957:49;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2927:90;2520:503;;;2465:558;:::o;3029:415::-;3094:23;3120:33;3142:10;3120:21;:33::i;:::-;3094:59;;3163:2;;;;;;;;;;:6;;;3207:9;3163:54;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3232:32;3253:10;3232:20;:32::i;:::-;3228:127;;;3280:2;;;;;;;;;;:6;;;3314:9;3280:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3338:7;;;3228:127;793:4:41;3365:73:49;;;3405:2;;;;;;;;;;:4;;;3410:5;3417:9;3405:22;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3365:73;3084:360;3029:415;;:::o;3450:346::-;3521:20;3613:4;3601:10;3597:21;3591:28;3574:45;;3639:2;;;;;;;;;;:6;;;3684:33;3706:10;3684:21;:33::i;:::-;3639:79;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3728:2;;;;;;;;;;:11;;;3740:13;3755:25;:23;:25::i;:::-;3782:6;;;;;;;;;;;;;;;;;3728:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3511:285;3450:346;:::o;1536:222:40:-;1613:65;;;;;;;;;;;;;;;;;;1656:7;1613:65;;1665:4;:12;;;1613:11;:65::i;:::-;1739:4;:12;;;1688:6;:15;1695:7;1688:15;;;;;;;;;;;;;;;:27;;:33;1716:4;1688:33;;;;;;;;;;;;;;;:48;;:63;;;;1536:222;;:::o;11470:157:14:-;11543:77;11608:2;11612;11616;11559:60;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11543:15;:77::i;:::-;11470:157;;;:::o;3802:420:49:-;3871:7;3890:2;;;;;;;;;;;:6;;;3919:10;:17;3890:47;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3971:2;3951:10;:17;:22;3947:134;;;3989:2;;;;;;;;;;:4;;;3994:5;3989:59;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4069:1;4062:8;;;;3947:134;4091:17;4176:2;4164:10;4160:19;4154:26;4141:39;;4206:9;4199:16;;;3802:420;;;;:::o;249:404:50:-;322:16;350:27;394:1;380:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;350:46;;2043:4:53;406:10:50;417:1;406:13;;;;;;;;:::i;:::-;;;;;;;:40;;;;;2176:4:53;456:10:50;467:1;456:13;;;;;;;;:::i;:::-;;;;;;;:37;;;;;2240:4:53;503:10:50;514:1;503:13;;;;;;;;:::i;:::-;;;;;;;:41;;;;;1919:4:53;554:10:50;565:1;554:13;;;;;;;;:::i;:::-;;;;;;;:32;;;;;636:10;629:17;;;249:404;:::o;4228:454:49:-;4302:13;4352:2;4331:11;:18;:23;4327:219;;;4370:2;;;;;;;;;;:6;;;4402:11;4370:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4428:2;;;;;;;;;;:4;;;4433:5;4428:58;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4500:35;;;;;;;;;;;;;;;;;;;;;4327:219;4611:4;4598:11;4594:22;4579:37;;4653:11;4642:33;;;;;;;;;;;;:::i;:::-;4635:40;;4228:454;;;;:::o;905:790:50:-;1000:4;1016:28;1059:1;1047:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1016:45;;468:26:53;438:91;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1071:13:50;1085:1;1071:16;;;;;;;;:::i;:::-;;;;;;;:41;;;;618:26:53;588:99;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1122:13:50;1136:1;1122:16;;;;;;;;:::i;:::-;;;;;;;:37;;;;774:26:53;744:97;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1169:13:50;1183:1;1169:16;;;;;;;;:::i;:::-;;;;;;;:35;;;;927:26:53;897:96;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1214:13:50;1228:1;1214:16;;;;;;;;:::i;:::-;;;;;;;:34;;;;1076:26:53;1046:93;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1258:13:50;1272:1;1258:16;;;;;;;;:::i;:::-;;;;;;;:31;;;;1224:26:53;1194:95;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1299:13:50;1313:1;1299:16;;;;;;;;:::i;:::-;;;;;;;:33;;;;1379:26:53;1349:99;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1342:13:50;1356:1;1342:16;;;;;;;;:::i;:::-;;;;;;;:38;;;;1539:26:53;1509:96;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1390:13:50;1404:1;1390:16;;;;;;;;:::i;:::-;;;;;;;:39;;;;305:26:53;275:100;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1439:13:50;1453:1;1439:16;;;;;;;;:::i;:::-;;;;;;;:40;;;;1495:9;1490:177;1514:13;:20;1510:1;:24;1490:177;;;1594:13;1608:1;1594:16;;;;;;;;:::i;:::-;;;;;;;;1584:27;;;;;;1569:10;1559:21;;;;;;:52;1555:102;;1638:4;1631:11;;;;;;1555:102;1536:3;;;;;;;1490:177;;;;1683:5;1676:12;;;905:790;;;;:::o;659:240::-;734:15;761:29;806:1;793:15;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;761:47;;879:13;872:20;;;659:240;:::o;-1:-1:-1:-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;:::i;:::-;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:75::-;2287:6;2320:2;2314:9;2304:19;;2254:75;:::o;2335:117::-;2444:1;2441;2434:12;2458:117;2567:1;2564;2557:12;2581:77;2618:7;2647:5;2636:16;;2581:77;;;:::o;2664:122::-;2737:24;2755:5;2737:24;:::i;:::-;2730:5;2727:35;2717:63;;2776:1;2773;2766:12;2717:63;2664:122;:::o;2792:139::-;2838:5;2876:6;2863:20;2854:29;;2892:33;2919:5;2892:33;:::i;:::-;2792:139;;;;:::o;2937:329::-;2996:6;3045:2;3033:9;3024:7;3020:23;3016:32;3013:119;;;3051:79;;:::i;:::-;3013:119;3171:1;3196:53;3241:7;3232:6;3221:9;3217:22;3196:53;:::i;:::-;3186:63;;3142:117;2937:329;;;;:::o;3272:145::-;3370:6;3404:5;3398:12;3388:22;;3272:145;;;:::o;3423:215::-;3553:11;3587:6;3582:3;3575:19;3627:4;3622:3;3618:14;3603:29;;3423:215;;;;:::o;3644:163::-;3742:4;3765:3;3757:11;;3795:4;3790:3;3786:14;3778:22;;3644:163;;;:::o;3813:124::-;3890:6;3924:5;3918:12;3908:22;;3813:124;;;:::o;3943:184::-;4042:11;4076:6;4071:3;4064:19;4116:4;4111:3;4107:14;4092:29;;3943:184;;;;:::o;4133:142::-;4210:4;4233:3;4225:11;;4263:4;4258:3;4254:14;4246:22;;4133:142;;;:::o;4281:99::-;4333:6;4367:5;4361:12;4351:22;;4281:99;;;:::o;4386:159::-;4460:11;4494:6;4489:3;4482:19;4534:4;4529:3;4525:14;4510:29;;4386:159;;;;:::o;4551:139::-;4640:6;4635:3;4630;4624:23;4681:1;4672:6;4667:3;4663:16;4656:27;4551:139;;;:::o;4696:102::-;4737:6;4788:2;4784:7;4779:2;4772:5;4768:14;4764:28;4754:38;;4696:102;;;:::o;4804:357::-;4882:3;4910:39;4943:5;4910:39;:::i;:::-;4965:61;5019:6;5014:3;4965:61;:::i;:::-;4958:68;;5035:65;5093:6;5088:3;5081:4;5074:5;5070:16;5035:65;:::i;:::-;5125:29;5147:6;5125:29;:::i;:::-;5120:3;5116:39;5109:46;;4886:275;4804:357;;;;:::o;5167:196::-;5256:10;5291:66;5353:3;5345:6;5291:66;:::i;:::-;5277:80;;5167:196;;;;:::o;5369:123::-;5449:4;5481;5476:3;5472:14;5464:22;;5369:123;;;:::o;5526:971::-;5655:3;5684:64;5742:5;5684:64;:::i;:::-;5764:86;5843:6;5838:3;5764:86;:::i;:::-;5757:93;;5876:3;5921:4;5913:6;5909:17;5904:3;5900:27;5951:66;6011:5;5951:66;:::i;:::-;6040:7;6071:1;6056:396;6081:6;6078:1;6075:13;6056:396;;;6152:9;6146:4;6142:20;6137:3;6130:33;6203:6;6197:13;6231:84;6310:4;6295:13;6231:84;:::i;:::-;6223:92;;6338:70;6401:6;6338:70;:::i;:::-;6328:80;;6437:4;6432:3;6428:14;6421:21;;6116:336;6103:1;6100;6096:9;6091:14;;6056:396;;;6060:14;6468:4;6461:11;;6488:3;6481:10;;5660:837;;;;;5526:971;;;;:::o;6581:663::-;6702:3;6738:4;6733:3;6729:14;6825:4;6818:5;6814:16;6808:23;6844:63;6901:4;6896:3;6892:14;6878:12;6844:63;:::i;:::-;6753:164;7004:4;6997:5;6993:16;6987:23;7057:3;7051:4;7047:14;7040:4;7035:3;7031:14;7024:38;7083:123;7201:4;7187:12;7083:123;:::i;:::-;7075:131;;6927:290;7234:4;7227:11;;6707:537;6581:663;;;;:::o;7250:280::-;7381:10;7416:108;7520:3;7512:6;7416:108;:::i;:::-;7402:122;;7250:280;;;;:::o;7536:144::-;7637:4;7669;7664:3;7660:14;7652:22;;7536:144;;;:::o;7768:1159::-;7949:3;7978:85;8057:5;7978:85;:::i;:::-;8079:117;8189:6;8184:3;8079:117;:::i;:::-;8072:124;;8222:3;8267:4;8259:6;8255:17;8250:3;8246:27;8297:87;8378:5;8297:87;:::i;:::-;8407:7;8438:1;8423:459;8448:6;8445:1;8442:13;8423:459;;;8519:9;8513:4;8509:20;8504:3;8497:33;8570:6;8564:13;8598:126;8719:4;8704:13;8598:126;:::i;:::-;8590:134;;8747:91;8831:6;8747:91;:::i;:::-;8737:101;;8867:4;8862:3;8858:14;8851:21;;8483:399;8470:1;8467;8463:9;8458:14;;8423:459;;;8427:14;8898:4;8891:11;;8918:3;8911:10;;7954:973;;;;;7768:1159;;;;:::o;8933:497::-;9138:4;9176:2;9165:9;9161:18;9153:26;;9225:9;9219:4;9215:20;9211:1;9200:9;9196:17;9189:47;9253:170;9418:4;9409:6;9253:170;:::i;:::-;9245:178;;8933:497;;;;:::o;9436:90::-;9470:7;9513:5;9506:13;9499:21;9488:32;;9436:90;;;:::o;9532:116::-;9602:21;9617:5;9602:21;:::i;:::-;9595:5;9592:32;9582:60;;9638:1;9635;9628:12;9582:60;9532:116;:::o;9654:133::-;9697:5;9735:6;9722:20;9713:29;;9751:30;9775:5;9751:30;:::i;:::-;9654:133;;;;:::o;9793:323::-;9849:6;9898:2;9886:9;9877:7;9873:23;9869:32;9866:119;;;9904:79;;:::i;:::-;9866:119;10024:1;10049:50;10091:7;10082:6;10071:9;10067:22;10049:50;:::i;:::-;10039:60;;9995:114;9793:323;;;;:::o;10122:152::-;10227:6;10261:5;10255:12;10245:22;;10122:152;;;:::o;10280:222::-;10417:11;10451:6;10446:3;10439:19;10491:4;10486:3;10482:14;10467:29;;10280:222;;;;:::o;10508:170::-;10613:4;10636:3;10628:11;;10666:4;10661:3;10657:14;10649:22;;10508:170;;;:::o;10684:113::-;10750:6;10784:5;10778:12;10768:22;;10684:113;;;:::o;10803:173::-;10891:11;10925:6;10920:3;10913:19;10965:4;10960:3;10956:14;10941:29;;10803:173;;;;:::o;10982:131::-;11048:4;11071:3;11063:11;;11101:4;11096:3;11092:14;11084:22;;10982:131;;;:::o;11119:149::-;11155:7;11195:66;11188:5;11184:78;11173:89;;11119:149;;;:::o;11274:105::-;11349:23;11366:5;11349:23;:::i;:::-;11344:3;11337:36;11274:105;;:::o;11385:175::-;11452:10;11473:44;11513:3;11505:6;11473:44;:::i;:::-;11549:4;11544:3;11540:14;11526:28;;11385:175;;;;:::o;11566:112::-;11635:4;11667;11662:3;11658:14;11650:22;;11566:112;;;:::o;11712:704::-;11819:3;11848:53;11895:5;11848:53;:::i;:::-;11917:75;11985:6;11980:3;11917:75;:::i;:::-;11910:82;;12016:55;12065:5;12016:55;:::i;:::-;12094:7;12125:1;12110:281;12135:6;12132:1;12129:13;12110:281;;;12211:6;12205:13;12238:61;12295:3;12280:13;12238:61;:::i;:::-;12231:68;;12322:59;12374:6;12322:59;:::i;:::-;12312:69;;12170:221;12157:1;12154;12150:9;12145:14;;12110:281;;;12114:14;12407:3;12400:10;;11824:592;;;11712:704;;;;:::o;12514:730::-;12649:3;12685:4;12680:3;12676:14;12776:4;12769:5;12765:16;12759:23;12829:3;12823:4;12819:14;12812:4;12807:3;12803:14;12796:38;12855:73;12923:4;12909:12;12855:73;:::i;:::-;12847:81;;12700:239;13026:4;13019:5;13015:16;13009:23;13079:3;13073:4;13069:14;13062:4;13057:3;13053:14;13046:38;13105:101;13201:4;13187:12;13105:101;:::i;:::-;13097:109;;12949:268;13234:4;13227:11;;12654:590;12514:730;;;;:::o;13250:308::-;13395:10;13430:122;13548:3;13540:6;13430:122;:::i;:::-;13416:136;;13250:308;;;;:::o;13564:151::-;13672:4;13704;13699:3;13695:14;13687:22;;13564:151;;;:::o;13817:1215::-;14012:3;14041:92;14127:5;14041:92;:::i;:::-;14149:124;14266:6;14261:3;14149:124;:::i;:::-;14142:131;;14299:3;14344:4;14336:6;14332:17;14327:3;14323:27;14374:94;14462:5;14374:94;:::i;:::-;14491:7;14522:1;14507:480;14532:6;14529:1;14526:13;14507:480;;;14603:9;14597:4;14593:20;14588:3;14581:33;14654:6;14648:13;14682:140;14817:4;14802:13;14682:140;:::i;:::-;14674:148;;14845:98;14936:6;14845:98;:::i;:::-;14835:108;;14972:4;14967:3;14963:14;14956:21;;14567:420;14554:1;14551;14547:9;14542:14;;14507:480;;;14511:14;15003:4;14996:11;;15023:3;15016:10;;14017:1015;;;;;13817:1215;;;;:::o;15038:525::-;15257:4;15295:2;15284:9;15280:18;15272:26;;15344:9;15338:4;15334:20;15330:1;15319:9;15315:17;15308:47;15372:184;15551:4;15542:6;15372:184;:::i;:::-;15364:192;;15038:525;;;;:::o;15569:474::-;15637:6;15645;15694:2;15682:9;15673:7;15669:23;15665:32;15662:119;;;15700:79;;:::i;:::-;15662:119;15820:1;15845:53;15890:7;15881:6;15870:9;15866:22;15845:53;:::i;:::-;15835:63;;15791:117;15947:2;15973:53;16018:7;16009:6;15998:9;15994:22;15973:53;:::i;:::-;15963:63;;15918:118;15569:474;;;;;:::o;16049:194::-;16158:11;16192:6;16187:3;16180:19;16232:4;16227:3;16223:14;16208:29;;16049:194;;;;:::o;16277:991::-;16416:3;16445:64;16503:5;16445:64;:::i;:::-;16525:96;16614:6;16609:3;16525:96;:::i;:::-;16518:103;;16647:3;16692:4;16684:6;16680:17;16675:3;16671:27;16722:66;16782:5;16722:66;:::i;:::-;16811:7;16842:1;16827:396;16852:6;16849:1;16846:13;16827:396;;;16923:9;16917:4;16913:20;16908:3;16901:33;16974:6;16968:13;17002:84;17081:4;17066:13;17002:84;:::i;:::-;16994:92;;17109:70;17172:6;17109:70;:::i;:::-;17099:80;;17208:4;17203:3;17199:14;17192:21;;16887:336;16874:1;16871;16867:9;16862:14;;16827:396;;;16831:14;17239:4;17232:11;;17259:3;17252:10;;16421:847;;;;;16277:991;;;;:::o;17274:413::-;17437:4;17475:2;17464:9;17460:18;17452:26;;17524:9;17518:4;17514:20;17510:1;17499:9;17495:17;17488:47;17552:128;17675:4;17666:6;17552:128;:::i;:::-;17544:136;;17274:413;;;;:::o;17693:144::-;17790:6;17824:5;17818:12;17808:22;;17693:144;;;:::o;17843:214::-;17972:11;18006:6;18001:3;17994:19;18046:4;18041:3;18037:14;18022:29;;17843:214;;;;:::o;18063:162::-;18160:4;18183:3;18175:11;;18213:4;18208:3;18204:14;18196:22;;18063:162;;;:::o;18307:639::-;18426:3;18462:4;18457:3;18453:14;18549:4;18542:5;18538:16;18532:23;18568:63;18625:4;18620:3;18616:14;18602:12;18568:63;:::i;:::-;18477:164;18728:4;18721:5;18717:16;18711:23;18781:3;18775:4;18771:14;18764:4;18759:3;18755:14;18748:38;18807:101;18903:4;18889:12;18807:101;:::i;:::-;18799:109;;18651:268;18936:4;18929:11;;18431:515;18307:639;;;;:::o;18952:276::-;19081:10;19116:106;19218:3;19210:6;19116:106;:::i;:::-;19102:120;;18952:276;;;;:::o;19234:143::-;19334:4;19366;19361:3;19357:14;19349:22;;19234:143;;;:::o;19463:1151::-;19642:3;19671:84;19749:5;19671:84;:::i;:::-;19771:116;19880:6;19875:3;19771:116;:::i;:::-;19764:123;;19913:3;19958:4;19950:6;19946:17;19941:3;19937:27;19988:86;20068:5;19988:86;:::i;:::-;20097:7;20128:1;20113:456;20138:6;20135:1;20132:13;20113:456;;;20209:9;20203:4;20199:20;20194:3;20187:33;20260:6;20254:13;20288:124;20407:4;20392:13;20288:124;:::i;:::-;20280:132;;20435:90;20518:6;20435:90;:::i;:::-;20425:100;;20554:4;20549:3;20545:14;20538:21;;20173:396;20160:1;20157;20153:9;20148:14;;20113:456;;;20117:14;20585:4;20578:11;;20605:3;20598:10;;19647:967;;;;;19463:1151;;;;:::o;20620:493::-;20823:4;20861:2;20850:9;20846:18;20838:26;;20910:9;20904:4;20900:20;20896:1;20885:9;20881:17;20874:47;20938:168;21101:4;21092:6;20938:168;:::i;:::-;20930:176;;20620:493;;;;:::o;21119:109::-;21200:21;21215:5;21200:21;:::i;:::-;21195:3;21188:34;21119:109;;:::o;21234:210::-;21321:4;21359:2;21348:9;21344:18;21336:26;;21372:65;21434:1;21423:9;21419:17;21410:6;21372:65;:::i;:::-;21234:210;;;;:::o;21450:86::-;21485:7;21525:4;21518:5;21514:16;21503:27;;21450:86;;;:::o;21542:118::-;21613:22;21629:5;21613:22;:::i;:::-;21606:5;21603:33;21593:61;;21650:1;21647;21640:12;21593:61;21542:118;:::o;21666:135::-;21710:5;21748:6;21735:20;21726:29;;21764:31;21789:5;21764:31;:::i;:::-;21666:135;;;;:::o;21807:325::-;21864:6;21913:2;21901:9;21892:7;21888:23;21884:32;21881:119;;;21919:79;;:::i;:::-;21881:119;22039:1;22064:51;22107:7;22098:6;22087:9;22083:22;22064:51;:::i;:::-;22054:61;;22010:115;21807:325;;;;:::o;22138:94::-;22192:7;22221:5;22210:16;;22138:94;;;:::o;22238:60::-;22266:3;22287:5;22280:12;;22238:60;;;:::o;22304:176::-;22371:9;22404:70;22422:51;22431:41;22466:5;22431:41;:::i;:::-;22422:51;:::i;:::-;22404:70;:::i;:::-;22391:83;;22304:176;;;:::o;22486:165::-;22590:54;22638:5;22590:54;:::i;:::-;22585:3;22578:67;22486:165;;:::o;22657:256::-;22767:4;22805:2;22794:9;22790:18;22782:26;;22818:88;22903:1;22892:9;22888:17;22879:6;22818:88;:::i;:::-;22657:256;;;;:::o;22919:180::-;22967:77;22964:1;22957:88;23064:4;23061:1;23054:15;23088:4;23085:1;23078:15;23105:410;23145:7;23168:20;23186:1;23168:20;:::i;:::-;23163:25;;23202:20;23220:1;23202:20;:::i;:::-;23197:25;;23257:1;23254;23250:9;23279:30;23297:11;23279:30;:::i;:::-;23268:41;;23458:1;23449:7;23445:15;23442:1;23439:22;23419:1;23412:9;23392:83;23369:139;;23488:18;;:::i;:::-;23369:139;23153:362;23105:410;;;;:::o;23521:191::-;23561:3;23580:20;23598:1;23580:20;:::i;:::-;23575:25;;23614:20;23632:1;23614:20;:::i;:::-;23609:25;;23657:1;23654;23650:9;23643:16;;23678:3;23675:1;23672:10;23669:36;;;23685:18;;:::i;:::-;23669:36;23521:191;;;;:::o;23718:79::-;23757:7;23786:5;23775:16;;23718:79;;;:::o;23803:157::-;23908:45;23928:24;23946:5;23928:24;:::i;:::-;23908:45;:::i;:::-;23903:3;23896:58;23803:157;;:::o;23966:256::-;24078:3;24093:75;24164:3;24155:6;24093:75;:::i;:::-;24193:2;24188:3;24184:12;24177:19;;24213:3;24206:10;;23966:256;;;;:::o;24228:180::-;24276:77;24273:1;24266:88;24373:4;24370:1;24363:15;24397:4;24394:1;24387:15;24414:176;24446:1;24463:20;24481:1;24463:20;:::i;:::-;24458:25;;24497:20;24515:1;24497:20;:::i;:::-;24492:25;;24536:1;24526:35;;24541:18;;:::i;:::-;24526:35;24582:1;24579;24575:9;24570:14;;24414:176;;;;:::o;24596:180::-;24644:77;24641:1;24634:88;24741:4;24738:1;24731:15;24765:4;24762:1;24755:15;24782:118;24869:24;24887:5;24869:24;:::i;:::-;24864:3;24857:37;24782:118;;:::o;24906:222::-;24999:4;25037:2;25026:9;25022:18;25014:26;;25050:71;25118:1;25107:9;25103:17;25094:6;25050:71;:::i;:::-;24906:222;;;;:::o;25134:118::-;25221:24;25239:5;25221:24;:::i;:::-;25216:3;25209:37;25134:118;;:::o;25258:222::-;25351:4;25389:2;25378:9;25374:18;25366:26;;25402:71;25470:1;25459:9;25455:17;25446:6;25402:71;:::i;:::-;25258:222;;;;:::o;25486:180::-;25534:77;25531:1;25524:88;25631:4;25628:1;25621:15;25655:4;25652:1;25645:15;25672:180;25720:77;25717:1;25710:88;25817:4;25814:1;25807:15;25841:4;25838:1;25831:15;25858:320;25902:6;25939:1;25933:4;25929:12;25919:22;;25986:1;25980:4;25976:12;26007:18;25997:81;;26063:4;26055:6;26051:17;26041:27;;25997:81;26125:2;26117:6;26114:14;26094:18;26091:38;26088:84;;26144:18;;:::i;:::-;26088:84;25909:269;25858:320;;;:::o;26184:77::-;26221:7;26250:5;26239:16;;26184:77;;;:::o;26267:118::-;26354:24;26372:5;26354:24;:::i;:::-;26349:3;26342:37;26267:118;;:::o;26391:332::-;26512:4;26550:2;26539:9;26535:18;26527:26;;26563:71;26631:1;26620:9;26616:17;26607:6;26563:71;:::i;:::-;26644:72;26712:2;26701:9;26697:18;26688:6;26644:72;:::i;:::-;26391:332;;;;;:::o;26729:122::-;26802:24;26820:5;26802:24;:::i;:::-;26795:5;26792:35;26782:63;;26841:1;26838;26831:12;26782:63;26729:122;:::o;26857:143::-;26914:5;26945:6;26939:13;26930:22;;26961:33;26988:5;26961:33;:::i;:::-;26857:143;;;;:::o;27006:351::-;27076:6;27125:2;27113:9;27104:7;27100:23;27096:32;27093:119;;;27131:79;;:::i;:::-;27093:119;27251:1;27276:64;27332:7;27323:6;27312:9;27308:22;27276:64;:::i;:::-;27266:74;;27222:128;27006:351;;;;:::o;27363:169::-;27447:11;27481:6;27476:3;27469:19;27521:4;27516:3;27512:14;27497:29;;27363:169;;;;:::o;27538:377::-;27626:3;27654:39;27687:5;27654:39;:::i;:::-;27709:71;27773:6;27768:3;27709:71;:::i;:::-;27702:78;;27789:65;27847:6;27842:3;27835:4;27828:5;27824:16;27789:65;:::i;:::-;27879:29;27901:6;27879:29;:::i;:::-;27874:3;27870:39;27863:46;;27630:285;27538:377;;;;:::o;27921:423::-;28062:4;28100:2;28089:9;28085:18;28077:26;;28149:9;28143:4;28139:20;28135:1;28124:9;28120:17;28113:47;28177:78;28250:4;28241:6;28177:78;:::i;:::-;28169:86;;28265:72;28333:2;28322:9;28318:18;28309:6;28265:72;:::i;:::-;27921:423;;;;;:::o;28350:194::-;28390:4;28410:20;28428:1;28410:20;:::i;:::-;28405:25;;28444:20;28462:1;28444:20;:::i;:::-;28439:25;;28488:1;28485;28481:9;28473:17;;28512:1;28506:4;28503:11;28500:37;;;28517:18;;:::i;:::-;28500:37;28350:194;;;;:::o;28550:102::-;28592:8;28639:5;28636:1;28632:13;28611:34;;28550:102;;;:::o;28658:848::-;28719:5;28726:4;28750:6;28741:15;;28774:5;28765:14;;28788:712;28809:1;28799:8;28796:15;28788:712;;;28904:4;28899:3;28895:14;28889:4;28886:24;28883:50;;;28913:18;;:::i;:::-;28883:50;28963:1;28953:8;28949:16;28946:451;;;29378:4;29371:5;29367:16;29358:25;;28946:451;29428:4;29422;29418:15;29410:23;;29458:32;29481:8;29458:32;:::i;:::-;29446:44;;28788:712;;;28658:848;;;;;;;:::o;29512:1073::-;29566:5;29757:8;29747:40;;29778:1;29769:10;;29780:5;;29747:40;29806:4;29796:36;;29823:1;29814:10;;29825:5;;29796:36;29892:4;29940:1;29935:27;;;;29976:1;29971:191;;;;29885:277;;29935:27;29953:1;29944:10;;29955:5;;;29971:191;30016:3;30006:8;30003:17;30000:43;;;30023:18;;:::i;:::-;30000:43;30072:8;30069:1;30065:16;30056:25;;30107:3;30100:5;30097:14;30094:40;;;30114:18;;:::i;:::-;30094:40;30147:5;;;29885:277;;30271:2;30261:8;30258:16;30252:3;30246:4;30243:13;30239:36;30221:2;30211:8;30208:16;30203:2;30197:4;30194:12;30190:35;30174:111;30171:246;;;30327:8;30321:4;30317:19;30308:28;;30362:3;30355:5;30352:14;30349:40;;;30369:18;;:::i;:::-;30349:40;30402:5;;30171:246;30442:42;30480:3;30470:8;30464:4;30461:1;30442:42;:::i;:::-;30427:57;;;;30516:4;30511:3;30507:14;30500:5;30497:25;30494:51;;;30525:18;;:::i;:::-;30494:51;30574:4;30567:5;30563:16;30554:25;;29512:1073;;;;;;:::o;30591:285::-;30651:5;30675:23;30693:4;30675:23;:::i;:::-;30667:31;;30719:27;30737:8;30719:27;:::i;:::-;30707:39;;30765:104;30802:66;30792:8;30786:4;30765:104;:::i;:::-;30756:113;;30591:285;;;;:::o;30882:185::-;30922:1;30939:20;30957:1;30939:20;:::i;:::-;30934:25;;30973:20;30991:1;30973:20;:::i;:::-;30968:25;;31012:1;31002:35;;31017:18;;:::i;:::-;31002:35;31059:1;31056;31052:9;31047:14;;30882:185;;;;:::o;31073:179::-;31111:1;31128:18;31144:1;31128:18;:::i;:::-;31123:23;;31160:18;31176:1;31160:18;:::i;:::-;31155:23;;31197:1;31187:35;;31202:18;;:::i;:::-;31187:35;31244:1;31241;31237:9;31232:14;;31073:179;;;;:::o;31258:271::-;31296:7;31319:18;31335:1;31319:18;:::i;:::-;31314:23;;31351:18;31367:1;31351:18;:::i;:::-;31346:23;;31404:1;31401;31397:9;31426:28;31442:11;31426:28;:::i;:::-;31415:39;;31486:11;31477:7;31474:24;31464:58;;31502:18;;:::i;:::-;31464:58;31304:225;31258:271;;;;:::o;31535:191::-;31573:4;31593:18;31609:1;31593:18;:::i;:::-;31588:23;;31625:18;31641:1;31625:18;:::i;:::-;31620:23;;31667:1;31664;31660:9;31652:17;;31691:4;31685;31682:14;31679:40;;;31699:18;;:::i;:::-;31679:40;31535:191;;;;:::o;31732:514::-;31893:4;31931:2;31920:9;31916:18;31908:26;;31980:9;31974:4;31970:20;31966:1;31955:9;31951:17;31944:47;32008:78;32081:4;32072:6;32008:78;:::i;:::-;32000:86;;32133:9;32127:4;32123:20;32118:2;32107:9;32103:18;32096:48;32161:78;32234:4;32225:6;32161:78;:::i;:::-;32153:86;;31732:514;;;;;:::o;32252:98::-;32303:6;32337:5;32331:12;32321:22;;32252:98;;;:::o;32356:147::-;32457:11;32494:3;32479:18;;32356:147;;;;:::o;32509:386::-;32613:3;32641:38;32673:5;32641:38;:::i;:::-;32695:88;32776:6;32771:3;32695:88;:::i;:::-;32688:95;;32792:65;32850:6;32845:3;32838:4;32831:5;32827:16;32792:65;:::i;:::-;32882:6;32877:3;32873:16;32866:23;;32617:278;32509:386;;;;:::o;32901:271::-;33031:3;33053:93;33142:3;33133:6;33053:93;:::i;:::-;33046:100;;33163:3;33156:10;;32901:271;;;;:::o;33178:85::-;33223:7;33252:5;33241:16;;33178:85;;;:::o;33269:158::-;33327:9;33360:61;33378:42;33387:32;33413:5;33387:32;:::i;:::-;33378:42;:::i;:::-;33360:61;:::i;:::-;33347:74;;33269:158;;;:::o;33433:147::-;33528:45;33567:5;33528:45;:::i;:::-;33523:3;33516:58;33433:147;;:::o;33586:85::-;33631:7;33660:5;33649:16;;33586:85;;;:::o;33677:158::-;33735:9;33768:61;33786:42;33795:32;33821:5;33795:32;:::i;:::-;33786:42;:::i;:::-;33768:61;:::i;:::-;33755:74;;33677:158;;;:::o;33841:147::-;33936:45;33975:5;33936:45;:::i;:::-;33931:3;33924:58;33841:147;;:::o;33994:474::-;34159:4;34197:2;34186:9;34182:18;34174:26;;34210:71;34278:1;34267:9;34263:17;34254:6;34210:71;:::i;:::-;34291:80;34367:2;34356:9;34352:18;34343:6;34291:80;:::i;:::-;34381;34457:2;34446:9;34442:18;34433:6;34381:80;:::i;:::-;33994:474;;;;;;:::o;34474:143::-;34531:5;34562:6;34556:13;34547:22;;34578:33;34605:5;34578:33;:::i;:::-;34474:143;;;;:::o;34623:351::-;34693:6;34742:2;34730:9;34721:7;34717:23;34713:32;34710:119;;;34748:79;;:::i;:::-;34710:119;34868:1;34893:64;34949:7;34940:6;34929:9;34925:22;34893:64;:::i;:::-;34883:74;;34839:128;34623:351;;;;:::o;34980:87::-;35027:7;35056:5;35045:16;;34980:87;;;:::o;35073:162::-;35133:9;35166:63;35184:44;35193:34;35221:5;35193:34;:::i;:::-;35184:44;:::i;:::-;35166:63;:::i;:::-;35153:76;;35073:162;;;:::o;35241:151::-;35338:47;35379:5;35338:47;:::i;:::-;35333:3;35326:60;35241:151;;:::o;35398:478::-;35565:4;35603:2;35592:9;35588:18;35580:26;;35616:71;35684:1;35673:9;35669:17;35660:6;35616:71;:::i;:::-;35697:80;35773:2;35762:9;35758:18;35749:6;35697:80;:::i;:::-;35787:82;35865:2;35854:9;35850:18;35841:6;35787:82;:::i;:::-;35398:478;;;;;;:::o;35882:112::-;35965:22;35981:5;35965:22;:::i;:::-;35960:3;35953:35;35882:112;;:::o;36000:214::-;36089:4;36127:2;36116:9;36112:18;36104:26;;36140:67;36204:1;36193:9;36189:17;36180:6;36140:67;:::i;:::-;36000:214;;;;:::o;36220:164::-;36360:16;36356:1;36348:6;36344:14;36337:40;36220:164;:::o;36390:366::-;36532:3;36553:67;36617:2;36612:3;36553:67;:::i;:::-;36546:74;;36629:93;36718:3;36629:93;:::i;:::-;36747:2;36742:3;36738:12;36731:19;;36390:366;;;:::o;36762:529::-;36956:4;36994:2;36983:9;36979:18;36971:26;;37007:71;37075:1;37064:9;37060:17;37051:6;37007:71;:::i;:::-;37125:9;37119:4;37115:20;37110:2;37099:9;37095:18;37088:48;37153:131;37279:4;37153:131;:::i;:::-;37145:139;;36762:529;;;;:::o;37297:155::-;37437:7;37433:1;37425:6;37421:14;37414:31;37297:155;:::o;37458:365::-;37600:3;37621:66;37685:1;37680:3;37621:66;:::i;:::-;37614:73;;37696:93;37785:3;37696:93;:::i;:::-;37814:2;37809:3;37805:12;37798:19;;37458:365;;;:::o;37829:529::-;38023:4;38061:2;38050:9;38046:18;38038:26;;38074:71;38142:1;38131:9;38127:17;38118:6;38074:71;:::i;:::-;38192:9;38186:4;38182:20;38177:2;38166:9;38162:18;38155:48;38220:131;38346:4;38220:131;:::i;:::-;38212:139;;37829:529;;;;:::o;38364:155::-;38504:7;38500:1;38492:6;38488:14;38481:31;38364:155;:::o;38525:365::-;38667:3;38688:66;38752:1;38747:3;38688:66;:::i;:::-;38681:73;;38763:93;38852:3;38763:93;:::i;:::-;38881:2;38876:3;38872:12;38865:19;;38525:365;;;:::o;38896:529::-;39090:4;39128:2;39117:9;39113:18;39105:26;;39141:71;39209:1;39198:9;39194:17;39185:6;39141:71;:::i;:::-;39259:9;39253:4;39249:20;39244:2;39233:9;39229:18;39222:48;39287:131;39413:4;39287:131;:::i;:::-;39279:139;;38896:529;;;;:::o;39431:155::-;39571:7;39567:1;39559:6;39555:14;39548:31;39431:155;:::o;39592:365::-;39734:3;39755:66;39819:1;39814:3;39755:66;:::i;:::-;39748:73;;39830:93;39919:3;39830:93;:::i;:::-;39948:2;39943:3;39939:12;39932:19;;39592:365;;;:::o;39963:529::-;40157:4;40195:2;40184:9;40180:18;40172:26;;40208:71;40276:1;40265:9;40261:17;40252:6;40208:71;:::i;:::-;40326:9;40320:4;40316:20;40311:2;40300:9;40296:18;40289:48;40354:131;40480:4;40354:131;:::i;:::-;40346:139;;39963:529;;;;:::o;40498:188::-;40536:3;40555:18;40571:1;40555:18;:::i;:::-;40550:23;;40587:18;40603:1;40587:18;:::i;:::-;40582:23;;40628:1;40625;40621:9;40614:16;;40651:4;40646:3;40643:13;40640:39;;;40659:18;;:::i;:::-;40640:39;40498:188;;;;:::o;40692:179::-;40832:31;40828:1;40820:6;40816:14;40809:55;40692:179;:::o;40877:366::-;41019:3;41040:67;41104:2;41099:3;41040:67;:::i;:::-;41033:74;;41116:93;41205:3;41116:93;:::i;:::-;41234:2;41229:3;41225:12;41218:19;;40877:366;;;:::o;41249:517::-;41437:4;41475:2;41464:9;41460:18;41452:26;;41488:65;41550:1;41539:9;41535:17;41526:6;41488:65;:::i;:::-;41600:9;41594:4;41590:20;41585:2;41574:9;41570:18;41563:48;41628:131;41754:4;41628:131;:::i;:::-;41620:139;;41249:517;;;;:::o;41772:226::-;41912:34;41908:1;41900:6;41896:14;41889:58;41981:9;41976:2;41968:6;41964:15;41957:34;41772:226;:::o;42004:366::-;42146:3;42167:67;42231:2;42226:3;42167:67;:::i;:::-;42160:74;;42243:93;42332:3;42243:93;:::i;:::-;42361:2;42356:3;42352:12;42345:19;;42004:366;;;:::o;42376:517::-;42564:4;42602:2;42591:9;42587:18;42579:26;;42615:65;42677:1;42666:9;42662:17;42653:6;42615:65;:::i;:::-;42727:9;42721:4;42717:20;42712:2;42701:9;42697:18;42690:48;42755:131;42881:4;42755:131;:::i;:::-;42747:139;;42376:517;;;;:::o;42899:160::-;43039:12;43035:1;43027:6;43023:14;43016:36;42899:160;:::o;43065:366::-;43207:3;43228:67;43292:2;43287:3;43228:67;:::i;:::-;43221:74;;43304:93;43393:3;43304:93;:::i;:::-;43422:2;43417:3;43413:12;43406:19;;43065:366;;;:::o;43437:529::-;43631:4;43669:2;43658:9;43654:18;43646:26;;43718:9;43712:4;43708:20;43704:1;43693:9;43689:17;43682:47;43746:131;43872:4;43746:131;:::i;:::-;43738:139;;43887:72;43955:2;43944:9;43940:18;43931:6;43887:72;:::i;:::-;43437:529;;;;:::o;43972:221::-;44112:34;44108:1;44100:6;44096:14;44089:58;44181:4;44176:2;44168:6;44164:15;44157:29;43972:221;:::o;44199:366::-;44341:3;44362:67;44426:2;44421:3;44362:67;:::i;:::-;44355:74;;44438:93;44527:3;44438:93;:::i;:::-;44556:2;44551:3;44547:12;44540:19;;44199:366;;;:::o;44571:517::-;44759:4;44797:2;44786:9;44782:18;44774:26;;44810:65;44872:1;44861:9;44857:17;44848:6;44810:65;:::i;:::-;44922:9;44916:4;44912:20;44907:2;44896:9;44892:18;44885:48;44950:131;45076:4;44950:131;:::i;:::-;44942:139;;44571:517;;;;:::o;45094:220::-;45234:34;45230:1;45222:6;45218:14;45211:58;45303:3;45298:2;45290:6;45286:15;45279:28;45094:220;:::o;45320:366::-;45462:3;45483:67;45547:2;45542:3;45483:67;:::i;:::-;45476:74;;45559:93;45648:3;45559:93;:::i;:::-;45677:2;45672:3;45668:12;45661:19;;45320:366;;;:::o;45692:620::-;45906:4;45944:2;45933:9;45929:18;45921:26;;45993:9;45987:4;45983:20;45979:1;45968:9;45964:17;45957:47;46021:131;46147:4;46021:131;:::i;:::-;46013:139;;46199:9;46193:4;46189:20;46184:2;46173:9;46169:18;46162:48;46227:78;46300:4;46291:6;46227:78;:::i;:::-;46219:86;;45692:620;;;;:::o;46318:173::-;46458:25;46454:1;46446:6;46442:14;46435:49;46318:173;:::o;46497:366::-;46639:3;46660:67;46724:2;46719:3;46660:67;:::i;:::-;46653:74;;46736:93;46825:3;46736:93;:::i;:::-;46854:2;46849:3;46845:12;46838:19;;46497:366;;;:::o;46869:620::-;47083:4;47121:2;47110:9;47106:18;47098:26;;47170:9;47164:4;47160:20;47156:1;47145:9;47141:17;47134:47;47198:131;47324:4;47198:131;:::i;:::-;47190:139;;47376:9;47370:4;47366:20;47361:2;47350:9;47346:18;47339:48;47404:78;47477:4;47468:6;47404:78;:::i;:::-;47396:86;;46869:620;;;;:::o;47495:411::-;47630:4;47668:2;47657:9;47653:18;47645:26;;47681:65;47743:1;47732:9;47728:17;47719:6;47681:65;:::i;:::-;47793:9;47787:4;47783:20;47778:2;47767:9;47763:18;47756:48;47821:78;47894:4;47885:6;47821:78;:::i;:::-;47813:86;;47495:411;;;;;:::o;47912:221::-;48052:34;48048:1;48040:6;48036:14;48029:58;48121:4;48116:2;48108:6;48104:15;48097:29;47912:221;:::o;48139:366::-;48281:3;48302:67;48366:2;48361:3;48302:67;:::i;:::-;48295:74;;48378:93;48467:3;48378:93;:::i;:::-;48496:2;48491:3;48487:12;48480:19;;48139:366;;;:::o;48511:620::-;48725:4;48763:2;48752:9;48748:18;48740:26;;48812:9;48806:4;48802:20;48798:1;48787:9;48783:17;48776:47;48840:131;48966:4;48840:131;:::i;:::-;48832:139;;49018:9;49012:4;49008:20;49003:2;48992:9;48988:18;48981:48;49046:78;49119:4;49110:6;49046:78;:::i;:::-;49038:86;;48511:620;;;;:::o;49137:115::-;49222:23;49239:5;49222:23;:::i;:::-;49217:3;49210:36;49137:115;;:::o;49258:183::-;49356:11;49390:6;49385:3;49378:19;49430:4;49425:3;49421:14;49406:29;;49258:183;;;;:::o;49475:724::-;49592:3;49621:53;49668:5;49621:53;:::i;:::-;49690:85;49768:6;49763:3;49690:85;:::i;:::-;49683:92;;49799:55;49848:5;49799:55;:::i;:::-;49877:7;49908:1;49893:281;49918:6;49915:1;49912:13;49893:281;;;49994:6;49988:13;50021:61;50078:3;50063:13;50021:61;:::i;:::-;50014:68;;50105:59;50157:6;50105:59;:::i;:::-;50095:69;;49953:221;49940:1;49937;49933:9;49928:14;;49893:281;;;49897:14;50190:3;50183:10;;49597:602;;;49475:724;;;;:::o;50205:676::-;50420:4;50458:2;50447:9;50443:18;50435:26;;50471:69;50537:1;50526:9;50522:17;50513:6;50471:69;:::i;:::-;50587:9;50581:4;50577:20;50572:2;50561:9;50557:18;50550:48;50615:106;50716:4;50707:6;50615:106;:::i;:::-;50607:114;;50768:9;50762:4;50758:20;50753:2;50742:9;50738:18;50731:48;50796:78;50869:4;50860:6;50796:78;:::i;:::-;50788:86;;50205:676;;;;;;:::o;50887:533::-;51056:4;51094:2;51083:9;51079:18;51071:26;;51143:9;51137:4;51133:20;51129:1;51118:9;51114:17;51107:47;51171:78;51244:4;51235:6;51171:78;:::i;:::-;51163:86;;51259:72;51327:2;51316:9;51312:18;51303:6;51259:72;:::i;:::-;51341;51409:2;51398:9;51394:18;51385:6;51341:72;:::i;:::-;50887:533;;;;;;:::o;51426:168::-;51566:20;51562:1;51554:6;51550:14;51543:44;51426:168;:::o;51600:366::-;51742:3;51763:67;51827:2;51822:3;51763:67;:::i;:::-;51756:74;;51839:93;51928:3;51839:93;:::i;:::-;51957:2;51952:3;51948:12;51941:19;;51600:366;;;:::o;51972:529::-;52166:4;52204:2;52193:9;52189:18;52181:26;;52253:9;52247:4;52243:20;52239:1;52228:9;52224:17;52217:47;52281:131;52407:4;52281:131;:::i;:::-;52273:139;;52422:72;52490:2;52479:9;52475:18;52466:6;52422:72;:::i;:::-;51972:529;;;;:::o;52507:231::-;52647:34;52643:1;52635:6;52631:14;52624:58;52716:14;52711:2;52703:6;52699:15;52692:39;52507:231;:::o;52744:366::-;52886:3;52907:67;52971:2;52966:3;52907:67;:::i;:::-;52900:74;;52983:93;53072:3;52983:93;:::i;:::-;53101:2;53096:3;53092:12;53085:19;;52744:366;;;:::o;53116:517::-;53304:4;53342:2;53331:9;53327:18;53319:26;;53355:65;53417:1;53406:9;53402:17;53393:6;53355:65;:::i;:::-;53467:9;53461:4;53457:20;53452:2;53441:9;53437:18;53430:48;53495:131;53621:4;53495:131;:::i;:::-;53487:139;;53116:517;;;;:::o;53639:171::-;53779:23;53775:1;53767:6;53763:14;53756:47;53639:171;:::o;53816:366::-;53958:3;53979:67;54043:2;54038:3;53979:67;:::i;:::-;53972:74;;54055:93;54144:3;54055:93;:::i;:::-;54173:2;54168:3;54164:12;54157:19;;53816:366;;;:::o;54188:168::-;54271:11;54305:6;54300:3;54293:19;54345:4;54340:3;54336:14;54321:29;;54188:168;;;;:::o;54362:373::-;54448:3;54476:38;54508:5;54476:38;:::i;:::-;54530:70;54593:6;54588:3;54530:70;:::i;:::-;54523:77;;54609:65;54667:6;54662:3;54655:4;54648:5;54644:16;54609:65;:::i;:::-;54699:29;54721:6;54699:29;:::i;:::-;54694:3;54690:39;54683:46;;54452:283;54362:373;;;;:::o;54741:616::-;54953:4;54991:2;54980:9;54976:18;54968:26;;55040:9;55034:4;55030:20;55026:1;55015:9;55011:17;55004:47;55068:131;55194:4;55068:131;:::i;:::-;55060:139;;55246:9;55240:4;55236:20;55231:2;55220:9;55216:18;55209:48;55274:76;55345:4;55336:6;55274:76;:::i;:::-;55266:84;;54741:616;;;;:::o;55363:230::-;55503:34;55499:1;55491:6;55487:14;55480:58;55572:13;55567:2;55559:6;55555:15;55548:38;55363:230;:::o;55599:366::-;55741:3;55762:67;55826:2;55821:3;55762:67;:::i;:::-;55755:74;;55838:93;55927:3;55838:93;:::i;:::-;55956:2;55951:3;55947:12;55940:19;;55599:366;;;:::o;55971:517::-;56159:4;56197:2;56186:9;56182:18;56174:26;;56210:65;56272:1;56261:9;56257:17;56248:6;56210:65;:::i;:::-;56322:9;56316:4;56312:20;56307:2;56296:9;56292:18;56285:48;56350:131;56476:4;56350:131;:::i;:::-;56342:139;;55971:517;;;;:::o;56494:117::-;56603:1;56600;56593:12;56617:117;56726:1;56723;56716:12;56740:281;56823:27;56845:4;56823:27;:::i;:::-;56815:6;56811:40;56953:6;56941:10;56938:22;56917:18;56905:10;56902:34;56899:62;56896:88;;;56964:18;;:::i;:::-;56896:88;57004:10;57000:2;56993:22;56783:238;56740:281;;:::o;57027:129::-;57061:6;57088:20;;:::i;:::-;57078:30;;57117:33;57145:4;57137:6;57117:33;:::i;:::-;57027:129;;;:::o;57162:308::-;57224:4;57314:18;57306:6;57303:30;57300:56;;;57336:18;;:::i;:::-;57300:56;57374:29;57396:6;57374:29;:::i;:::-;57366:37;;57458:4;57452;57448:15;57440:23;;57162:308;;;:::o;57476:434::-;57565:5;57590:66;57606:49;57648:6;57606:49;:::i;:::-;57590:66;:::i;:::-;57581:75;;57679:6;57672:5;57665:21;57717:4;57710:5;57706:16;57755:3;57746:6;57741:3;57737:16;57734:25;57731:112;;;57762:79;;:::i;:::-;57731:112;57852:52;57897:6;57892:3;57887;57852:52;:::i;:::-;57571:339;57476:434;;;;;:::o;57930:355::-;57997:5;58046:3;58039:4;58031:6;58027:17;58023:27;58013:122;;58054:79;;:::i;:::-;58013:122;58164:6;58158:13;58189:90;58275:3;58267:6;58260:4;58252:6;58248:17;58189:90;:::i;:::-;58180:99;;58003:282;57930:355;;;;:::o;58291:524::-;58371:6;58420:2;58408:9;58399:7;58395:23;58391:32;58388:119;;;58426:79;;:::i;:::-;58388:119;58567:1;58556:9;58552:17;58546:24;58597:18;58589:6;58586:30;58583:117;;;58619:79;;:::i;:::-;58583:117;58724:74;58790:7;58781:6;58770:9;58766:22;58724:74;:::i;:::-;58714:84;;58517:291;58291:524;;;;:::o;58821:179::-;58961:31;58957:1;58949:6;58945:14;58938:55;58821:179;:::o;59006:366::-;59148:3;59169:67;59233:2;59228:3;59169:67;:::i;:::-;59162:74;;59245:93;59334:3;59245:93;:::i;:::-;59363:2;59358:3;59354:12;59347:19;;59006:366;;;:::o;59378:419::-;59544:4;59582:2;59571:9;59567:18;59559:26;;59631:9;59625:4;59621:20;59617:1;59606:9;59602:17;59595:47;59659:131;59785:4;59659:131;:::i;:::-;59651:139;;59378:419;;;:::o;59803:224::-;59943:34;59939:1;59931:6;59927:14;59920:58;60012:7;60007:2;59999:6;59995:15;59988:32;59803:224;:::o;60033:366::-;60175:3;60196:67;60260:2;60255:3;60196:67;:::i;:::-;60189:74;;60272:93;60361:3;60272:93;:::i;:::-;60390:2;60385:3;60381:12;60374:19;;60033:366;;;:::o;60405:419::-;60571:4;60609:2;60598:9;60594:18;60586:26;;60658:9;60652:4;60648:20;60644:1;60633:9;60629:17;60622:47;60686:131;60812:4;60686:131;:::i;:::-;60678:139;;60405:419;;;:::o;60830:222::-;60970:34;60966:1;60958:6;60954:14;60947:58;61039:5;61034:2;61026:6;61022:15;61015:30;60830:222;:::o;61058:366::-;61200:3;61221:67;61285:2;61280:3;61221:67;:::i;:::-;61214:74;;61297:93;61386:3;61297:93;:::i;:::-;61415:2;61410:3;61406:12;61399:19;;61058:366;;;:::o;61430:419::-;61596:4;61634:2;61623:9;61619:18;61611:26;;61683:9;61677:4;61673:20;61669:1;61658:9;61654:17;61647:47;61711:131;61837:4;61711:131;:::i;:::-;61703:139;;61430:419;;;:::o;61855:221::-;61995:34;61991:1;61983:6;61979:14;61972:58;62064:4;62059:2;62051:6;62047:15;62040:29;61855:221;:::o;62082:366::-;62224:3;62245:67;62309:2;62304:3;62245:67;:::i;:::-;62238:74;;62321:93;62410:3;62321:93;:::i;:::-;62439:2;62434:3;62430:12;62423:19;;62082:366;;;:::o;62454:419::-;62620:4;62658:2;62647:9;62643:18;62635:26;;62707:9;62701:4;62697:20;62693:1;62682:9;62678:17;62671:47;62735:131;62861:4;62735:131;:::i;:::-;62727:139;;62454:419;;;:::o;62879:181::-;63019:33;63015:1;63007:6;63003:14;62996:57;62879:181;:::o;63066:366::-;63208:3;63229:67;63293:2;63288:3;63229:67;:::i;:::-;63222:74;;63305:93;63394:3;63305:93;:::i;:::-;63423:2;63418:3;63414:12;63407:19;;63066:366;;;:::o;63438:419::-;63604:4;63642:2;63631:9;63627:18;63619:26;;63691:9;63685:4;63681:20;63677:1;63666:9;63662:17;63655:47;63719:131;63845:4;63719:131;:::i;:::-;63711:139;;63438:419;;;:::o;63863:220::-;64003:34;63999:1;63991:6;63987:14;63980:58;64072:3;64067:2;64059:6;64055:15;64048:28;63863:220;:::o;64089:366::-;64231:3;64252:67;64316:2;64311:3;64252:67;:::i;:::-;64245:74;;64328:93;64417:3;64328:93;:::i;:::-;64446:2;64441:3;64437:12;64430:19;;64089:366;;;:::o;64461:419::-;64627:4;64665:2;64654:9;64650:18;64642:26;;64714:9;64708:4;64704:20;64700:1;64689:9;64685:17;64678:47;64742:131;64868:4;64742:131;:::i;:::-;64734:139;;64461:419;;;:::o;64886:224::-;65026:34;65022:1;65014:6;65010:14;65003:58;65095:7;65090:2;65082:6;65078:15;65071:32;64886:224;:::o;65116:366::-;65258:3;65279:67;65343:2;65338:3;65279:67;:::i;:::-;65272:74;;65355:93;65444:3;65355:93;:::i;:::-;65473:2;65468:3;65464:12;65457:19;;65116:366;;;:::o;65488:419::-;65654:4;65692:2;65681:9;65677:18;65669:26;;65741:9;65735:4;65731:20;65727:1;65716:9;65712:17;65705:47;65769:131;65895:4;65769:131;:::i;:::-;65761:139;;65488:419;;;:::o;65913:221::-;66053:34;66049:1;66041:6;66037:14;66030:58;66122:4;66117:2;66109:6;66105:15;66098:29;65913:221;:::o;66140:366::-;66282:3;66303:67;66367:2;66362:3;66303:67;:::i;:::-;66296:74;;66379:93;66468:3;66379:93;:::i;:::-;66497:2;66492:3;66488:12;66481:19;;66140:366;;;:::o;66512:419::-;66678:4;66716:2;66705:9;66701:18;66693:26;;66765:9;66759:4;66755:20;66751:1;66740:9;66736:17;66729:47;66793:131;66919:4;66793:131;:::i;:::-;66785:139;;66512:419;;;:::o;66937:225::-;67077:34;67073:1;67065:6;67061:14;67054:58;67146:8;67141:2;67133:6;67129:15;67122:33;66937:225;:::o;67168:366::-;67310:3;67331:67;67395:2;67390:3;67331:67;:::i;:::-;67324:74;;67407:93;67496:3;67407:93;:::i;:::-;67525:2;67520:3;67516:12;67509:19;;67168:366;;;:::o;67540:419::-;67706:4;67744:2;67733:9;67729:18;67721:26;;67793:9;67787:4;67783:20;67779:1;67768:9;67764:17;67757:47;67821:131;67947:4;67821:131;:::i;:::-;67813:139;;67540:419;;;:::o;67965:180::-;68013:77;68010:1;68003:88;68110:4;68107:1;68100:15;68134:4;68131:1;68124:15","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","fuzz_guided_sampleFunctionCallTwice(uint256,uint256)":"7a24d15d","fuzz_sampleFailReturnEmptyData(bool)":"41128bc8","fuzz_sampleFailWithAssert(uint256)":"2734aab6","fuzz_sampleFailWithCustomError(uint8)":"d59e1d2c","fuzz_sampleFailWithPanic(uint256)":"61583d90","fuzz_sampleFailWithRequire(bool)":"57cee9aa","fuzz_sampleFunction(uint256)":"a99867d0","setUp()":"0a9254e4","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23","test_coverage_SampleFunction()":"ad36ac56","test_repro_ERR_01_01()":"0e96a923","test_repro_ERR_01_02()":"d469e84e","test_repro_ERR_01_03()":"eb970f49","test_repro_ERR_01_04()":"aed1d4cd","test_repro_ERR_01_05()":"207b395c","test_repro_INV_01()":"f32edd76"}}}},"test/fuzzing/FuzzGuided.sol":{"FuzzGuided":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"fuzz_guided_sampleFunctionCallTwice","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"},{"name":"sampleInput2","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailReturnEmptyData","inputs":[{"name":"sampleInput","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithAssert","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithCustomError","inputs":[{"name":"sampleNum","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithPanic","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithRequire","inputs":[{"name":"sampleInput","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFunction","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"LogAddress","inputs":[{"name":"actor","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sampleInput2\",\"type\":\"uint256\"}],\"name\":\"fuzz_guided_sampleFunctionCallTwice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sampleInput\",\"type\":\"bool\"}],\"name\":\"fuzz_sampleFailReturnEmptyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFailWithAssert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sampleNum\",\"type\":\"uint8\"}],\"name\":\"fuzz_sampleFailWithCustomError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFailWithPanic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sampleInput\",\"type\":\"bool\"}],\"name\":\"fuzz_sampleFailWithRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/FuzzGuided.sol\":\"FuzzGuided\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzGuided.sol\":{\"keccak256\":\"0x310d52cb020b85793805ba116e390d971cfa6525192109e18e2b976b0e5e4455\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://998f38f12e5fa3db902192f8e1b887d3295ddd15df6b59c2c279d8240afea0dc\",\"dweb:/ipfs/Qmes44NmhDCrH8KYQ8o1ZUom5Ak61YqKVivMEpk7xkUhJw\"]},\"test/fuzzing/FuzzSampleContract.sol\":{\"keccak256\":\"0x0a9ab520029e8fd54a88eb1d168dbdbc7521ce59b5ddfb0fd8c3fd4659688037\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0668ec628afd58fe3a2ddd14e051e3b9f358763dee70820ad5c352be1c995ecd\",\"dweb:/ipfs/QmaeCJ339gt337isPt5MNpSdfSVJDhT2qThGnZjGUZW6QQ\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/helpers/postconditions/PostconditionsBase.sol\":{\"keccak256\":\"0x7620b7f61fcb7e3607679cd40ab9b9fe08ba0753144c3fa16a979f30c7b697bd\",\"urls\":[\"bzz-raw://ac6bc39ae3e07aa7faf390ff8418d680c92b1abe9be3bc459c91fcac243e8b7f\",\"dweb:/ipfs/QmPEnrqNCfrnjrBYZj6S54kBqsVfWx3veSJbXkhqfY8Hjr\"]},\"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol\":{\"keccak256\":\"0xe0b6dfd287772112457c1815e260b672fa4a44eddc8e941bd7e7b7f442cc3f12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://176b618cd965a52efd124215b6d7181e3d852506a34ccf65c80eca366ea5cb52\",\"dweb:/ipfs/QmdyLkLSdU4Kq535JMRxXhcezqn5teK7tb57dGKymmRhKr\"]},\"test/fuzzing/helpers/preconditions/PreconditionsBase.sol\":{\"keccak256\":\"0x97170e06bf494e439c413c6208c5a43f7eadc3d1d6df9a9fe46090057a0e9cae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dc268531095ff7bd00c314e91e78e9b3448008e994c6d84d64d5593355eef4\",\"dweb:/ipfs/QmWmn3tjw7n6qzE6eUgrZ5hZJyVAHMR5dPZsHhnf6jYCh8\"]},\"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol\":{\"keccak256\":\"0x82df89f1b0ff934319ada37fe548c8c94afa1ad0dce56ba1903bd3772e19a456\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dadbd2920843037f75e7d6db220fbacd5c10e8781ef67723b2c1e96b89ac6466\",\"dweb:/ipfs/QmZC7dutMBKeSrqa9Z6DhXpWdamzvUBpWomiheibKV12yQ\"]},\"test/fuzzing/properties/Properties.sol\":{\"keccak256\":\"0xf9182045d5b5f54b24b43a79510b0683415d922ac2b2a6e00321e4084dcff499\",\"urls\":[\"bzz-raw://7e90e9737ec7f84afad701476f596fa5a1d5d0b4120ad3124ae865e8cd4698dd\",\"dweb:/ipfs/QmVNFwyrXGk8VkPScstJo6ZSGuVAY7DLv7aDzCK1jyxJoe\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/properties/Properties_ERR.sol\":{\"keccak256\":\"0x1a72ed86c160f1003cf577e117b9da09614d3ab3519e1aad621a1a35433fb488\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1028b0388ba604c47cb93b24ac5e5a9e569d623ea0e9824fc7ed0ac1f72cf2a0\",\"dweb:/ipfs/QmRwu894BMcJ4C7GQ7M5oMAcqyCRjKnuQZJHn89efn51yc\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/FuzzGuided.sol:FuzzGuided","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"98:253:36:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;98:253:36;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;98:253:36;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;98:253:36:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"","sourceMap":"98:253:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2297:500:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3823:151:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2803:522:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;763:502;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1796:495;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3193:186:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;146:203:36;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3047:140:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;287:470:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2754:147:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1271:519:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;2297:500:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;2386:40:37::1;2429:46;2463:11;2429:33;:46::i;:::-;2386:89;;2486:31;2534:1;2520:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2486:50;;2566:12;;;;;;;;;;;2546:14;2561:1;2546:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;2588:23;2596:14;2588:7;:23::i;:::-;2623:12;2637:23:::0;2664:44:::1;2690:6;:17;;;2664:25;:44::i;:::-;2622:86;;;;2719:71;2754:7;2763:10;2775:14;2719:34;:71::i;:::-;2376:421;;;;2297:500:::0;:::o;3823:151:5:-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;2803:522:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;2894:45:37::1;2942:51;2981:11;2942:38;:51::i;:::-;2894:99;;3004:31;3052:1;3038:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3004:50;;3084:12;;;;;;;;;;;3064:14;3079:1;3064:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;3106:23;3114:14;3106:7;:23::i;:::-;3141:12;3155:23:::0;3182:49:::1;3213:6;:17;;;3182:30;:49::i;:::-;3140:91;;;;3242:76;3282:7;3291:10;3303:14;3242:39;:76::i;:::-;2884:441;;;;2803:522:::0;:::o;763:502::-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;850:41:37::1;894:47;929:11;894:34;:47::i;:::-;850:91;;952:31;1000:1;986:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;952:50;;1032:12;;;;;;;;;;;1012:14;1027:1;1012:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;1054:23;1062:14;1054:7;:23::i;:::-;1089:12;1103:23:::0;1130:45:::1;1157:6;:17;;;1130:26;:45::i;:::-;1088:87;;;;1186:72;1222:7;1231:10;1243:14;1186:35;:72::i;:::-;840:425;;;;763:502:::0;:::o;1796:495::-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;1884:39:37::1;1926:45;1959:11;1926:32;:45::i;:::-;1884:87;;1982:31;2030:1;2016:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1982:50;;2062:12;;;;;;;;;;;2042:14;2057:1;2042:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;2084:23;2092:14;2084:7;:23::i;:::-;2119:12;2133:23:::0;2160:43:::1;2185:6;:17;;;2160:24;:43::i;:::-;2118:85;;;;2214:70;2248:7;2257:10;2269:14;2214:33;:70::i;:::-;1874:417;;;;1796:495:::0;:::o;3193:186:5:-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;146:203:36:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;267:32:36::1;287:11;267:19;:32::i;:::-;309:33;329:12;309:19;:33::i;:::-;146:203:::0;;:::o;3047:140:5:-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;287:470:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;370:34:37::1;407:40;435:11;407:27;:40::i;:::-;370:77;;458:31;506:1;492:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;458:50;;538:12;;;;;;;;;;;518:14;533:1;518:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;560:23;568:14;560:7;:23::i;:::-;595:12;609:23:::0;636:38:::1;656:6;:17;;;636:19;:38::i;:::-;594:80;;;;685:65;714:7;723:10;735:14;685:28;:65::i;:::-;360:397;;;;287:470:::0;:::o;2754:147:5:-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;1271:519:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;1361:45:37::1;1409:49;1448:9;1409:38;:49::i;:::-;1361:97;;1469:31;1517:1;1503:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1469:50;;1549:12;;;;;;;;;;;1529:14;1544:1;1529:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;1571:23;1579:14;1571:7;:23::i;:::-;1606:12;1620:23:::0;1647:49:::1;1678:6;:17;;;1647:30;:49::i;:::-;1605:91;;;;1707:76;1747:7;1756:10;1768:14;1707:39;:76::i;:::-;1351:439;;;;1271:519:::0;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;2367:179:44:-;2451:7;2532:4;446:10:41;2512:9:44;:17;;;;:::i;:::-;:24;;;;:::i;:::-;2495:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;2485:53;;;;;;2477:62;;2470:69;;2367:179;;;;:::o;7032:139:14:-;7096:68;7156:2;7160;7112:51;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7096:15;:68::i;:::-;7032:139;;:::o;2552:464:44:-;2608:17;2637:14;2664:2;2654:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2637:30;;2682:9;2677:307;2701:2;2697:1;:6;2677:307;;;2724:8;2791:1;2786:2;:6;;;;:::i;:::-;2781:1;:12;;;;:::i;:::-;2775:1;:19;;;;:::i;:::-;2764:5;2748:23;;:47;;;;:::i;:::-;2735:62;;2724:73;;2811:9;2841:2;2836:1;2830:8;;:13;;;;:::i;:::-;2823:21;;2811:33;;2858:9;2899:2;2893:9;;2888:2;:14;;;;:::i;:::-;2883:1;2877:8;;:25;;;;:::i;:::-;2870:33;;2858:45;;2928:8;2933:2;2928:4;:8::i;:::-;2917:1;2923;2919;:5;;;;:::i;:::-;2917:8;;;;;;;;:::i;:::-;;;;;:19;;;;;;;;;;;2965:8;2970:2;2965:4;:8::i;:::-;2950:1;2960;2956;2952;:5;;;;:::i;:::-;:9;;;;:::i;:::-;2950:12;;;;;;;;:::i;:::-;;;;;:23;;;;;;;;;;;2710:274;;;2705:3;;;;;;;2677:307;;;;3007:1;2993:16;;;2552:464;;;:::o;7320:150:14:-;7393:70;7455:2;7459;7409:53;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7393:15;:70::i;:::-;7320:150;;:::o;951:192:45:-;1049:40;;:::i;:::-;1125:11;1105:6;:17;;:31;;;;;951:192;;;:::o;755:89:40:-;816:21;827:1;830:6;816:10;:21::i;:::-;755:89;:::o;1618:319:51:-;1692:12;1706:23;317:28:0;309:37;;1741:8:51;;;1750:12;;;;;;;;;;;1741:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1805:14;;;;;;;;;;;1797:28;;1862:44;;;1908:11;1839:81;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1797:133;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1773:157;;;;;;;;1618:319;;;:::o;1450:295:43:-;1601:7;1597:142;;;1624:38;1651:10;1624:26;:38::i;:::-;1597:142;;;1693:35;1717:10;1693:23;:35::i;:::-;1597:142;1450:295;;;:::o;1149:199:45:-;1249:45;;:::i;:::-;1330:11;1310:6;:17;;:31;;;;;;;;;;;1149:199;;;:::o;1943:346:51:-;2035:12;2049:23;317:28:0;309:37;;2088:8:51;;;2097:12;;;;;;;;;;;2088:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2152:14;;;;;;;;;;;2144:28;;2209:49;;;2260:11;2186:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2144:138;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2120:162;;;;;;;;1943:346;;;:::o;1751:318:43:-;1925:7;1921:142;;;1948:38;1975:10;1948:26;:38::i;:::-;1921:142;;;2017:35;2041:10;2017:23;:35::i;:::-;1921:142;1751:318;;;:::o;340:191:45:-;436:41;;:::i;:::-;513:11;493:6;:17;;:31;;;;;;;;;;;340:191;;;:::o;618:318:51:-;690:12;704:23;317:28:0;309:37;;739:8:51;;;748:12;;;;;;;;;;;739:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;803:14;;;;;;;;;;;795:28;;860:45;;;907:11;837:82;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;795:134;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;771:158;;;;;;;;618:318;;;:::o;524:296:43:-;676:7;672:142;;;699:38;726:10;699:26;:38::i;:::-;672:142;;;768:35;792:10;768:23;:35::i;:::-;672:142;524:296;;;:::o;739:206:45:-;836:39;;:::i;:::-;911:2;;;;;;;;;;:8;;;920:11;933:1;936;911:27;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;891:6;:17;;:47;;;;;739:206;;;:::o;1295:317:51:-;1368:12;1382:23;317:28:0;309:37;;1417:8:51;;;1426:12;;;;;;;;;;;1417:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1481:14;;;;;;;;;;;1473:28;;1538:43;;;1583:11;1515:80;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1473:132;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1449:156;;;;;;;;1295:317;;;:::o;1150:294:43:-;1300:7;1296:142;;;1323:38;1350:10;1323:26;:38::i;:::-;1296:142;;;1392:35;1416:10;1392:23;:35::i;:::-;1296:142;1150:294;;;:::o;156:178:45:-;232:34;;:::i;:::-;298:2;;;;;;;;;;:8;;;307:11;320:1;323:3;298:29;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;278:6;:17;;:49;;;;;156:178;;;:::o;268:344:51:-;336:12;350:23;390:31;409:11;390:31;;;;;;:::i;:::-;;;;;;;;317:28:0;309:37;;432:8:51;;;441:12;;;;;;;;;;;432:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;508:14;;;;;;;;;;;500:28;;552:38;;;592:11;529:75;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;500:105;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;464:141;;;;;;;;268:344;;;:::o;159:359:43:-;304:7;300:212;;;327:22;334:14;327:6;:22::i;:::-;364:18;:16;:18::i;:::-;;397:38;424:10;397:26;:38::i;:::-;300:212;;;466:35;490:10;466:23;:35::i;:::-;300:212;159:359;;;:::o;537:196:45:-;636:45;;:::i;:::-;717:9;697:6;:17;;:29;;;;;;;;;;;537:196;;;:::o;942:347:51:-;1035:12;1049:23;317:28:0;309:37;;1088:8:51;;;1097:12;;;;;;;;;;;1088:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1152:14;;;;;;;;;;;1144:28;;1209:49;;;1260:11;1186:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1144:138;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:162;;;;;;;;942:347;;;:::o;826:318:43:-;1000:7;996:142;;;1023:38;1050:10;1023:26;:38::i;:::-;996:142;;;1092:35;1116:10;1092:23;:35::i;:::-;996:142;826:318;;;:::o;408:133:14:-;479:55;526:7;479:46;505:19;479:25;:46::i;:::-;:55;;:::i;:::-;408:133;:::o;3022:168:44:-;3069:8;3104:2;3099:1;3093:8;;:13;;;3089:94;;;3133:4;3128:1;3122:8;;:15;;;;:::i;:::-;3115:23;;3108:30;;;;3089:94;3178:4;3173:1;3167:8;;:15;;;;:::i;:::-;3160:23;;3153:30;;3022:168;;;;:::o;944:154:40:-;1023:31;1038:7;1047:6;1023:14;:31::i;:::-;1064:27;1083:7;1064:18;:27::i;:::-;944:154;;:::o;117:106:42:-;197:19;:17;:19::i;:::-;;117:106;:::o;229:109::-;306:25;320:10;306:13;:25::i;:::-;229:109;:::o;850:88:40:-;910:21;921:1;924:6;910:10;:21::i;:::-;850:88;:::o;541:85:46:-;592:4;615;608:11;;541:85;:::o;547:380:14:-;621:21;645:7;:14;621:38;;669:22;131:42;669:40;;818:2;809:7;805:16;909:1;906;891:13;877:12;861:14;854:5;843:68;771:150;;;;547:380;:::o;181:221::-;296:42;382:4;373:13;;181:221;;;:::o;1104:191:40:-;1191:9;1186:103;1210:6;:13;1206:1;:17;1186:103;;;1244:34;1259:7;1268:6;1275:1;1268:9;;;;;;;;:::i;:::-;;;;;;;;1244:14;:34::i;:::-;1225:3;;;;;;;1186:103;;;;1104:191;;:::o;1301:100::-;1362:32;1386:7;1362:23;:32::i;:::-;1301:100;:::o;274:86:46:-;326:4;349;342:11;;274:86;:::o;149:915:49:-;273:1;252:10;:17;:22;248:267;;893:4:41;290:194:49;;;333:2;;;;;;;;;;:4;;;338:5;333:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;290:194;;;416:2;;;;;;;;;;:4;;;421;416:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;290:194;498:7;;248:267;525:20;617:4;605:10;601:21;595:28;578:45;;702:27;678:52;;;:13;:52;;;;674:127;;746:24;759:10;746:12;:24::i;:::-;784:7;;;674:127;878:26;854:51;;;:13;:51;;;;850:126;;921:24;934:10;921:12;:24::i;:::-;959:7;;;850:126;1027:30;1046:10;1027:18;:30::i;:::-;206:858;149:915;;:::o;1407:123:40:-;1488:35;1508:7;1517:5;1488:19;:35::i;:::-;1407:123;;:::o;1764:240::-;1831:88;;;;;;;;;;;;;;;;;;1878:7;1831:88;;1895:14;;;;;;;;;;;1887:31;;;1831:11;:88::i;:::-;1974:14;;;;;;;;;;;1966:31;;;1929:6;:15;1936:7;1929:15;;;;;;;;;;;;;;;:34;;:68;;;;1764:240;:::o;2465:558:49:-;2530:17;2550:29;2568:10;2550:17;:29::i;:::-;2530:49;;2589:29;2621:23;:21;:23::i;:::-;2589:55;;2654:14;2692:9;2687:180;2711:12;:19;2707:1;:23;2687:180;;;2768:12;2781:1;2768:15;;;;;;;;:::i;:::-;;;;;;;;2755:9;:28;2751:106;;2815:4;2803:16;;2837:5;;2751:106;2732:3;;;;;;;2687:180;;;;2877:2;;;;;;;;;;:6;;;2906:9;2898:18;;2877:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2932:9;2927:90;;2957:2;;;;;;;;;;:4;;;2962:5;2957:49;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2927:90;2520:503;;;2465:558;:::o;3029:415::-;3094:23;3120:33;3142:10;3120:21;:33::i;:::-;3094:59;;3163:2;;;;;;;;;;:6;;;3207:9;3163:54;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3232:32;3253:10;3232:20;:32::i;:::-;3228:127;;;3280:2;;;;;;;;;;:6;;;3314:9;3280:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3338:7;;;3228:127;793:4:41;3365:73:49;;;3405:2;;;;;;;;;;:4;;;3410:5;3417:9;3405:22;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3365:73;3084:360;3029:415;;:::o;3450:346::-;3521:20;3613:4;3601:10;3597:21;3591:28;3574:45;;3639:2;;;;;;;;;;:6;;;3684:33;3706:10;3684:21;:33::i;:::-;3639:79;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3728:2;;;;;;;;;;:11;;;3740:13;3755:25;:23;:25::i;:::-;3782:6;;;;;;;;;;;;;;;;;3728:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3511:285;3450:346;:::o;1536:222:40:-;1613:65;;;;;;;;;;;;;;;;;;1656:7;1613:65;;1665:4;:12;;;1613:11;:65::i;:::-;1739:4;:12;;;1688:6;:15;1695:7;1688:15;;;;;;;;;;;;;;;:27;;:33;1716:4;1688:33;;;;;;;;;;;;;;;:48;;:63;;;;1536:222;;:::o;11470:157:14:-;11543:77;11608:2;11612;11616;11559:60;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11543:15;:77::i;:::-;11470:157;;;:::o;3802:420:49:-;3871:7;3890:2;;;;;;;;;;;:6;;;3919:10;:17;3890:47;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3971:2;3951:10;:17;:22;3947:134;;;3989:2;;;;;;;;;;:4;;;3994:5;3989:59;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4069:1;4062:8;;;;3947:134;4091:17;4176:2;4164:10;4160:19;4154:26;4141:39;;4206:9;4199:16;;;3802:420;;;;:::o;249:404:50:-;322:16;350:27;394:1;380:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;350:46;;2043:4:53;406:10:50;417:1;406:13;;;;;;;;:::i;:::-;;;;;;;:40;;;;;2176:4:53;456:10:50;467:1;456:13;;;;;;;;:::i;:::-;;;;;;;:37;;;;;2240:4:53;503:10:50;514:1;503:13;;;;;;;;:::i;:::-;;;;;;;:41;;;;;1919:4:53;554:10:50;565:1;554:13;;;;;;;;:::i;:::-;;;;;;;:32;;;;;636:10;629:17;;;249:404;:::o;4228:454:49:-;4302:13;4352:2;4331:11;:18;:23;4327:219;;;4370:2;;;;;;;;;;:6;;;4402:11;4370:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4428:2;;;;;;;;;;:4;;;4433:5;4428:58;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4500:35;;;;;;;;;;;;;;;;;;;;;4327:219;4611:4;4598:11;4594:22;4579:37;;4653:11;4642:33;;;;;;;;;;;;:::i;:::-;4635:40;;4228:454;;;;:::o;905:790:50:-;1000:4;1016:28;1059:1;1047:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1016:45;;468:26:53;438:91;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1071:13:50;1085:1;1071:16;;;;;;;;:::i;:::-;;;;;;;:41;;;;618:26:53;588:99;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1122:13:50;1136:1;1122:16;;;;;;;;:::i;:::-;;;;;;;:37;;;;774:26:53;744:97;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1169:13:50;1183:1;1169:16;;;;;;;;:::i;:::-;;;;;;;:35;;;;927:26:53;897:96;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1214:13:50;1228:1;1214:16;;;;;;;;:::i;:::-;;;;;;;:34;;;;1076:26:53;1046:93;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1258:13:50;1272:1;1258:16;;;;;;;;:::i;:::-;;;;;;;:31;;;;1224:26:53;1194:95;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1299:13:50;1313:1;1299:16;;;;;;;;:::i;:::-;;;;;;;:33;;;;1379:26:53;1349:99;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1342:13:50;1356:1;1342:16;;;;;;;;:::i;:::-;;;;;;;:38;;;;1539:26:53;1509:96;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1390:13:50;1404:1;1390:16;;;;;;;;:::i;:::-;;;;;;;:39;;;;305:26:53;275:100;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1439:13:50;1453:1;1439:16;;;;;;;;:::i;:::-;;;;;;;:40;;;;1495:9;1490:177;1514:13;:20;1510:1;:24;1490:177;;;1594:13;1608:1;1594:16;;;;;;;;:::i;:::-;;;;;;;;1584:27;;;;;;1569:10;1559:21;;;;;;:52;1555:102;;1638:4;1631:11;;;;;;1555:102;1536:3;;;;;;;1490:177;;;;1683:5;1676:12;;;905:790;;;;:::o;659:240::-;734:15;761:29;806:1;793:15;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;761:47;;879:13;872:20;;;659:240;:::o;-1:-1:-1:-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:75::-;2287:6;2320:2;2314:9;2304:19;;2254:75;:::o;2335:117::-;2444:1;2441;2434:12;2458:117;2567:1;2564;2557:12;2581:77;2618:7;2647:5;2636:16;;2581:77;;;:::o;2664:122::-;2737:24;2755:5;2737:24;:::i;:::-;2730:5;2727:35;2717:63;;2776:1;2773;2766:12;2717:63;2664:122;:::o;2792:139::-;2838:5;2876:6;2863:20;2854:29;;2892:33;2919:5;2892:33;:::i;:::-;2792:139;;;;:::o;2937:329::-;2996:6;3045:2;3033:9;3024:7;3020:23;3016:32;3013:119;;;3051:79;;:::i;:::-;3013:119;3171:1;3196:53;3241:7;3232:6;3221:9;3217:22;3196:53;:::i;:::-;3186:63;;3142:117;2937:329;;;;:::o;3272:145::-;3370:6;3404:5;3398:12;3388:22;;3272:145;;;:::o;3423:215::-;3553:11;3587:6;3582:3;3575:19;3627:4;3622:3;3618:14;3603:29;;3423:215;;;;:::o;3644:163::-;3742:4;3765:3;3757:11;;3795:4;3790:3;3786:14;3778:22;;3644:163;;;:::o;3813:124::-;3890:6;3924:5;3918:12;3908:22;;3813:124;;;:::o;3943:184::-;4042:11;4076:6;4071:3;4064:19;4116:4;4111:3;4107:14;4092:29;;3943:184;;;;:::o;4133:142::-;4210:4;4233:3;4225:11;;4263:4;4258:3;4254:14;4246:22;;4133:142;;;:::o;4281:99::-;4333:6;4367:5;4361:12;4351:22;;4281:99;;;:::o;4386:159::-;4460:11;4494:6;4489:3;4482:19;4534:4;4529:3;4525:14;4510:29;;4386:159;;;;:::o;4551:139::-;4640:6;4635:3;4630;4624:23;4681:1;4672:6;4667:3;4663:16;4656:27;4551:139;;;:::o;4696:102::-;4737:6;4788:2;4784:7;4779:2;4772:5;4768:14;4764:28;4754:38;;4696:102;;;:::o;4804:357::-;4882:3;4910:39;4943:5;4910:39;:::i;:::-;4965:61;5019:6;5014:3;4965:61;:::i;:::-;4958:68;;5035:65;5093:6;5088:3;5081:4;5074:5;5070:16;5035:65;:::i;:::-;5125:29;5147:6;5125:29;:::i;:::-;5120:3;5116:39;5109:46;;4886:275;4804:357;;;;:::o;5167:196::-;5256:10;5291:66;5353:3;5345:6;5291:66;:::i;:::-;5277:80;;5167:196;;;;:::o;5369:123::-;5449:4;5481;5476:3;5472:14;5464:22;;5369:123;;;:::o;5526:971::-;5655:3;5684:64;5742:5;5684:64;:::i;:::-;5764:86;5843:6;5838:3;5764:86;:::i;:::-;5757:93;;5876:3;5921:4;5913:6;5909:17;5904:3;5900:27;5951:66;6011:5;5951:66;:::i;:::-;6040:7;6071:1;6056:396;6081:6;6078:1;6075:13;6056:396;;;6152:9;6146:4;6142:20;6137:3;6130:33;6203:6;6197:13;6231:84;6310:4;6295:13;6231:84;:::i;:::-;6223:92;;6338:70;6401:6;6338:70;:::i;:::-;6328:80;;6437:4;6432:3;6428:14;6421:21;;6116:336;6103:1;6100;6096:9;6091:14;;6056:396;;;6060:14;6468:4;6461:11;;6488:3;6481:10;;5660:837;;;;;5526:971;;;;:::o;6581:663::-;6702:3;6738:4;6733:3;6729:14;6825:4;6818:5;6814:16;6808:23;6844:63;6901:4;6896:3;6892:14;6878:12;6844:63;:::i;:::-;6753:164;7004:4;6997:5;6993:16;6987:23;7057:3;7051:4;7047:14;7040:4;7035:3;7031:14;7024:38;7083:123;7201:4;7187:12;7083:123;:::i;:::-;7075:131;;6927:290;7234:4;7227:11;;6707:537;6581:663;;;;:::o;7250:280::-;7381:10;7416:108;7520:3;7512:6;7416:108;:::i;:::-;7402:122;;7250:280;;;;:::o;7536:144::-;7637:4;7669;7664:3;7660:14;7652:22;;7536:144;;;:::o;7768:1159::-;7949:3;7978:85;8057:5;7978:85;:::i;:::-;8079:117;8189:6;8184:3;8079:117;:::i;:::-;8072:124;;8222:3;8267:4;8259:6;8255:17;8250:3;8246:27;8297:87;8378:5;8297:87;:::i;:::-;8407:7;8438:1;8423:459;8448:6;8445:1;8442:13;8423:459;;;8519:9;8513:4;8509:20;8504:3;8497:33;8570:6;8564:13;8598:126;8719:4;8704:13;8598:126;:::i;:::-;8590:134;;8747:91;8831:6;8747:91;:::i;:::-;8737:101;;8867:4;8862:3;8858:14;8851:21;;8483:399;8470:1;8467;8463:9;8458:14;;8423:459;;;8427:14;8898:4;8891:11;;8918:3;8911:10;;7954:973;;;;;7768:1159;;;;:::o;8933:497::-;9138:4;9176:2;9165:9;9161:18;9153:26;;9225:9;9219:4;9215:20;9211:1;9200:9;9196:17;9189:47;9253:170;9418:4;9409:6;9253:170;:::i;:::-;9245:178;;8933:497;;;;:::o;9436:90::-;9470:7;9513:5;9506:13;9499:21;9488:32;;9436:90;;;:::o;9532:116::-;9602:21;9617:5;9602:21;:::i;:::-;9595:5;9592:32;9582:60;;9638:1;9635;9628:12;9582:60;9532:116;:::o;9654:133::-;9697:5;9735:6;9722:20;9713:29;;9751:30;9775:5;9751:30;:::i;:::-;9654:133;;;;:::o;9793:323::-;9849:6;9898:2;9886:9;9877:7;9873:23;9869:32;9866:119;;;9904:79;;:::i;:::-;9866:119;10024:1;10049:50;10091:7;10082:6;10071:9;10067:22;10049:50;:::i;:::-;10039:60;;9995:114;9793:323;;;;:::o;10122:152::-;10227:6;10261:5;10255:12;10245:22;;10122:152;;;:::o;10280:222::-;10417:11;10451:6;10446:3;10439:19;10491:4;10486:3;10482:14;10467:29;;10280:222;;;;:::o;10508:170::-;10613:4;10636:3;10628:11;;10666:4;10661:3;10657:14;10649:22;;10508:170;;;:::o;10684:113::-;10750:6;10784:5;10778:12;10768:22;;10684:113;;;:::o;10803:173::-;10891:11;10925:6;10920:3;10913:19;10965:4;10960:3;10956:14;10941:29;;10803:173;;;;:::o;10982:131::-;11048:4;11071:3;11063:11;;11101:4;11096:3;11092:14;11084:22;;10982:131;;;:::o;11119:149::-;11155:7;11195:66;11188:5;11184:78;11173:89;;11119:149;;;:::o;11274:105::-;11349:23;11366:5;11349:23;:::i;:::-;11344:3;11337:36;11274:105;;:::o;11385:175::-;11452:10;11473:44;11513:3;11505:6;11473:44;:::i;:::-;11549:4;11544:3;11540:14;11526:28;;11385:175;;;;:::o;11566:112::-;11635:4;11667;11662:3;11658:14;11650:22;;11566:112;;;:::o;11712:704::-;11819:3;11848:53;11895:5;11848:53;:::i;:::-;11917:75;11985:6;11980:3;11917:75;:::i;:::-;11910:82;;12016:55;12065:5;12016:55;:::i;:::-;12094:7;12125:1;12110:281;12135:6;12132:1;12129:13;12110:281;;;12211:6;12205:13;12238:61;12295:3;12280:13;12238:61;:::i;:::-;12231:68;;12322:59;12374:6;12322:59;:::i;:::-;12312:69;;12170:221;12157:1;12154;12150:9;12145:14;;12110:281;;;12114:14;12407:3;12400:10;;11824:592;;;11712:704;;;;:::o;12514:730::-;12649:3;12685:4;12680:3;12676:14;12776:4;12769:5;12765:16;12759:23;12829:3;12823:4;12819:14;12812:4;12807:3;12803:14;12796:38;12855:73;12923:4;12909:12;12855:73;:::i;:::-;12847:81;;12700:239;13026:4;13019:5;13015:16;13009:23;13079:3;13073:4;13069:14;13062:4;13057:3;13053:14;13046:38;13105:101;13201:4;13187:12;13105:101;:::i;:::-;13097:109;;12949:268;13234:4;13227:11;;12654:590;12514:730;;;;:::o;13250:308::-;13395:10;13430:122;13548:3;13540:6;13430:122;:::i;:::-;13416:136;;13250:308;;;;:::o;13564:151::-;13672:4;13704;13699:3;13695:14;13687:22;;13564:151;;;:::o;13817:1215::-;14012:3;14041:92;14127:5;14041:92;:::i;:::-;14149:124;14266:6;14261:3;14149:124;:::i;:::-;14142:131;;14299:3;14344:4;14336:6;14332:17;14327:3;14323:27;14374:94;14462:5;14374:94;:::i;:::-;14491:7;14522:1;14507:480;14532:6;14529:1;14526:13;14507:480;;;14603:9;14597:4;14593:20;14588:3;14581:33;14654:6;14648:13;14682:140;14817:4;14802:13;14682:140;:::i;:::-;14674:148;;14845:98;14936:6;14845:98;:::i;:::-;14835:108;;14972:4;14967:3;14963:14;14956:21;;14567:420;14554:1;14551;14547:9;14542:14;;14507:480;;;14511:14;15003:4;14996:11;;15023:3;15016:10;;14017:1015;;;;;13817:1215;;;;:::o;15038:525::-;15257:4;15295:2;15284:9;15280:18;15272:26;;15344:9;15338:4;15334:20;15330:1;15319:9;15315:17;15308:47;15372:184;15551:4;15542:6;15372:184;:::i;:::-;15364:192;;15038:525;;;;:::o;15569:474::-;15637:6;15645;15694:2;15682:9;15673:7;15669:23;15665:32;15662:119;;;15700:79;;:::i;:::-;15662:119;15820:1;15845:53;15890:7;15881:6;15870:9;15866:22;15845:53;:::i;:::-;15835:63;;15791:117;15947:2;15973:53;16018:7;16009:6;15998:9;15994:22;15973:53;:::i;:::-;15963:63;;15918:118;15569:474;;;;;:::o;16049:194::-;16158:11;16192:6;16187:3;16180:19;16232:4;16227:3;16223:14;16208:29;;16049:194;;;;:::o;16277:991::-;16416:3;16445:64;16503:5;16445:64;:::i;:::-;16525:96;16614:6;16609:3;16525:96;:::i;:::-;16518:103;;16647:3;16692:4;16684:6;16680:17;16675:3;16671:27;16722:66;16782:5;16722:66;:::i;:::-;16811:7;16842:1;16827:396;16852:6;16849:1;16846:13;16827:396;;;16923:9;16917:4;16913:20;16908:3;16901:33;16974:6;16968:13;17002:84;17081:4;17066:13;17002:84;:::i;:::-;16994:92;;17109:70;17172:6;17109:70;:::i;:::-;17099:80;;17208:4;17203:3;17199:14;17192:21;;16887:336;16874:1;16871;16867:9;16862:14;;16827:396;;;16831:14;17239:4;17232:11;;17259:3;17252:10;;16421:847;;;;;16277:991;;;;:::o;17274:413::-;17437:4;17475:2;17464:9;17460:18;17452:26;;17524:9;17518:4;17514:20;17510:1;17499:9;17495:17;17488:47;17552:128;17675:4;17666:6;17552:128;:::i;:::-;17544:136;;17274:413;;;;:::o;17693:144::-;17790:6;17824:5;17818:12;17808:22;;17693:144;;;:::o;17843:214::-;17972:11;18006:6;18001:3;17994:19;18046:4;18041:3;18037:14;18022:29;;17843:214;;;;:::o;18063:162::-;18160:4;18183:3;18175:11;;18213:4;18208:3;18204:14;18196:22;;18063:162;;;:::o;18307:639::-;18426:3;18462:4;18457:3;18453:14;18549:4;18542:5;18538:16;18532:23;18568:63;18625:4;18620:3;18616:14;18602:12;18568:63;:::i;:::-;18477:164;18728:4;18721:5;18717:16;18711:23;18781:3;18775:4;18771:14;18764:4;18759:3;18755:14;18748:38;18807:101;18903:4;18889:12;18807:101;:::i;:::-;18799:109;;18651:268;18936:4;18929:11;;18431:515;18307:639;;;;:::o;18952:276::-;19081:10;19116:106;19218:3;19210:6;19116:106;:::i;:::-;19102:120;;18952:276;;;;:::o;19234:143::-;19334:4;19366;19361:3;19357:14;19349:22;;19234:143;;;:::o;19463:1151::-;19642:3;19671:84;19749:5;19671:84;:::i;:::-;19771:116;19880:6;19875:3;19771:116;:::i;:::-;19764:123;;19913:3;19958:4;19950:6;19946:17;19941:3;19937:27;19988:86;20068:5;19988:86;:::i;:::-;20097:7;20128:1;20113:456;20138:6;20135:1;20132:13;20113:456;;;20209:9;20203:4;20199:20;20194:3;20187:33;20260:6;20254:13;20288:124;20407:4;20392:13;20288:124;:::i;:::-;20280:132;;20435:90;20518:6;20435:90;:::i;:::-;20425:100;;20554:4;20549:3;20545:14;20538:21;;20173:396;20160:1;20157;20153:9;20148:14;;20113:456;;;20117:14;20585:4;20578:11;;20605:3;20598:10;;19647:967;;;;;19463:1151;;;;:::o;20620:493::-;20823:4;20861:2;20850:9;20846:18;20838:26;;20910:9;20904:4;20900:20;20896:1;20885:9;20881:17;20874:47;20938:168;21101:4;21092:6;20938:168;:::i;:::-;20930:176;;20620:493;;;;:::o;21119:109::-;21200:21;21215:5;21200:21;:::i;:::-;21195:3;21188:34;21119:109;;:::o;21234:210::-;21321:4;21359:2;21348:9;21344:18;21336:26;;21372:65;21434:1;21423:9;21419:17;21410:6;21372:65;:::i;:::-;21234:210;;;;:::o;21450:86::-;21485:7;21525:4;21518:5;21514:16;21503:27;;21450:86;;;:::o;21542:118::-;21613:22;21629:5;21613:22;:::i;:::-;21606:5;21603:33;21593:61;;21650:1;21647;21640:12;21593:61;21542:118;:::o;21666:135::-;21710:5;21748:6;21735:20;21726:29;;21764:31;21789:5;21764:31;:::i;:::-;21666:135;;;;:::o;21807:325::-;21864:6;21913:2;21901:9;21892:7;21888:23;21884:32;21881:119;;;21919:79;;:::i;:::-;21881:119;22039:1;22064:51;22107:7;22098:6;22087:9;22083:22;22064:51;:::i;:::-;22054:61;;22010:115;21807:325;;;;:::o;22138:180::-;22186:77;22183:1;22176:88;22283:4;22280:1;22273:15;22307:4;22304:1;22297:15;22324:410;22364:7;22387:20;22405:1;22387:20;:::i;:::-;22382:25;;22421:20;22439:1;22421:20;:::i;:::-;22416:25;;22476:1;22473;22469:9;22498:30;22516:11;22498:30;:::i;:::-;22487:41;;22677:1;22668:7;22664:15;22661:1;22658:22;22638:1;22631:9;22611:83;22588:139;;22707:18;;:::i;:::-;22588:139;22372:362;22324:410;;;;:::o;22740:191::-;22780:3;22799:20;22817:1;22799:20;:::i;:::-;22794:25;;22833:20;22851:1;22833:20;:::i;:::-;22828:25;;22876:1;22873;22869:9;22862:16;;22897:3;22894:1;22891:10;22888:36;;;22904:18;;:::i;:::-;22888:36;22740:191;;;;:::o;22937:79::-;22976:7;23005:5;22994:16;;22937:79;;;:::o;23022:157::-;23127:45;23147:24;23165:5;23147:24;:::i;:::-;23127:45;:::i;:::-;23122:3;23115:58;23022:157;;:::o;23185:256::-;23297:3;23312:75;23383:3;23374:6;23312:75;:::i;:::-;23412:2;23407:3;23403:12;23396:19;;23432:3;23425:10;;23185:256;;;;:::o;23447:180::-;23495:77;23492:1;23485:88;23592:4;23589:1;23582:15;23616:4;23613:1;23606:15;23633:176;23665:1;23682:20;23700:1;23682:20;:::i;:::-;23677:25;;23716:20;23734:1;23716:20;:::i;:::-;23711:25;;23755:1;23745:35;;23760:18;;:::i;:::-;23745:35;23801:1;23798;23794:9;23789:14;;23633:176;;;;:::o;23815:180::-;23863:77;23860:1;23853:88;23960:4;23957:1;23950:15;23984:4;23981:1;23974:15;24001:118;24088:24;24106:5;24088:24;:::i;:::-;24083:3;24076:37;24001:118;;:::o;24125:222::-;24218:4;24256:2;24245:9;24241:18;24233:26;;24269:71;24337:1;24326:9;24322:17;24313:6;24269:71;:::i;:::-;24125:222;;;;:::o;24353:118::-;24440:24;24458:5;24440:24;:::i;:::-;24435:3;24428:37;24353:118;;:::o;24477:222::-;24570:4;24608:2;24597:9;24593:18;24585:26;;24621:71;24689:1;24678:9;24674:17;24665:6;24621:71;:::i;:::-;24477:222;;;;:::o;24705:180::-;24753:77;24750:1;24743:88;24850:4;24847:1;24840:15;24874:4;24871:1;24864:15;24891:180;24939:77;24936:1;24929:88;25036:4;25033:1;25026:15;25060:4;25057:1;25050:15;25077:320;25121:6;25158:1;25152:4;25148:12;25138:22;;25205:1;25199:4;25195:12;25226:18;25216:81;;25282:4;25274:6;25270:17;25260:27;;25216:81;25344:2;25336:6;25333:14;25313:18;25310:38;25307:84;;25363:18;;:::i;:::-;25307:84;25128:269;25077:320;;;:::o;25403:77::-;25440:7;25469:5;25458:16;;25403:77;;;:::o;25486:118::-;25573:24;25591:5;25573:24;:::i;:::-;25568:3;25561:37;25486:118;;:::o;25610:332::-;25731:4;25769:2;25758:9;25754:18;25746:26;;25782:71;25850:1;25839:9;25835:17;25826:6;25782:71;:::i;:::-;25863:72;25931:2;25920:9;25916:18;25907:6;25863:72;:::i;:::-;25610:332;;;;;:::o;25948:122::-;26021:24;26039:5;26021:24;:::i;:::-;26014:5;26011:35;26001:63;;26060:1;26057;26050:12;26001:63;25948:122;:::o;26076:143::-;26133:5;26164:6;26158:13;26149:22;;26180:33;26207:5;26180:33;:::i;:::-;26076:143;;;;:::o;26225:351::-;26295:6;26344:2;26332:9;26323:7;26319:23;26315:32;26312:119;;;26350:79;;:::i;:::-;26312:119;26470:1;26495:64;26551:7;26542:6;26531:9;26527:22;26495:64;:::i;:::-;26485:74;;26441:128;26225:351;;;;:::o;26582:169::-;26666:11;26700:6;26695:3;26688:19;26740:4;26735:3;26731:14;26716:29;;26582:169;;;;:::o;26757:377::-;26845:3;26873:39;26906:5;26873:39;:::i;:::-;26928:71;26992:6;26987:3;26928:71;:::i;:::-;26921:78;;27008:65;27066:6;27061:3;27054:4;27047:5;27043:16;27008:65;:::i;:::-;27098:29;27120:6;27098:29;:::i;:::-;27093:3;27089:39;27082:46;;26849:285;26757:377;;;;:::o;27140:423::-;27281:4;27319:2;27308:9;27304:18;27296:26;;27368:9;27362:4;27358:20;27354:1;27343:9;27339:17;27332:47;27396:78;27469:4;27460:6;27396:78;:::i;:::-;27388:86;;27484:72;27552:2;27541:9;27537:18;27528:6;27484:72;:::i;:::-;27140:423;;;;;:::o;27569:194::-;27609:4;27629:20;27647:1;27629:20;:::i;:::-;27624:25;;27663:20;27681:1;27663:20;:::i;:::-;27658:25;;27707:1;27704;27700:9;27692:17;;27731:1;27725:4;27722:11;27719:37;;;27736:18;;:::i;:::-;27719:37;27569:194;;;;:::o;27769:102::-;27811:8;27858:5;27855:1;27851:13;27830:34;;27769:102;;;:::o;27877:848::-;27938:5;27945:4;27969:6;27960:15;;27993:5;27984:14;;28007:712;28028:1;28018:8;28015:15;28007:712;;;28123:4;28118:3;28114:14;28108:4;28105:24;28102:50;;;28132:18;;:::i;:::-;28102:50;28182:1;28172:8;28168:16;28165:451;;;28597:4;28590:5;28586:16;28577:25;;28165:451;28647:4;28641;28637:15;28629:23;;28677:32;28700:8;28677:32;:::i;:::-;28665:44;;28007:712;;;27877:848;;;;;;;:::o;28731:1073::-;28785:5;28976:8;28966:40;;28997:1;28988:10;;28999:5;;28966:40;29025:4;29015:36;;29042:1;29033:10;;29044:5;;29015:36;29111:4;29159:1;29154:27;;;;29195:1;29190:191;;;;29104:277;;29154:27;29172:1;29163:10;;29174:5;;;29190:191;29235:3;29225:8;29222:17;29219:43;;;29242:18;;:::i;:::-;29219:43;29291:8;29288:1;29284:16;29275:25;;29326:3;29319:5;29316:14;29313:40;;;29333:18;;:::i;:::-;29313:40;29366:5;;;29104:277;;29490:2;29480:8;29477:16;29471:3;29465:4;29462:13;29458:36;29440:2;29430:8;29427:16;29422:2;29416:4;29413:12;29409:35;29393:111;29390:246;;;29546:8;29540:4;29536:19;29527:28;;29581:3;29574:5;29571:14;29568:40;;;29588:18;;:::i;:::-;29568:40;29621:5;;29390:246;29661:42;29699:3;29689:8;29683:4;29680:1;29661:42;:::i;:::-;29646:57;;;;29735:4;29730:3;29726:14;29719:5;29716:25;29713:51;;;29744:18;;:::i;:::-;29713:51;29793:4;29786:5;29782:16;29773:25;;28731:1073;;;;;;:::o;29810:285::-;29870:5;29894:23;29912:4;29894:23;:::i;:::-;29886:31;;29938:27;29956:8;29938:27;:::i;:::-;29926:39;;29984:104;30021:66;30011:8;30005:4;29984:104;:::i;:::-;29975:113;;29810:285;;;;:::o;30101:185::-;30141:1;30158:20;30176:1;30158:20;:::i;:::-;30153:25;;30192:20;30210:1;30192:20;:::i;:::-;30187:25;;30231:1;30221:35;;30236:18;;:::i;:::-;30221:35;30278:1;30275;30271:9;30266:14;;30101:185;;;;:::o;30292:179::-;30330:1;30347:18;30363:1;30347:18;:::i;:::-;30342:23;;30379:18;30395:1;30379:18;:::i;:::-;30374:23;;30416:1;30406:35;;30421:18;;:::i;:::-;30406:35;30463:1;30460;30456:9;30451:14;;30292:179;;;;:::o;30477:271::-;30515:7;30538:18;30554:1;30538:18;:::i;:::-;30533:23;;30570:18;30586:1;30570:18;:::i;:::-;30565:23;;30623:1;30620;30616:9;30645:28;30661:11;30645:28;:::i;:::-;30634:39;;30705:11;30696:7;30693:24;30683:58;;30721:18;;:::i;:::-;30683:58;30523:225;30477:271;;;;:::o;30754:191::-;30792:4;30812:18;30828:1;30812:18;:::i;:::-;30807:23;;30844:18;30860:1;30844:18;:::i;:::-;30839:23;;30886:1;30883;30879:9;30871:17;;30910:4;30904;30901:14;30898:40;;;30918:18;;:::i;:::-;30898:40;30754:191;;;;:::o;30951:514::-;31112:4;31150:2;31139:9;31135:18;31127:26;;31199:9;31193:4;31189:20;31185:1;31174:9;31170:17;31163:47;31227:78;31300:4;31291:6;31227:78;:::i;:::-;31219:86;;31352:9;31346:4;31342:20;31337:2;31326:9;31322:18;31315:48;31380:78;31453:4;31444:6;31380:78;:::i;:::-;31372:86;;30951:514;;;;;:::o;31471:98::-;31522:6;31556:5;31550:12;31540:22;;31471:98;;;:::o;31575:147::-;31676:11;31713:3;31698:18;;31575:147;;;;:::o;31728:386::-;31832:3;31860:38;31892:5;31860:38;:::i;:::-;31914:88;31995:6;31990:3;31914:88;:::i;:::-;31907:95;;32011:65;32069:6;32064:3;32057:4;32050:5;32046:16;32011:65;:::i;:::-;32101:6;32096:3;32092:16;32085:23;;31836:278;31728:386;;;;:::o;32120:271::-;32250:3;32272:93;32361:3;32352:6;32272:93;:::i;:::-;32265:100;;32382:3;32375:10;;32120:271;;;;:::o;32397:85::-;32442:7;32471:5;32460:16;;32397:85;;;:::o;32488:60::-;32516:3;32537:5;32530:12;;32488:60;;;:::o;32554:158::-;32612:9;32645:61;32663:42;32672:32;32698:5;32672:32;:::i;:::-;32663:42;:::i;:::-;32645:61;:::i;:::-;32632:74;;32554:158;;;:::o;32718:147::-;32813:45;32852:5;32813:45;:::i;:::-;32808:3;32801:58;32718:147;;:::o;32871:85::-;32916:7;32945:5;32934:16;;32871:85;;;:::o;32962:158::-;33020:9;33053:61;33071:42;33080:32;33106:5;33080:32;:::i;:::-;33071:42;:::i;:::-;33053:61;:::i;:::-;33040:74;;32962:158;;;:::o;33126:147::-;33221:45;33260:5;33221:45;:::i;:::-;33216:3;33209:58;33126:147;;:::o;33279:474::-;33444:4;33482:2;33471:9;33467:18;33459:26;;33495:71;33563:1;33552:9;33548:17;33539:6;33495:71;:::i;:::-;33576:80;33652:2;33641:9;33637:18;33628:6;33576:80;:::i;:::-;33666;33742:2;33731:9;33727:18;33718:6;33666:80;:::i;:::-;33279:474;;;;;;:::o;33759:143::-;33816:5;33847:6;33841:13;33832:22;;33863:33;33890:5;33863:33;:::i;:::-;33759:143;;;;:::o;33908:351::-;33978:6;34027:2;34015:9;34006:7;34002:23;33998:32;33995:119;;;34033:79;;:::i;:::-;33995:119;34153:1;34178:64;34234:7;34225:6;34214:9;34210:22;34178:64;:::i;:::-;34168:74;;34124:128;33908:351;;;;:::o;34265:87::-;34312:7;34341:5;34330:16;;34265:87;;;:::o;34358:162::-;34418:9;34451:63;34469:44;34478:34;34506:5;34478:34;:::i;:::-;34469:44;:::i;:::-;34451:63;:::i;:::-;34438:76;;34358:162;;;:::o;34526:151::-;34623:47;34664:5;34623:47;:::i;:::-;34618:3;34611:60;34526:151;;:::o;34683:478::-;34850:4;34888:2;34877:9;34873:18;34865:26;;34901:71;34969:1;34958:9;34954:17;34945:6;34901:71;:::i;:::-;34982:80;35058:2;35047:9;35043:18;35034:6;34982:80;:::i;:::-;35072:82;35150:2;35139:9;35135:18;35126:6;35072:82;:::i;:::-;34683:478;;;;;;:::o;35167:112::-;35250:22;35266:5;35250:22;:::i;:::-;35245:3;35238:35;35167:112;;:::o;35285:214::-;35374:4;35412:2;35401:9;35397:18;35389:26;;35425:67;35489:1;35478:9;35474:17;35465:6;35425:67;:::i;:::-;35285:214;;;;:::o;35505:188::-;35543:3;35562:18;35578:1;35562:18;:::i;:::-;35557:23;;35594:18;35610:1;35594:18;:::i;:::-;35589:23;;35635:1;35632;35628:9;35621:16;;35658:4;35653:3;35650:13;35647:39;;;35666:18;;:::i;:::-;35647:39;35505:188;;;;:::o;35699:179::-;35839:31;35835:1;35827:6;35823:14;35816:55;35699:179;:::o;35884:366::-;36026:3;36047:67;36111:2;36106:3;36047:67;:::i;:::-;36040:74;;36123:93;36212:3;36123:93;:::i;:::-;36241:2;36236:3;36232:12;36225:19;;35884:366;;;:::o;36256:517::-;36444:4;36482:2;36471:9;36467:18;36459:26;;36495:65;36557:1;36546:9;36542:17;36533:6;36495:65;:::i;:::-;36607:9;36601:4;36597:20;36592:2;36581:9;36577:18;36570:48;36635:131;36761:4;36635:131;:::i;:::-;36627:139;;36256:517;;;;:::o;36779:226::-;36919:34;36915:1;36907:6;36903:14;36896:58;36988:9;36983:2;36975:6;36971:15;36964:34;36779:226;:::o;37011:366::-;37153:3;37174:67;37238:2;37233:3;37174:67;:::i;:::-;37167:74;;37250:93;37339:3;37250:93;:::i;:::-;37368:2;37363:3;37359:12;37352:19;;37011:366;;;:::o;37383:517::-;37571:4;37609:2;37598:9;37594:18;37586:26;;37622:65;37684:1;37673:9;37669:17;37660:6;37622:65;:::i;:::-;37734:9;37728:4;37724:20;37719:2;37708:9;37704:18;37697:48;37762:131;37888:4;37762:131;:::i;:::-;37754:139;;37383:517;;;;:::o;37906:160::-;38046:12;38042:1;38034:6;38030:14;38023:36;37906:160;:::o;38072:366::-;38214:3;38235:67;38299:2;38294:3;38235:67;:::i;:::-;38228:74;;38311:93;38400:3;38311:93;:::i;:::-;38429:2;38424:3;38420:12;38413:19;;38072:366;;;:::o;38444:529::-;38638:4;38676:2;38665:9;38661:18;38653:26;;38725:9;38719:4;38715:20;38711:1;38700:9;38696:17;38689:47;38753:131;38879:4;38753:131;:::i;:::-;38745:139;;38894:72;38962:2;38951:9;38947:18;38938:6;38894:72;:::i;:::-;38444:529;;;;:::o;38979:221::-;39119:34;39115:1;39107:6;39103:14;39096:58;39188:4;39183:2;39175:6;39171:15;39164:29;38979:221;:::o;39206:366::-;39348:3;39369:67;39433:2;39428:3;39369:67;:::i;:::-;39362:74;;39445:93;39534:3;39445:93;:::i;:::-;39563:2;39558:3;39554:12;39547:19;;39206:366;;;:::o;39578:517::-;39766:4;39804:2;39793:9;39789:18;39781:26;;39817:65;39879:1;39868:9;39864:17;39855:6;39817:65;:::i;:::-;39929:9;39923:4;39919:20;39914:2;39903:9;39899:18;39892:48;39957:131;40083:4;39957:131;:::i;:::-;39949:139;;39578:517;;;;:::o;40101:220::-;40241:34;40237:1;40229:6;40225:14;40218:58;40310:3;40305:2;40297:6;40293:15;40286:28;40101:220;:::o;40327:366::-;40469:3;40490:67;40554:2;40549:3;40490:67;:::i;:::-;40483:74;;40566:93;40655:3;40566:93;:::i;:::-;40684:2;40679:3;40675:12;40668:19;;40327:366;;;:::o;40699:620::-;40913:4;40951:2;40940:9;40936:18;40928:26;;41000:9;40994:4;40990:20;40986:1;40975:9;40971:17;40964:47;41028:131;41154:4;41028:131;:::i;:::-;41020:139;;41206:9;41200:4;41196:20;41191:2;41180:9;41176:18;41169:48;41234:78;41307:4;41298:6;41234:78;:::i;:::-;41226:86;;40699:620;;;;:::o;41325:173::-;41465:25;41461:1;41453:6;41449:14;41442:49;41325:173;:::o;41504:366::-;41646:3;41667:67;41731:2;41726:3;41667:67;:::i;:::-;41660:74;;41743:93;41832:3;41743:93;:::i;:::-;41861:2;41856:3;41852:12;41845:19;;41504:366;;;:::o;41876:620::-;42090:4;42128:2;42117:9;42113:18;42105:26;;42177:9;42171:4;42167:20;42163:1;42152:9;42148:17;42141:47;42205:131;42331:4;42205:131;:::i;:::-;42197:139;;42383:9;42377:4;42373:20;42368:2;42357:9;42353:18;42346:48;42411:78;42484:4;42475:6;42411:78;:::i;:::-;42403:86;;41876:620;;;;:::o;42502:411::-;42637:4;42675:2;42664:9;42660:18;42652:26;;42688:65;42750:1;42739:9;42735:17;42726:6;42688:65;:::i;:::-;42800:9;42794:4;42790:20;42785:2;42774:9;42770:18;42763:48;42828:78;42901:4;42892:6;42828:78;:::i;:::-;42820:86;;42502:411;;;;;:::o;42919:221::-;43059:34;43055:1;43047:6;43043:14;43036:58;43128:4;43123:2;43115:6;43111:15;43104:29;42919:221;:::o;43146:366::-;43288:3;43309:67;43373:2;43368:3;43309:67;:::i;:::-;43302:74;;43385:93;43474:3;43385:93;:::i;:::-;43503:2;43498:3;43494:12;43487:19;;43146:366;;;:::o;43518:620::-;43732:4;43770:2;43759:9;43755:18;43747:26;;43819:9;43813:4;43809:20;43805:1;43794:9;43790:17;43783:47;43847:131;43973:4;43847:131;:::i;:::-;43839:139;;44025:9;44019:4;44015:20;44010:2;43999:9;43995:18;43988:48;44053:78;44126:4;44117:6;44053:78;:::i;:::-;44045:86;;43518:620;;;;:::o;44144:115::-;44229:23;44246:5;44229:23;:::i;:::-;44224:3;44217:36;44144:115;;:::o;44265:183::-;44363:11;44397:6;44392:3;44385:19;44437:4;44432:3;44428:14;44413:29;;44265:183;;;;:::o;44482:724::-;44599:3;44628:53;44675:5;44628:53;:::i;:::-;44697:85;44775:6;44770:3;44697:85;:::i;:::-;44690:92;;44806:55;44855:5;44806:55;:::i;:::-;44884:7;44915:1;44900:281;44925:6;44922:1;44919:13;44900:281;;;45001:6;44995:13;45028:61;45085:3;45070:13;45028:61;:::i;:::-;45021:68;;45112:59;45164:6;45112:59;:::i;:::-;45102:69;;44960:221;44947:1;44944;44940:9;44935:14;;44900:281;;;44904:14;45197:3;45190:10;;44604:602;;;44482:724;;;;:::o;45212:676::-;45427:4;45465:2;45454:9;45450:18;45442:26;;45478:69;45544:1;45533:9;45529:17;45520:6;45478:69;:::i;:::-;45594:9;45588:4;45584:20;45579:2;45568:9;45564:18;45557:48;45622:106;45723:4;45714:6;45622:106;:::i;:::-;45614:114;;45775:9;45769:4;45765:20;45760:2;45749:9;45745:18;45738:48;45803:78;45876:4;45867:6;45803:78;:::i;:::-;45795:86;;45212:676;;;;;;:::o;45894:533::-;46063:4;46101:2;46090:9;46086:18;46078:26;;46150:9;46144:4;46140:20;46136:1;46125:9;46121:17;46114:47;46178:78;46251:4;46242:6;46178:78;:::i;:::-;46170:86;;46266:72;46334:2;46323:9;46319:18;46310:6;46266:72;:::i;:::-;46348;46416:2;46405:9;46401:18;46392:6;46348:72;:::i;:::-;45894:533;;;;;;:::o;46433:168::-;46573:20;46569:1;46561:6;46557:14;46550:44;46433:168;:::o;46607:366::-;46749:3;46770:67;46834:2;46829:3;46770:67;:::i;:::-;46763:74;;46846:93;46935:3;46846:93;:::i;:::-;46964:2;46959:3;46955:12;46948:19;;46607:366;;;:::o;46979:529::-;47173:4;47211:2;47200:9;47196:18;47188:26;;47260:9;47254:4;47250:20;47246:1;47235:9;47231:17;47224:47;47288:131;47414:4;47288:131;:::i;:::-;47280:139;;47429:72;47497:2;47486:9;47482:18;47473:6;47429:72;:::i;:::-;46979:529;;;;:::o;47514:231::-;47654:34;47650:1;47642:6;47638:14;47631:58;47723:14;47718:2;47710:6;47706:15;47699:39;47514:231;:::o;47751:366::-;47893:3;47914:67;47978:2;47973:3;47914:67;:::i;:::-;47907:74;;47990:93;48079:3;47990:93;:::i;:::-;48108:2;48103:3;48099:12;48092:19;;47751:366;;;:::o;48123:517::-;48311:4;48349:2;48338:9;48334:18;48326:26;;48362:65;48424:1;48413:9;48409:17;48400:6;48362:65;:::i;:::-;48474:9;48468:4;48464:20;48459:2;48448:9;48444:18;48437:48;48502:131;48628:4;48502:131;:::i;:::-;48494:139;;48123:517;;;;:::o;48646:171::-;48786:23;48782:1;48774:6;48770:14;48763:47;48646:171;:::o;48823:366::-;48965:3;48986:67;49050:2;49045:3;48986:67;:::i;:::-;48979:74;;49062:93;49151:3;49062:93;:::i;:::-;49180:2;49175:3;49171:12;49164:19;;48823:366;;;:::o;49195:168::-;49278:11;49312:6;49307:3;49300:19;49352:4;49347:3;49343:14;49328:29;;49195:168;;;;:::o;49369:373::-;49455:3;49483:38;49515:5;49483:38;:::i;:::-;49537:70;49600:6;49595:3;49537:70;:::i;:::-;49530:77;;49616:65;49674:6;49669:3;49662:4;49655:5;49651:16;49616:65;:::i;:::-;49706:29;49728:6;49706:29;:::i;:::-;49701:3;49697:39;49690:46;;49459:283;49369:373;;;;:::o;49748:616::-;49960:4;49998:2;49987:9;49983:18;49975:26;;50047:9;50041:4;50037:20;50033:1;50022:9;50018:17;50011:47;50075:131;50201:4;50075:131;:::i;:::-;50067:139;;50253:9;50247:4;50243:20;50238:2;50227:9;50223:18;50216:48;50281:76;50352:4;50343:6;50281:76;:::i;:::-;50273:84;;49748:616;;;;:::o;50370:230::-;50510:34;50506:1;50498:6;50494:14;50487:58;50579:13;50574:2;50566:6;50562:15;50555:38;50370:230;:::o;50606:366::-;50748:3;50769:67;50833:2;50828:3;50769:67;:::i;:::-;50762:74;;50845:93;50934:3;50845:93;:::i;:::-;50963:2;50958:3;50954:12;50947:19;;50606:366;;;:::o;50978:517::-;51166:4;51204:2;51193:9;51189:18;51181:26;;51217:65;51279:1;51268:9;51264:17;51255:6;51217:65;:::i;:::-;51329:9;51323:4;51319:20;51314:2;51303:9;51299:18;51292:48;51357:131;51483:4;51357:131;:::i;:::-;51349:139;;50978:517;;;;:::o;51501:117::-;51610:1;51607;51600:12;51624:117;51733:1;51730;51723:12;51747:281;51830:27;51852:4;51830:27;:::i;:::-;51822:6;51818:40;51960:6;51948:10;51945:22;51924:18;51912:10;51909:34;51906:62;51903:88;;;51971:18;;:::i;:::-;51903:88;52011:10;52007:2;52000:22;51790:238;51747:281;;:::o;52034:129::-;52068:6;52095:20;;:::i;:::-;52085:30;;52124:33;52152:4;52144:6;52124:33;:::i;:::-;52034:129;;;:::o;52169:308::-;52231:4;52321:18;52313:6;52310:30;52307:56;;;52343:18;;:::i;:::-;52307:56;52381:29;52403:6;52381:29;:::i;:::-;52373:37;;52465:4;52459;52455:15;52447:23;;52169:308;;;:::o;52483:434::-;52572:5;52597:66;52613:49;52655:6;52613:49;:::i;:::-;52597:66;:::i;:::-;52588:75;;52686:6;52679:5;52672:21;52724:4;52717:5;52713:16;52762:3;52753:6;52748:3;52744:16;52741:25;52738:112;;;52769:79;;:::i;:::-;52738:112;52859:52;52904:6;52899:3;52894;52859:52;:::i;:::-;52578:339;52483:434;;;;;:::o;52937:355::-;53004:5;53053:3;53046:4;53038:6;53034:17;53030:27;53020:122;;53061:79;;:::i;:::-;53020:122;53171:6;53165:13;53196:90;53282:3;53274:6;53267:4;53259:6;53255:17;53196:90;:::i;:::-;53187:99;;53010:282;52937:355;;;;:::o;53298:524::-;53378:6;53427:2;53415:9;53406:7;53402:23;53398:32;53395:119;;;53433:79;;:::i;:::-;53395:119;53574:1;53563:9;53559:17;53553:24;53604:18;53596:6;53593:30;53590:117;;;53626:79;;:::i;:::-;53590:117;53731:74;53797:7;53788:6;53777:9;53773:22;53731:74;:::i;:::-;53721:84;;53524:291;53298:524;;;;:::o;53828:179::-;53968:31;53964:1;53956:6;53952:14;53945:55;53828:179;:::o;54013:366::-;54155:3;54176:67;54240:2;54235:3;54176:67;:::i;:::-;54169:74;;54252:93;54341:3;54252:93;:::i;:::-;54370:2;54365:3;54361:12;54354:19;;54013:366;;;:::o;54385:419::-;54551:4;54589:2;54578:9;54574:18;54566:26;;54638:9;54632:4;54628:20;54624:1;54613:9;54609:17;54602:47;54666:131;54792:4;54666:131;:::i;:::-;54658:139;;54385:419;;;:::o;54810:224::-;54950:34;54946:1;54938:6;54934:14;54927:58;55019:7;55014:2;55006:6;55002:15;54995:32;54810:224;:::o;55040:366::-;55182:3;55203:67;55267:2;55262:3;55203:67;:::i;:::-;55196:74;;55279:93;55368:3;55279:93;:::i;:::-;55397:2;55392:3;55388:12;55381:19;;55040:366;;;:::o;55412:419::-;55578:4;55616:2;55605:9;55601:18;55593:26;;55665:9;55659:4;55655:20;55651:1;55640:9;55636:17;55629:47;55693:131;55819:4;55693:131;:::i;:::-;55685:139;;55412:419;;;:::o;55837:222::-;55977:34;55973:1;55965:6;55961:14;55954:58;56046:5;56041:2;56033:6;56029:15;56022:30;55837:222;:::o;56065:366::-;56207:3;56228:67;56292:2;56287:3;56228:67;:::i;:::-;56221:74;;56304:93;56393:3;56304:93;:::i;:::-;56422:2;56417:3;56413:12;56406:19;;56065:366;;;:::o;56437:419::-;56603:4;56641:2;56630:9;56626:18;56618:26;;56690:9;56684:4;56680:20;56676:1;56665:9;56661:17;56654:47;56718:131;56844:4;56718:131;:::i;:::-;56710:139;;56437:419;;;:::o;56862:221::-;57002:34;56998:1;56990:6;56986:14;56979:58;57071:4;57066:2;57058:6;57054:15;57047:29;56862:221;:::o;57089:366::-;57231:3;57252:67;57316:2;57311:3;57252:67;:::i;:::-;57245:74;;57328:93;57417:3;57328:93;:::i;:::-;57446:2;57441:3;57437:12;57430:19;;57089:366;;;:::o;57461:419::-;57627:4;57665:2;57654:9;57650:18;57642:26;;57714:9;57708:4;57704:20;57700:1;57689:9;57685:17;57678:47;57742:131;57868:4;57742:131;:::i;:::-;57734:139;;57461:419;;;:::o;57886:181::-;58026:33;58022:1;58014:6;58010:14;58003:57;57886:181;:::o;58073:366::-;58215:3;58236:67;58300:2;58295:3;58236:67;:::i;:::-;58229:74;;58312:93;58401:3;58312:93;:::i;:::-;58430:2;58425:3;58421:12;58414:19;;58073:366;;;:::o;58445:419::-;58611:4;58649:2;58638:9;58634:18;58626:26;;58698:9;58692:4;58688:20;58684:1;58673:9;58669:17;58662:47;58726:131;58852:4;58726:131;:::i;:::-;58718:139;;58445:419;;;:::o;58870:220::-;59010:34;59006:1;58998:6;58994:14;58987:58;59079:3;59074:2;59066:6;59062:15;59055:28;58870:220;:::o;59096:366::-;59238:3;59259:67;59323:2;59318:3;59259:67;:::i;:::-;59252:74;;59335:93;59424:3;59335:93;:::i;:::-;59453:2;59448:3;59444:12;59437:19;;59096:366;;;:::o;59468:419::-;59634:4;59672:2;59661:9;59657:18;59649:26;;59721:9;59715:4;59711:20;59707:1;59696:9;59692:17;59685:47;59749:131;59875:4;59749:131;:::i;:::-;59741:139;;59468:419;;;:::o;59893:224::-;60033:34;60029:1;60021:6;60017:14;60010:58;60102:7;60097:2;60089:6;60085:15;60078:32;59893:224;:::o;60123:366::-;60265:3;60286:67;60350:2;60345:3;60286:67;:::i;:::-;60279:74;;60362:93;60451:3;60362:93;:::i;:::-;60480:2;60475:3;60471:12;60464:19;;60123:366;;;:::o;60495:419::-;60661:4;60699:2;60688:9;60684:18;60676:26;;60748:9;60742:4;60738:20;60734:1;60723:9;60719:17;60712:47;60776:131;60902:4;60776:131;:::i;:::-;60768:139;;60495:419;;;:::o;60920:221::-;61060:34;61056:1;61048:6;61044:14;61037:58;61129:4;61124:2;61116:6;61112:15;61105:29;60920:221;:::o;61147:366::-;61289:3;61310:67;61374:2;61369:3;61310:67;:::i;:::-;61303:74;;61386:93;61475:3;61386:93;:::i;:::-;61504:2;61499:3;61495:12;61488:19;;61147:366;;;:::o;61519:419::-;61685:4;61723:2;61712:9;61708:18;61700:26;;61772:9;61766:4;61762:20;61758:1;61747:9;61743:17;61736:47;61800:131;61926:4;61800:131;:::i;:::-;61792:139;;61519:419;;;:::o;61944:225::-;62084:34;62080:1;62072:6;62068:14;62061:58;62153:8;62148:2;62140:6;62136:15;62129:33;61944:225;:::o;62175:366::-;62317:3;62338:67;62402:2;62397:3;62338:67;:::i;:::-;62331:74;;62414:93;62503:3;62414:93;:::i;:::-;62532:2;62527:3;62523:12;62516:19;;62175:366;;;:::o;62547:419::-;62713:4;62751:2;62740:9;62736:18;62728:26;;62800:9;62794:4;62790:20;62786:1;62775:9;62771:17;62764:47;62828:131;62954:4;62828:131;:::i;:::-;62820:139;;62547:419;;;:::o;62972:180::-;63020:77;63017:1;63010:88;63117:4;63114:1;63107:15;63141:4;63138:1;63131:15","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","fuzz_guided_sampleFunctionCallTwice(uint256,uint256)":"7a24d15d","fuzz_sampleFailReturnEmptyData(bool)":"41128bc8","fuzz_sampleFailWithAssert(uint256)":"2734aab6","fuzz_sampleFailWithCustomError(uint8)":"d59e1d2c","fuzz_sampleFailWithPanic(uint256)":"61583d90","fuzz_sampleFailWithRequire(bool)":"57cee9aa","fuzz_sampleFunction(uint256)":"a99867d0","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/FuzzSampleContract.sol":{"FuzzSampleContract":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"fuzz_sampleFailReturnEmptyData","inputs":[{"name":"sampleInput","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithAssert","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithCustomError","inputs":[{"name":"sampleNum","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithPanic","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFailWithRequire","inputs":[{"name":"sampleInput","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fuzz_sampleFunction","inputs":[{"name":"sampleInput","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"LogAddress","inputs":[{"name":"actor","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sampleInput\",\"type\":\"bool\"}],\"name\":\"fuzz_sampleFailReturnEmptyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFailWithAssert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sampleNum\",\"type\":\"uint8\"}],\"name\":\"fuzz_sampleFailWithCustomError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFailWithPanic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sampleInput\",\"type\":\"bool\"}],\"name\":\"fuzz_sampleFailWithRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"fuzz_sampleFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/FuzzSampleContract.sol\":\"FuzzSampleContract\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSampleContract.sol\":{\"keccak256\":\"0x0a9ab520029e8fd54a88eb1d168dbdbc7521ce59b5ddfb0fd8c3fd4659688037\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0668ec628afd58fe3a2ddd14e051e3b9f358763dee70820ad5c352be1c995ecd\",\"dweb:/ipfs/QmaeCJ339gt337isPt5MNpSdfSVJDhT2qThGnZjGUZW6QQ\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/helpers/postconditions/PostconditionsBase.sol\":{\"keccak256\":\"0x7620b7f61fcb7e3607679cd40ab9b9fe08ba0753144c3fa16a979f30c7b697bd\",\"urls\":[\"bzz-raw://ac6bc39ae3e07aa7faf390ff8418d680c92b1abe9be3bc459c91fcac243e8b7f\",\"dweb:/ipfs/QmPEnrqNCfrnjrBYZj6S54kBqsVfWx3veSJbXkhqfY8Hjr\"]},\"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol\":{\"keccak256\":\"0xe0b6dfd287772112457c1815e260b672fa4a44eddc8e941bd7e7b7f442cc3f12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://176b618cd965a52efd124215b6d7181e3d852506a34ccf65c80eca366ea5cb52\",\"dweb:/ipfs/QmdyLkLSdU4Kq535JMRxXhcezqn5teK7tb57dGKymmRhKr\"]},\"test/fuzzing/helpers/preconditions/PreconditionsBase.sol\":{\"keccak256\":\"0x97170e06bf494e439c413c6208c5a43f7eadc3d1d6df9a9fe46090057a0e9cae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dc268531095ff7bd00c314e91e78e9b3448008e994c6d84d64d5593355eef4\",\"dweb:/ipfs/QmWmn3tjw7n6qzE6eUgrZ5hZJyVAHMR5dPZsHhnf6jYCh8\"]},\"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol\":{\"keccak256\":\"0x82df89f1b0ff934319ada37fe548c8c94afa1ad0dce56ba1903bd3772e19a456\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dadbd2920843037f75e7d6db220fbacd5c10e8781ef67723b2c1e96b89ac6466\",\"dweb:/ipfs/QmZC7dutMBKeSrqa9Z6DhXpWdamzvUBpWomiheibKV12yQ\"]},\"test/fuzzing/properties/Properties.sol\":{\"keccak256\":\"0xf9182045d5b5f54b24b43a79510b0683415d922ac2b2a6e00321e4084dcff499\",\"urls\":[\"bzz-raw://7e90e9737ec7f84afad701476f596fa5a1d5d0b4120ad3124ae865e8cd4698dd\",\"dweb:/ipfs/QmVNFwyrXGk8VkPScstJo6ZSGuVAY7DLv7aDzCK1jyxJoe\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/properties/Properties_ERR.sol\":{\"keccak256\":\"0x1a72ed86c160f1003cf577e117b9da09614d3ab3519e1aad621a1a35433fb488\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1028b0388ba604c47cb93b24ac5e5a9e569d623ea0e9824fc7ed0ac1f72cf2a0\",\"dweb:/ipfs/QmRwu894BMcJ4C7GQ7M5oMAcqyCRjKnuQZJHn89efn51yc\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/FuzzSampleContract.sol:FuzzSampleContract","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"192:3135:37:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;192:3135:37;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;192:3135:37;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;192:3135:37:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"","sourceMap":"192:3135:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2297:500:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3823:151:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2803:522:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;763:502;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1796:495;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3193:186:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;287:470:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2754:147:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1271:519:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;2297:500:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;2386:40:37::1;2429:46;2463:11;2429:33;:46::i;:::-;2386:89;;2486:31;2534:1;2520:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2486:50;;2566:12;;;;;;;;;;;2546:14;2561:1;2546:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;2588:23;2596:14;2588:7;:23::i;:::-;2623:12;2637:23:::0;2664:44:::1;2690:6;:17;;;2664:25;:44::i;:::-;2622:86;;;;2719:71;2754:7;2763:10;2775:14;2719:34;:71::i;:::-;2376:421;;;;2297:500:::0;:::o;3823:151:5:-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;2803:522:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;2894:45:37::1;2942:51;2981:11;2942:38;:51::i;:::-;2894:99;;3004:31;3052:1;3038:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3004:50;;3084:12;;;;;;;;;;;3064:14;3079:1;3064:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;3106:23;3114:14;3106:7;:23::i;:::-;3141:12;3155:23:::0;3182:49:::1;3213:6;:17;;;3182:30;:49::i;:::-;3140:91;;;;3242:76;3282:7;3291:10;3303:14;3242:39;:76::i;:::-;2884:441;;;;2803:522:::0;:::o;763:502::-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;850:41:37::1;894:47;929:11;894:34;:47::i;:::-;850:91;;952:31;1000:1;986:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;952:50;;1032:12;;;;;;;;;;;1012:14;1027:1;1012:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;1054:23;1062:14;1054:7;:23::i;:::-;1089:12;1103:23:::0;1130:45:::1;1157:6;:17;;;1130:26;:45::i;:::-;1088:87;;;;1186:72;1222:7;1231:10;1243:14;1186:35;:72::i;:::-;840:425;;;;763:502:::0;:::o;1796:495::-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;1884:39:37::1;1926:45;1959:11;1926:32;:45::i;:::-;1884:87;;1982:31;2030:1;2016:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1982:50;;2062:12;;;;;;;;;;;2042:14;2057:1;2042:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;2084:23;2092:14;2084:7;:23::i;:::-;2119:12;2133:23:::0;2160:43:::1;2185:6;:17;;;2160:24;:43::i;:::-;2118:85;;;;2214:70;2248:7;2257:10;2269:14;2214:33;:70::i;:::-;1874:417;;;;1796:495:::0;:::o;3193:186:5:-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;287:470:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;370:34:37::1;407:40;435:11;407:27;:40::i;:::-;370:77;;458:31;506:1;492:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;458:50;;538:12;;;;;;;;;;;518:14;533:1;518:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;560:23;568:14;560:7;:23::i;:::-;595:12;609:23:::0;636:38:::1;656:6;:17;;;636:19;:38::i;:::-;594:80;;;;685:65;714:7;723:10;735:14;685:28;:65::i;:::-;360:397;;;;287:470:::0;:::o;2754:147:5:-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;1271:519:37:-;214:9:44;;;;;;;;;;;210:710;;;239:18;260:35;279:9;;495:2:41;260:18:44;:35::i;:::-;239:56;;309:40;;;;;;;;;;;;;;;;;;339:9;;309:11;:40::i;:::-;378:5;450;:12;;;;495:2:41;446:10;419:9:44;;:17;;;;:::i;:::-;:24;;;;:::i;:::-;402:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;392:53;;;;;;384:62;;:79;;;;:::i;:::-;378:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;363:12;;:101;;;;;;;;;;;;;;;;;;492:1;479:9;;:14;;;;;;;:::i;:::-;;;;;;;;552:49;;;;;;;;;;;;;;;;;;578:22;587:12;;;;;;;;;;;578:8;:22::i;:::-;552:11;:49::i;:::-;637;;;;;;;;;;;;;;;;;;670:15;637:11;:49::i;:::-;770:13;;752:15;:31;748:162;;;317:28:0;309:37;;803:7:44;;;811:13;;803:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:162;;;880:15;864:13;:31;;;;748:162;225:695;210:710;934:24;945:12;;;;;;;;;;;934:24;;;;;;:::i;:::-;;;;;;;;1361:45:37::1;1409:49;1448:9;1409:38;:49::i;:::-;1361:97;;1469:31;1517:1;1503:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1469:50;;1549:12;;;;;;;;;;;1529:14;1544:1;1529:17;;;;;;;;:::i;:::-;;;;;;;:32;;;;;;;;;::::0;::::1;1571:23;1579:14;1571:7;:23::i;:::-;1606:12;1620:23:::0;1647:49:::1;1678:6;:17;;;1647:30;:49::i;:::-;1605:91;;;;1707:76;1747:7;1756:10;1768:14;1707:39;:76::i;:::-;1351:439;;;;1271:519:::0;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;2367:179:44:-;2451:7;2532:4;446:10:41;2512:9:44;:17;;;;:::i;:::-;:24;;;;:::i;:::-;2495:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;2485:53;;;;;;2477:62;;2470:69;;2367:179;;;;:::o;7032:139:14:-;7096:68;7156:2;7160;7112:51;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7096:15;:68::i;:::-;7032:139;;:::o;2552:464:44:-;2608:17;2637:14;2664:2;2654:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2637:30;;2682:9;2677:307;2701:2;2697:1;:6;2677:307;;;2724:8;2791:1;2786:2;:6;;;;:::i;:::-;2781:1;:12;;;;:::i;:::-;2775:1;:19;;;;:::i;:::-;2764:5;2748:23;;:47;;;;:::i;:::-;2735:62;;2724:73;;2811:9;2841:2;2836:1;2830:8;;:13;;;;:::i;:::-;2823:21;;2811:33;;2858:9;2899:2;2893:9;;2888:2;:14;;;;:::i;:::-;2883:1;2877:8;;:25;;;;:::i;:::-;2870:33;;2858:45;;2928:8;2933:2;2928:4;:8::i;:::-;2917:1;2923;2919;:5;;;;:::i;:::-;2917:8;;;;;;;;:::i;:::-;;;;;:19;;;;;;;;;;;2965:8;2970:2;2965:4;:8::i;:::-;2950:1;2960;2956;2952;:5;;;;:::i;:::-;:9;;;;:::i;:::-;2950:12;;;;;;;;:::i;:::-;;;;;:23;;;;;;;;;;;2710:274;;;2705:3;;;;;;;2677:307;;;;3007:1;2993:16;;;2552:464;;;:::o;7320:150:14:-;7393:70;7455:2;7459;7409:53;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7393:15;:70::i;:::-;7320:150;;:::o;951:192:45:-;1049:40;;:::i;:::-;1125:11;1105:6;:17;;:31;;;;;951:192;;;:::o;755:89:40:-;816:21;827:1;830:6;816:10;:21::i;:::-;755:89;:::o;1618:319:51:-;1692:12;1706:23;317:28:0;309:37;;1741:8:51;;;1750:12;;;;;;;;;;;1741:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1805:14;;;;;;;;;;;1797:28;;1862:44;;;1908:11;1839:81;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1797:133;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1773:157;;;;;;;;1618:319;;;:::o;1450:295:43:-;1601:7;1597:142;;;1624:38;1651:10;1624:26;:38::i;:::-;1597:142;;;1693:35;1717:10;1693:23;:35::i;:::-;1597:142;1450:295;;;:::o;1149:199:45:-;1249:45;;:::i;:::-;1330:11;1310:6;:17;;:31;;;;;;;;;;;1149:199;;;:::o;1943:346:51:-;2035:12;2049:23;317:28:0;309:37;;2088:8:51;;;2097:12;;;;;;;;;;;2088:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2152:14;;;;;;;;;;;2144:28;;2209:49;;;2260:11;2186:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2144:138;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2120:162;;;;;;;;1943:346;;;:::o;1751:318:43:-;1925:7;1921:142;;;1948:38;1975:10;1948:26;:38::i;:::-;1921:142;;;2017:35;2041:10;2017:23;:35::i;:::-;1921:142;1751:318;;;:::o;340:191:45:-;436:41;;:::i;:::-;513:11;493:6;:17;;:31;;;;;;;;;;;340:191;;;:::o;618:318:51:-;690:12;704:23;317:28:0;309:37;;739:8:51;;;748:12;;;;;;;;;;;739:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;803:14;;;;;;;;;;;795:28;;860:45;;;907:11;837:82;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;795:134;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;771:158;;;;;;;;618:318;;;:::o;524:296:43:-;676:7;672:142;;;699:38;726:10;699:26;:38::i;:::-;672:142;;;768:35;792:10;768:23;:35::i;:::-;672:142;524:296;;;:::o;739:206:45:-;836:39;;:::i;:::-;911:2;;;;;;;;;;:8;;;920:11;933:1;936;911:27;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;891:6;:17;;:47;;;;;739:206;;;:::o;1295:317:51:-;1368:12;1382:23;317:28:0;309:37;;1417:8:51;;;1426:12;;;;;;;;;;;1417:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1481:14;;;;;;;;;;;1473:28;;1538:43;;;1583:11;1515:80;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1473:132;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1449:156;;;;;;;;1295:317;;;:::o;1150:294:43:-;1300:7;1296:142;;;1323:38;1350:10;1323:26;:38::i;:::-;1296:142;;;1392:35;1416:10;1392:23;:35::i;:::-;1296:142;1150:294;;;:::o;156:178:45:-;232:34;;:::i;:::-;298:2;;;;;;;;;;:8;;;307:11;320:1;323:3;298:29;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;278:6;:17;;:49;;;;;156:178;;;:::o;268:344:51:-;336:12;350:23;390:31;409:11;390:31;;;;;;:::i;:::-;;;;;;;;317:28:0;309:37;;432:8:51;;;441:12;;;;;;;;;;;432:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;508:14;;;;;;;;;;;500:28;;552:38;;;592:11;529:75;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;500:105;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;464:141;;;;;;;;268:344;;;:::o;159:359:43:-;304:7;300:212;;;327:22;334:14;327:6;:22::i;:::-;364:18;:16;:18::i;:::-;;397:38;424:10;397:26;:38::i;:::-;300:212;;;466:35;490:10;466:23;:35::i;:::-;300:212;159:359;;;:::o;537:196:45:-;636:45;;:::i;:::-;717:9;697:6;:17;;:29;;;;;;;;;;;537:196;;;:::o;942:347:51:-;1035:12;1049:23;317:28:0;309:37;;1088:8:51;;;1097:12;;;;;;;;;;;1088:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1152:14;;;;;;;;;;;1144:28;;1209:49;;;1260:11;1186:86;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1144:138;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:162;;;;;;;;942:347;;;:::o;826:318:43:-;1000:7;996:142;;;1023:38;1050:10;1023:26;:38::i;:::-;996:142;;;1092:35;1116:10;1092:23;:35::i;:::-;996:142;826:318;;;:::o;408:133:14:-;479:55;526:7;479:46;505:19;479:25;:46::i;:::-;:55;;:::i;:::-;408:133;:::o;3022:168:44:-;3069:8;3104:2;3099:1;3093:8;;:13;;;3089:94;;;3133:4;3128:1;3122:8;;:15;;;;:::i;:::-;3115:23;;3108:30;;;;3089:94;3178:4;3173:1;3167:8;;:15;;;;:::i;:::-;3160:23;;3153:30;;3022:168;;;;:::o;944:154:40:-;1023:31;1038:7;1047:6;1023:14;:31::i;:::-;1064:27;1083:7;1064:18;:27::i;:::-;944:154;;:::o;117:106:42:-;197:19;:17;:19::i;:::-;;117:106;:::o;229:109::-;306:25;320:10;306:13;:25::i;:::-;229:109;:::o;850:88:40:-;910:21;921:1;924:6;910:10;:21::i;:::-;850:88;:::o;541:85:46:-;592:4;615;608:11;;541:85;:::o;547:380:14:-;621:21;645:7;:14;621:38;;669:22;131:42;669:40;;818:2;809:7;805:16;909:1;906;891:13;877:12;861:14;854:5;843:68;771:150;;;;547:380;:::o;181:221::-;296:42;382:4;373:13;;181:221;;;:::o;1104:191:40:-;1191:9;1186:103;1210:6;:13;1206:1;:17;1186:103;;;1244:34;1259:7;1268:6;1275:1;1268:9;;;;;;;;:::i;:::-;;;;;;;;1244:14;:34::i;:::-;1225:3;;;;;;;1186:103;;;;1104:191;;:::o;1301:100::-;1362:32;1386:7;1362:23;:32::i;:::-;1301:100;:::o;274:86:46:-;326:4;349;342:11;;274:86;:::o;149:915:49:-;273:1;252:10;:17;:22;248:267;;893:4:41;290:194:49;;;333:2;;;;;;;;;;:4;;;338:5;333:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;290:194;;;416:2;;;;;;;;;;:4;;;421;416:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;290:194;498:7;;248:267;525:20;617:4;605:10;601:21;595:28;578:45;;702:27;678:52;;;:13;:52;;;;674:127;;746:24;759:10;746:12;:24::i;:::-;784:7;;;674:127;878:26;854:51;;;:13;:51;;;;850:126;;921:24;934:10;921:12;:24::i;:::-;959:7;;;850:126;1027:30;1046:10;1027:18;:30::i;:::-;206:858;149:915;;:::o;1407:123:40:-;1488:35;1508:7;1517:5;1488:19;:35::i;:::-;1407:123;;:::o;1764:240::-;1831:88;;;;;;;;;;;;;;;;;;1878:7;1831:88;;1895:14;;;;;;;;;;;1887:31;;;1831:11;:88::i;:::-;1974:14;;;;;;;;;;;1966:31;;;1929:6;:15;1936:7;1929:15;;;;;;;;;;;;;;;:34;;:68;;;;1764:240;:::o;2465:558:49:-;2530:17;2550:29;2568:10;2550:17;:29::i;:::-;2530:49;;2589:29;2621:23;:21;:23::i;:::-;2589:55;;2654:14;2692:9;2687:180;2711:12;:19;2707:1;:23;2687:180;;;2768:12;2781:1;2768:15;;;;;;;;:::i;:::-;;;;;;;;2755:9;:28;2751:106;;2815:4;2803:16;;2837:5;;2751:106;2732:3;;;;;;;2687:180;;;;2877:2;;;;;;;;;;:6;;;2906:9;2898:18;;2877:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2932:9;2927:90;;2957:2;;;;;;;;;;:4;;;2962:5;2957:49;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2927:90;2520:503;;;2465:558;:::o;3029:415::-;3094:23;3120:33;3142:10;3120:21;:33::i;:::-;3094:59;;3163:2;;;;;;;;;;:6;;;3207:9;3163:54;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3232:32;3253:10;3232:20;:32::i;:::-;3228:127;;;3280:2;;;;;;;;;;:6;;;3314:9;3280:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3338:7;;;3228:127;793:4:41;3365:73:49;;;3405:2;;;;;;;;;;:4;;;3410:5;3417:9;3405:22;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3365:73;3084:360;3029:415;;:::o;3450:346::-;3521:20;3613:4;3601:10;3597:21;3591:28;3574:45;;3639:2;;;;;;;;;;:6;;;3684:33;3706:10;3684:21;:33::i;:::-;3639:79;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3728:2;;;;;;;;;;:11;;;3740:13;3755:25;:23;:25::i;:::-;3782:6;;;;;;;;;;;;;;;;;3728:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3511:285;3450:346;:::o;1536:222:40:-;1613:65;;;;;;;;;;;;;;;;;;1656:7;1613:65;;1665:4;:12;;;1613:11;:65::i;:::-;1739:4;:12;;;1688:6;:15;1695:7;1688:15;;;;;;;;;;;;;;;:27;;:33;1716:4;1688:33;;;;;;;;;;;;;;;:48;;:63;;;;1536:222;;:::o;11470:157:14:-;11543:77;11608:2;11612;11616;11559:60;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11543:15;:77::i;:::-;11470:157;;;:::o;3802:420:49:-;3871:7;3890:2;;;;;;;;;;;:6;;;3919:10;:17;3890:47;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3971:2;3951:10;:17;:22;3947:134;;;3989:2;;;;;;;;;;:4;;;3994:5;3989:59;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4069:1;4062:8;;;;3947:134;4091:17;4176:2;4164:10;4160:19;4154:26;4141:39;;4206:9;4199:16;;;3802:420;;;;:::o;249:404:50:-;322:16;350:27;394:1;380:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;350:46;;2043:4:53;406:10:50;417:1;406:13;;;;;;;;:::i;:::-;;;;;;;:40;;;;;2176:4:53;456:10:50;467:1;456:13;;;;;;;;:::i;:::-;;;;;;;:37;;;;;2240:4:53;503:10:50;514:1;503:13;;;;;;;;:::i;:::-;;;;;;;:41;;;;;1919:4:53;554:10:50;565:1;554:13;;;;;;;;:::i;:::-;;;;;;;:32;;;;;636:10;629:17;;;249:404;:::o;4228:454:49:-;4302:13;4352:2;4331:11;:18;:23;4327:219;;;4370:2;;;;;;;;;;:6;;;4402:11;4370:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4428:2;;;;;;;;;;:4;;;4433:5;4428:58;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4500:35;;;;;;;;;;;;;;;;;;;;;4327:219;4611:4;4598:11;4594:22;4579:37;;4653:11;4642:33;;;;;;;;;;;;:::i;:::-;4635:40;;4228:454;;;;:::o;905:790:50:-;1000:4;1016:28;1059:1;1047:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1016:45;;468:26:53;438:91;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1071:13:50;1085:1;1071:16;;;;;;;;:::i;:::-;;;;;;;:41;;;;618:26:53;588:99;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1122:13:50;1136:1;1122:16;;;;;;;;:::i;:::-;;;;;;;:37;;;;774:26:53;744:97;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1169:13:50;1183:1;1169:16;;;;;;;;:::i;:::-;;;;;;;:35;;;;927:26:53;897:96;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1214:13:50;1228:1;1214:16;;;;;;;;:::i;:::-;;;;;;;:34;;;;1076:26:53;1046:93;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1258:13:50;1272:1;1258:16;;;;;;;;:::i;:::-;;;;;;;:31;;;;1224:26:53;1194:95;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1299:13:50;1313:1;1299:16;;;;;;;;:::i;:::-;;;;;;;:33;;;;1379:26:53;1349:99;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1342:13:50;1356:1;1342:16;;;;;;;;:::i;:::-;;;;;;;:38;;;;1539:26:53;1509:96;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1390:13:50;1404:1;1390:16;;;;;;;;:::i;:::-;;;;;;;:39;;;;305:26:53;275:100;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1439:13:50;1453:1;1439:16;;;;;;;;:::i;:::-;;;;;;;:40;;;;1495:9;1490:177;1514:13;:20;1510:1;:24;1490:177;;;1594:13;1608:1;1594:16;;;;;;;;:::i;:::-;;;;;;;;1584:27;;;;;;1569:10;1559:21;;;;;;:52;1555:102;;1638:4;1631:11;;;;;;1555:102;1536:3;;;;;;;1490:177;;;;1683:5;1676:12;;;905:790;;;;:::o;659:240::-;734:15;761:29;806:1;793:15;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;761:47;;879:13;872:20;;;659:240;:::o;-1:-1:-1:-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:75::-;2287:6;2320:2;2314:9;2304:19;;2254:75;:::o;2335:117::-;2444:1;2441;2434:12;2458:117;2567:1;2564;2557:12;2581:77;2618:7;2647:5;2636:16;;2581:77;;;:::o;2664:122::-;2737:24;2755:5;2737:24;:::i;:::-;2730:5;2727:35;2717:63;;2776:1;2773;2766:12;2717:63;2664:122;:::o;2792:139::-;2838:5;2876:6;2863:20;2854:29;;2892:33;2919:5;2892:33;:::i;:::-;2792:139;;;;:::o;2937:329::-;2996:6;3045:2;3033:9;3024:7;3020:23;3016:32;3013:119;;;3051:79;;:::i;:::-;3013:119;3171:1;3196:53;3241:7;3232:6;3221:9;3217:22;3196:53;:::i;:::-;3186:63;;3142:117;2937:329;;;;:::o;3272:145::-;3370:6;3404:5;3398:12;3388:22;;3272:145;;;:::o;3423:215::-;3553:11;3587:6;3582:3;3575:19;3627:4;3622:3;3618:14;3603:29;;3423:215;;;;:::o;3644:163::-;3742:4;3765:3;3757:11;;3795:4;3790:3;3786:14;3778:22;;3644:163;;;:::o;3813:124::-;3890:6;3924:5;3918:12;3908:22;;3813:124;;;:::o;3943:184::-;4042:11;4076:6;4071:3;4064:19;4116:4;4111:3;4107:14;4092:29;;3943:184;;;;:::o;4133:142::-;4210:4;4233:3;4225:11;;4263:4;4258:3;4254:14;4246:22;;4133:142;;;:::o;4281:99::-;4333:6;4367:5;4361:12;4351:22;;4281:99;;;:::o;4386:159::-;4460:11;4494:6;4489:3;4482:19;4534:4;4529:3;4525:14;4510:29;;4386:159;;;;:::o;4551:139::-;4640:6;4635:3;4630;4624:23;4681:1;4672:6;4667:3;4663:16;4656:27;4551:139;;;:::o;4696:102::-;4737:6;4788:2;4784:7;4779:2;4772:5;4768:14;4764:28;4754:38;;4696:102;;;:::o;4804:357::-;4882:3;4910:39;4943:5;4910:39;:::i;:::-;4965:61;5019:6;5014:3;4965:61;:::i;:::-;4958:68;;5035:65;5093:6;5088:3;5081:4;5074:5;5070:16;5035:65;:::i;:::-;5125:29;5147:6;5125:29;:::i;:::-;5120:3;5116:39;5109:46;;4886:275;4804:357;;;;:::o;5167:196::-;5256:10;5291:66;5353:3;5345:6;5291:66;:::i;:::-;5277:80;;5167:196;;;;:::o;5369:123::-;5449:4;5481;5476:3;5472:14;5464:22;;5369:123;;;:::o;5526:971::-;5655:3;5684:64;5742:5;5684:64;:::i;:::-;5764:86;5843:6;5838:3;5764:86;:::i;:::-;5757:93;;5876:3;5921:4;5913:6;5909:17;5904:3;5900:27;5951:66;6011:5;5951:66;:::i;:::-;6040:7;6071:1;6056:396;6081:6;6078:1;6075:13;6056:396;;;6152:9;6146:4;6142:20;6137:3;6130:33;6203:6;6197:13;6231:84;6310:4;6295:13;6231:84;:::i;:::-;6223:92;;6338:70;6401:6;6338:70;:::i;:::-;6328:80;;6437:4;6432:3;6428:14;6421:21;;6116:336;6103:1;6100;6096:9;6091:14;;6056:396;;;6060:14;6468:4;6461:11;;6488:3;6481:10;;5660:837;;;;;5526:971;;;;:::o;6581:663::-;6702:3;6738:4;6733:3;6729:14;6825:4;6818:5;6814:16;6808:23;6844:63;6901:4;6896:3;6892:14;6878:12;6844:63;:::i;:::-;6753:164;7004:4;6997:5;6993:16;6987:23;7057:3;7051:4;7047:14;7040:4;7035:3;7031:14;7024:38;7083:123;7201:4;7187:12;7083:123;:::i;:::-;7075:131;;6927:290;7234:4;7227:11;;6707:537;6581:663;;;;:::o;7250:280::-;7381:10;7416:108;7520:3;7512:6;7416:108;:::i;:::-;7402:122;;7250:280;;;;:::o;7536:144::-;7637:4;7669;7664:3;7660:14;7652:22;;7536:144;;;:::o;7768:1159::-;7949:3;7978:85;8057:5;7978:85;:::i;:::-;8079:117;8189:6;8184:3;8079:117;:::i;:::-;8072:124;;8222:3;8267:4;8259:6;8255:17;8250:3;8246:27;8297:87;8378:5;8297:87;:::i;:::-;8407:7;8438:1;8423:459;8448:6;8445:1;8442:13;8423:459;;;8519:9;8513:4;8509:20;8504:3;8497:33;8570:6;8564:13;8598:126;8719:4;8704:13;8598:126;:::i;:::-;8590:134;;8747:91;8831:6;8747:91;:::i;:::-;8737:101;;8867:4;8862:3;8858:14;8851:21;;8483:399;8470:1;8467;8463:9;8458:14;;8423:459;;;8427:14;8898:4;8891:11;;8918:3;8911:10;;7954:973;;;;;7768:1159;;;;:::o;8933:497::-;9138:4;9176:2;9165:9;9161:18;9153:26;;9225:9;9219:4;9215:20;9211:1;9200:9;9196:17;9189:47;9253:170;9418:4;9409:6;9253:170;:::i;:::-;9245:178;;8933:497;;;;:::o;9436:90::-;9470:7;9513:5;9506:13;9499:21;9488:32;;9436:90;;;:::o;9532:116::-;9602:21;9617:5;9602:21;:::i;:::-;9595:5;9592:32;9582:60;;9638:1;9635;9628:12;9582:60;9532:116;:::o;9654:133::-;9697:5;9735:6;9722:20;9713:29;;9751:30;9775:5;9751:30;:::i;:::-;9654:133;;;;:::o;9793:323::-;9849:6;9898:2;9886:9;9877:7;9873:23;9869:32;9866:119;;;9904:79;;:::i;:::-;9866:119;10024:1;10049:50;10091:7;10082:6;10071:9;10067:22;10049:50;:::i;:::-;10039:60;;9995:114;9793:323;;;;:::o;10122:152::-;10227:6;10261:5;10255:12;10245:22;;10122:152;;;:::o;10280:222::-;10417:11;10451:6;10446:3;10439:19;10491:4;10486:3;10482:14;10467:29;;10280:222;;;;:::o;10508:170::-;10613:4;10636:3;10628:11;;10666:4;10661:3;10657:14;10649:22;;10508:170;;;:::o;10684:113::-;10750:6;10784:5;10778:12;10768:22;;10684:113;;;:::o;10803:173::-;10891:11;10925:6;10920:3;10913:19;10965:4;10960:3;10956:14;10941:29;;10803:173;;;;:::o;10982:131::-;11048:4;11071:3;11063:11;;11101:4;11096:3;11092:14;11084:22;;10982:131;;;:::o;11119:149::-;11155:7;11195:66;11188:5;11184:78;11173:89;;11119:149;;;:::o;11274:105::-;11349:23;11366:5;11349:23;:::i;:::-;11344:3;11337:36;11274:105;;:::o;11385:175::-;11452:10;11473:44;11513:3;11505:6;11473:44;:::i;:::-;11549:4;11544:3;11540:14;11526:28;;11385:175;;;;:::o;11566:112::-;11635:4;11667;11662:3;11658:14;11650:22;;11566:112;;;:::o;11712:704::-;11819:3;11848:53;11895:5;11848:53;:::i;:::-;11917:75;11985:6;11980:3;11917:75;:::i;:::-;11910:82;;12016:55;12065:5;12016:55;:::i;:::-;12094:7;12125:1;12110:281;12135:6;12132:1;12129:13;12110:281;;;12211:6;12205:13;12238:61;12295:3;12280:13;12238:61;:::i;:::-;12231:68;;12322:59;12374:6;12322:59;:::i;:::-;12312:69;;12170:221;12157:1;12154;12150:9;12145:14;;12110:281;;;12114:14;12407:3;12400:10;;11824:592;;;11712:704;;;;:::o;12514:730::-;12649:3;12685:4;12680:3;12676:14;12776:4;12769:5;12765:16;12759:23;12829:3;12823:4;12819:14;12812:4;12807:3;12803:14;12796:38;12855:73;12923:4;12909:12;12855:73;:::i;:::-;12847:81;;12700:239;13026:4;13019:5;13015:16;13009:23;13079:3;13073:4;13069:14;13062:4;13057:3;13053:14;13046:38;13105:101;13201:4;13187:12;13105:101;:::i;:::-;13097:109;;12949:268;13234:4;13227:11;;12654:590;12514:730;;;;:::o;13250:308::-;13395:10;13430:122;13548:3;13540:6;13430:122;:::i;:::-;13416:136;;13250:308;;;;:::o;13564:151::-;13672:4;13704;13699:3;13695:14;13687:22;;13564:151;;;:::o;13817:1215::-;14012:3;14041:92;14127:5;14041:92;:::i;:::-;14149:124;14266:6;14261:3;14149:124;:::i;:::-;14142:131;;14299:3;14344:4;14336:6;14332:17;14327:3;14323:27;14374:94;14462:5;14374:94;:::i;:::-;14491:7;14522:1;14507:480;14532:6;14529:1;14526:13;14507:480;;;14603:9;14597:4;14593:20;14588:3;14581:33;14654:6;14648:13;14682:140;14817:4;14802:13;14682:140;:::i;:::-;14674:148;;14845:98;14936:6;14845:98;:::i;:::-;14835:108;;14972:4;14967:3;14963:14;14956:21;;14567:420;14554:1;14551;14547:9;14542:14;;14507:480;;;14511:14;15003:4;14996:11;;15023:3;15016:10;;14017:1015;;;;;13817:1215;;;;:::o;15038:525::-;15257:4;15295:2;15284:9;15280:18;15272:26;;15344:9;15338:4;15334:20;15330:1;15319:9;15315:17;15308:47;15372:184;15551:4;15542:6;15372:184;:::i;:::-;15364:192;;15038:525;;;;:::o;15569:194::-;15678:11;15712:6;15707:3;15700:19;15752:4;15747:3;15743:14;15728:29;;15569:194;;;;:::o;15797:991::-;15936:3;15965:64;16023:5;15965:64;:::i;:::-;16045:96;16134:6;16129:3;16045:96;:::i;:::-;16038:103;;16167:3;16212:4;16204:6;16200:17;16195:3;16191:27;16242:66;16302:5;16242:66;:::i;:::-;16331:7;16362:1;16347:396;16372:6;16369:1;16366:13;16347:396;;;16443:9;16437:4;16433:20;16428:3;16421:33;16494:6;16488:13;16522:84;16601:4;16586:13;16522:84;:::i;:::-;16514:92;;16629:70;16692:6;16629:70;:::i;:::-;16619:80;;16728:4;16723:3;16719:14;16712:21;;16407:336;16394:1;16391;16387:9;16382:14;;16347:396;;;16351:14;16759:4;16752:11;;16779:3;16772:10;;15941:847;;;;;15797:991;;;;:::o;16794:413::-;16957:4;16995:2;16984:9;16980:18;16972:26;;17044:9;17038:4;17034:20;17030:1;17019:9;17015:17;17008:47;17072:128;17195:4;17186:6;17072:128;:::i;:::-;17064:136;;16794:413;;;;:::o;17213:144::-;17310:6;17344:5;17338:12;17328:22;;17213:144;;;:::o;17363:214::-;17492:11;17526:6;17521:3;17514:19;17566:4;17561:3;17557:14;17542:29;;17363:214;;;;:::o;17583:162::-;17680:4;17703:3;17695:11;;17733:4;17728:3;17724:14;17716:22;;17583:162;;;:::o;17827:639::-;17946:3;17982:4;17977:3;17973:14;18069:4;18062:5;18058:16;18052:23;18088:63;18145:4;18140:3;18136:14;18122:12;18088:63;:::i;:::-;17997:164;18248:4;18241:5;18237:16;18231:23;18301:3;18295:4;18291:14;18284:4;18279:3;18275:14;18268:38;18327:101;18423:4;18409:12;18327:101;:::i;:::-;18319:109;;18171:268;18456:4;18449:11;;17951:515;17827:639;;;;:::o;18472:276::-;18601:10;18636:106;18738:3;18730:6;18636:106;:::i;:::-;18622:120;;18472:276;;;;:::o;18754:143::-;18854:4;18886;18881:3;18877:14;18869:22;;18754:143;;;:::o;18983:1151::-;19162:3;19191:84;19269:5;19191:84;:::i;:::-;19291:116;19400:6;19395:3;19291:116;:::i;:::-;19284:123;;19433:3;19478:4;19470:6;19466:17;19461:3;19457:27;19508:86;19588:5;19508:86;:::i;:::-;19617:7;19648:1;19633:456;19658:6;19655:1;19652:13;19633:456;;;19729:9;19723:4;19719:20;19714:3;19707:33;19780:6;19774:13;19808:124;19927:4;19912:13;19808:124;:::i;:::-;19800:132;;19955:90;20038:6;19955:90;:::i;:::-;19945:100;;20074:4;20069:3;20065:14;20058:21;;19693:396;19680:1;19677;19673:9;19668:14;;19633:456;;;19637:14;20105:4;20098:11;;20125:3;20118:10;;19167:967;;;;;18983:1151;;;;:::o;20140:493::-;20343:4;20381:2;20370:9;20366:18;20358:26;;20430:9;20424:4;20420:20;20416:1;20405:9;20401:17;20394:47;20458:168;20621:4;20612:6;20458:168;:::i;:::-;20450:176;;20140:493;;;;:::o;20639:109::-;20720:21;20735:5;20720:21;:::i;:::-;20715:3;20708:34;20639:109;;:::o;20754:210::-;20841:4;20879:2;20868:9;20864:18;20856:26;;20892:65;20954:1;20943:9;20939:17;20930:6;20892:65;:::i;:::-;20754:210;;;;:::o;20970:86::-;21005:7;21045:4;21038:5;21034:16;21023:27;;20970:86;;;:::o;21062:118::-;21133:22;21149:5;21133:22;:::i;:::-;21126:5;21123:33;21113:61;;21170:1;21167;21160:12;21113:61;21062:118;:::o;21186:135::-;21230:5;21268:6;21255:20;21246:29;;21284:31;21309:5;21284:31;:::i;:::-;21186:135;;;;:::o;21327:325::-;21384:6;21433:2;21421:9;21412:7;21408:23;21404:32;21401:119;;;21439:79;;:::i;:::-;21401:119;21559:1;21584:51;21627:7;21618:6;21607:9;21603:22;21584:51;:::i;:::-;21574:61;;21530:115;21327:325;;;;:::o;21658:180::-;21706:77;21703:1;21696:88;21803:4;21800:1;21793:15;21827:4;21824:1;21817:15;21844:410;21884:7;21907:20;21925:1;21907:20;:::i;:::-;21902:25;;21941:20;21959:1;21941:20;:::i;:::-;21936:25;;21996:1;21993;21989:9;22018:30;22036:11;22018:30;:::i;:::-;22007:41;;22197:1;22188:7;22184:15;22181:1;22178:22;22158:1;22151:9;22131:83;22108:139;;22227:18;;:::i;:::-;22108:139;21892:362;21844:410;;;;:::o;22260:191::-;22300:3;22319:20;22337:1;22319:20;:::i;:::-;22314:25;;22353:20;22371:1;22353:20;:::i;:::-;22348:25;;22396:1;22393;22389:9;22382:16;;22417:3;22414:1;22411:10;22408:36;;;22424:18;;:::i;:::-;22408:36;22260:191;;;;:::o;22457:79::-;22496:7;22525:5;22514:16;;22457:79;;;:::o;22542:157::-;22647:45;22667:24;22685:5;22667:24;:::i;:::-;22647:45;:::i;:::-;22642:3;22635:58;22542:157;;:::o;22705:256::-;22817:3;22832:75;22903:3;22894:6;22832:75;:::i;:::-;22932:2;22927:3;22923:12;22916:19;;22952:3;22945:10;;22705:256;;;;:::o;22967:180::-;23015:77;23012:1;23005:88;23112:4;23109:1;23102:15;23136:4;23133:1;23126:15;23153:176;23185:1;23202:20;23220:1;23202:20;:::i;:::-;23197:25;;23236:20;23254:1;23236:20;:::i;:::-;23231:25;;23275:1;23265:35;;23280:18;;:::i;:::-;23265:35;23321:1;23318;23314:9;23309:14;;23153:176;;;;:::o;23335:180::-;23383:77;23380:1;23373:88;23480:4;23477:1;23470:15;23504:4;23501:1;23494:15;23521:118;23608:24;23626:5;23608:24;:::i;:::-;23603:3;23596:37;23521:118;;:::o;23645:222::-;23738:4;23776:2;23765:9;23761:18;23753:26;;23789:71;23857:1;23846:9;23842:17;23833:6;23789:71;:::i;:::-;23645:222;;;;:::o;23873:118::-;23960:24;23978:5;23960:24;:::i;:::-;23955:3;23948:37;23873:118;;:::o;23997:222::-;24090:4;24128:2;24117:9;24113:18;24105:26;;24141:71;24209:1;24198:9;24194:17;24185:6;24141:71;:::i;:::-;23997:222;;;;:::o;24225:180::-;24273:77;24270:1;24263:88;24370:4;24367:1;24360:15;24394:4;24391:1;24384:15;24411:180;24459:77;24456:1;24449:88;24556:4;24553:1;24546:15;24580:4;24577:1;24570:15;24597:320;24641:6;24678:1;24672:4;24668:12;24658:22;;24725:1;24719:4;24715:12;24746:18;24736:81;;24802:4;24794:6;24790:17;24780:27;;24736:81;24864:2;24856:6;24853:14;24833:18;24830:38;24827:84;;24883:18;;:::i;:::-;24827:84;24648:269;24597:320;;;:::o;24923:77::-;24960:7;24989:5;24978:16;;24923:77;;;:::o;25006:118::-;25093:24;25111:5;25093:24;:::i;:::-;25088:3;25081:37;25006:118;;:::o;25130:332::-;25251:4;25289:2;25278:9;25274:18;25266:26;;25302:71;25370:1;25359:9;25355:17;25346:6;25302:71;:::i;:::-;25383:72;25451:2;25440:9;25436:18;25427:6;25383:72;:::i;:::-;25130:332;;;;;:::o;25468:122::-;25541:24;25559:5;25541:24;:::i;:::-;25534:5;25531:35;25521:63;;25580:1;25577;25570:12;25521:63;25468:122;:::o;25596:143::-;25653:5;25684:6;25678:13;25669:22;;25700:33;25727:5;25700:33;:::i;:::-;25596:143;;;;:::o;25745:351::-;25815:6;25864:2;25852:9;25843:7;25839:23;25835:32;25832:119;;;25870:79;;:::i;:::-;25832:119;25990:1;26015:64;26071:7;26062:6;26051:9;26047:22;26015:64;:::i;:::-;26005:74;;25961:128;25745:351;;;;:::o;26102:169::-;26186:11;26220:6;26215:3;26208:19;26260:4;26255:3;26251:14;26236:29;;26102:169;;;;:::o;26277:377::-;26365:3;26393:39;26426:5;26393:39;:::i;:::-;26448:71;26512:6;26507:3;26448:71;:::i;:::-;26441:78;;26528:65;26586:6;26581:3;26574:4;26567:5;26563:16;26528:65;:::i;:::-;26618:29;26640:6;26618:29;:::i;:::-;26613:3;26609:39;26602:46;;26369:285;26277:377;;;;:::o;26660:423::-;26801:4;26839:2;26828:9;26824:18;26816:26;;26888:9;26882:4;26878:20;26874:1;26863:9;26859:17;26852:47;26916:78;26989:4;26980:6;26916:78;:::i;:::-;26908:86;;27004:72;27072:2;27061:9;27057:18;27048:6;27004:72;:::i;:::-;26660:423;;;;;:::o;27089:194::-;27129:4;27149:20;27167:1;27149:20;:::i;:::-;27144:25;;27183:20;27201:1;27183:20;:::i;:::-;27178:25;;27227:1;27224;27220:9;27212:17;;27251:1;27245:4;27242:11;27239:37;;;27256:18;;:::i;:::-;27239:37;27089:194;;;;:::o;27289:102::-;27331:8;27378:5;27375:1;27371:13;27350:34;;27289:102;;;:::o;27397:848::-;27458:5;27465:4;27489:6;27480:15;;27513:5;27504:14;;27527:712;27548:1;27538:8;27535:15;27527:712;;;27643:4;27638:3;27634:14;27628:4;27625:24;27622:50;;;27652:18;;:::i;:::-;27622:50;27702:1;27692:8;27688:16;27685:451;;;28117:4;28110:5;28106:16;28097:25;;27685:451;28167:4;28161;28157:15;28149:23;;28197:32;28220:8;28197:32;:::i;:::-;28185:44;;27527:712;;;27397:848;;;;;;;:::o;28251:1073::-;28305:5;28496:8;28486:40;;28517:1;28508:10;;28519:5;;28486:40;28545:4;28535:36;;28562:1;28553:10;;28564:5;;28535:36;28631:4;28679:1;28674:27;;;;28715:1;28710:191;;;;28624:277;;28674:27;28692:1;28683:10;;28694:5;;;28710:191;28755:3;28745:8;28742:17;28739:43;;;28762:18;;:::i;:::-;28739:43;28811:8;28808:1;28804:16;28795:25;;28846:3;28839:5;28836:14;28833:40;;;28853:18;;:::i;:::-;28833:40;28886:5;;;28624:277;;29010:2;29000:8;28997:16;28991:3;28985:4;28982:13;28978:36;28960:2;28950:8;28947:16;28942:2;28936:4;28933:12;28929:35;28913:111;28910:246;;;29066:8;29060:4;29056:19;29047:28;;29101:3;29094:5;29091:14;29088:40;;;29108:18;;:::i;:::-;29088:40;29141:5;;28910:246;29181:42;29219:3;29209:8;29203:4;29200:1;29181:42;:::i;:::-;29166:57;;;;29255:4;29250:3;29246:14;29239:5;29236:25;29233:51;;;29264:18;;:::i;:::-;29233:51;29313:4;29306:5;29302:16;29293:25;;28251:1073;;;;;;:::o;29330:285::-;29390:5;29414:23;29432:4;29414:23;:::i;:::-;29406:31;;29458:27;29476:8;29458:27;:::i;:::-;29446:39;;29504:104;29541:66;29531:8;29525:4;29504:104;:::i;:::-;29495:113;;29330:285;;;;:::o;29621:185::-;29661:1;29678:20;29696:1;29678:20;:::i;:::-;29673:25;;29712:20;29730:1;29712:20;:::i;:::-;29707:25;;29751:1;29741:35;;29756:18;;:::i;:::-;29741:35;29798:1;29795;29791:9;29786:14;;29621:185;;;;:::o;29812:179::-;29850:1;29867:18;29883:1;29867:18;:::i;:::-;29862:23;;29899:18;29915:1;29899:18;:::i;:::-;29894:23;;29936:1;29926:35;;29941:18;;:::i;:::-;29926:35;29983:1;29980;29976:9;29971:14;;29812:179;;;;:::o;29997:271::-;30035:7;30058:18;30074:1;30058:18;:::i;:::-;30053:23;;30090:18;30106:1;30090:18;:::i;:::-;30085:23;;30143:1;30140;30136:9;30165:28;30181:11;30165:28;:::i;:::-;30154:39;;30225:11;30216:7;30213:24;30203:58;;30241:18;;:::i;:::-;30203:58;30043:225;29997:271;;;;:::o;30274:191::-;30312:4;30332:18;30348:1;30332:18;:::i;:::-;30327:23;;30364:18;30380:1;30364:18;:::i;:::-;30359:23;;30406:1;30403;30399:9;30391:17;;30430:4;30424;30421:14;30418:40;;;30438:18;;:::i;:::-;30418:40;30274:191;;;;:::o;30471:514::-;30632:4;30670:2;30659:9;30655:18;30647:26;;30719:9;30713:4;30709:20;30705:1;30694:9;30690:17;30683:47;30747:78;30820:4;30811:6;30747:78;:::i;:::-;30739:86;;30872:9;30866:4;30862:20;30857:2;30846:9;30842:18;30835:48;30900:78;30973:4;30964:6;30900:78;:::i;:::-;30892:86;;30471:514;;;;;:::o;30991:98::-;31042:6;31076:5;31070:12;31060:22;;30991:98;;;:::o;31095:147::-;31196:11;31233:3;31218:18;;31095:147;;;;:::o;31248:386::-;31352:3;31380:38;31412:5;31380:38;:::i;:::-;31434:88;31515:6;31510:3;31434:88;:::i;:::-;31427:95;;31531:65;31589:6;31584:3;31577:4;31570:5;31566:16;31531:65;:::i;:::-;31621:6;31616:3;31612:16;31605:23;;31356:278;31248:386;;;;:::o;31640:271::-;31770:3;31792:93;31881:3;31872:6;31792:93;:::i;:::-;31785:100;;31902:3;31895:10;;31640:271;;;;:::o;31917:85::-;31962:7;31991:5;31980:16;;31917:85;;;:::o;32008:60::-;32036:3;32057:5;32050:12;;32008:60;;;:::o;32074:158::-;32132:9;32165:61;32183:42;32192:32;32218:5;32192:32;:::i;:::-;32183:42;:::i;:::-;32165:61;:::i;:::-;32152:74;;32074:158;;;:::o;32238:147::-;32333:45;32372:5;32333:45;:::i;:::-;32328:3;32321:58;32238:147;;:::o;32391:85::-;32436:7;32465:5;32454:16;;32391:85;;;:::o;32482:158::-;32540:9;32573:61;32591:42;32600:32;32626:5;32600:32;:::i;:::-;32591:42;:::i;:::-;32573:61;:::i;:::-;32560:74;;32482:158;;;:::o;32646:147::-;32741:45;32780:5;32741:45;:::i;:::-;32736:3;32729:58;32646:147;;:::o;32799:474::-;32964:4;33002:2;32991:9;32987:18;32979:26;;33015:71;33083:1;33072:9;33068:17;33059:6;33015:71;:::i;:::-;33096:80;33172:2;33161:9;33157:18;33148:6;33096:80;:::i;:::-;33186;33262:2;33251:9;33247:18;33238:6;33186:80;:::i;:::-;32799:474;;;;;;:::o;33279:143::-;33336:5;33367:6;33361:13;33352:22;;33383:33;33410:5;33383:33;:::i;:::-;33279:143;;;;:::o;33428:351::-;33498:6;33547:2;33535:9;33526:7;33522:23;33518:32;33515:119;;;33553:79;;:::i;:::-;33515:119;33673:1;33698:64;33754:7;33745:6;33734:9;33730:22;33698:64;:::i;:::-;33688:74;;33644:128;33428:351;;;;:::o;33785:87::-;33832:7;33861:5;33850:16;;33785:87;;;:::o;33878:162::-;33938:9;33971:63;33989:44;33998:34;34026:5;33998:34;:::i;:::-;33989:44;:::i;:::-;33971:63;:::i;:::-;33958:76;;33878:162;;;:::o;34046:151::-;34143:47;34184:5;34143:47;:::i;:::-;34138:3;34131:60;34046:151;;:::o;34203:478::-;34370:4;34408:2;34397:9;34393:18;34385:26;;34421:71;34489:1;34478:9;34474:17;34465:6;34421:71;:::i;:::-;34502:80;34578:2;34567:9;34563:18;34554:6;34502:80;:::i;:::-;34592:82;34670:2;34659:9;34655:18;34646:6;34592:82;:::i;:::-;34203:478;;;;;;:::o;34687:112::-;34770:22;34786:5;34770:22;:::i;:::-;34765:3;34758:35;34687:112;;:::o;34805:214::-;34894:4;34932:2;34921:9;34917:18;34909:26;;34945:67;35009:1;34998:9;34994:17;34985:6;34945:67;:::i;:::-;34805:214;;;;:::o;35025:188::-;35063:3;35082:18;35098:1;35082:18;:::i;:::-;35077:23;;35114:18;35130:1;35114:18;:::i;:::-;35109:23;;35155:1;35152;35148:9;35141:16;;35178:4;35173:3;35170:13;35167:39;;;35186:18;;:::i;:::-;35167:39;35025:188;;;;:::o;35219:179::-;35359:31;35355:1;35347:6;35343:14;35336:55;35219:179;:::o;35404:366::-;35546:3;35567:67;35631:2;35626:3;35567:67;:::i;:::-;35560:74;;35643:93;35732:3;35643:93;:::i;:::-;35761:2;35756:3;35752:12;35745:19;;35404:366;;;:::o;35776:517::-;35964:4;36002:2;35991:9;35987:18;35979:26;;36015:65;36077:1;36066:9;36062:17;36053:6;36015:65;:::i;:::-;36127:9;36121:4;36117:20;36112:2;36101:9;36097:18;36090:48;36155:131;36281:4;36155:131;:::i;:::-;36147:139;;35776:517;;;;:::o;36299:226::-;36439:34;36435:1;36427:6;36423:14;36416:58;36508:9;36503:2;36495:6;36491:15;36484:34;36299:226;:::o;36531:366::-;36673:3;36694:67;36758:2;36753:3;36694:67;:::i;:::-;36687:74;;36770:93;36859:3;36770:93;:::i;:::-;36888:2;36883:3;36879:12;36872:19;;36531:366;;;:::o;36903:517::-;37091:4;37129:2;37118:9;37114:18;37106:26;;37142:65;37204:1;37193:9;37189:17;37180:6;37142:65;:::i;:::-;37254:9;37248:4;37244:20;37239:2;37228:9;37224:18;37217:48;37282:131;37408:4;37282:131;:::i;:::-;37274:139;;36903:517;;;;:::o;37426:160::-;37566:12;37562:1;37554:6;37550:14;37543:36;37426:160;:::o;37592:366::-;37734:3;37755:67;37819:2;37814:3;37755:67;:::i;:::-;37748:74;;37831:93;37920:3;37831:93;:::i;:::-;37949:2;37944:3;37940:12;37933:19;;37592:366;;;:::o;37964:529::-;38158:4;38196:2;38185:9;38181:18;38173:26;;38245:9;38239:4;38235:20;38231:1;38220:9;38216:17;38209:47;38273:131;38399:4;38273:131;:::i;:::-;38265:139;;38414:72;38482:2;38471:9;38467:18;38458:6;38414:72;:::i;:::-;37964:529;;;;:::o;38499:221::-;38639:34;38635:1;38627:6;38623:14;38616:58;38708:4;38703:2;38695:6;38691:15;38684:29;38499:221;:::o;38726:366::-;38868:3;38889:67;38953:2;38948:3;38889:67;:::i;:::-;38882:74;;38965:93;39054:3;38965:93;:::i;:::-;39083:2;39078:3;39074:12;39067:19;;38726:366;;;:::o;39098:517::-;39286:4;39324:2;39313:9;39309:18;39301:26;;39337:65;39399:1;39388:9;39384:17;39375:6;39337:65;:::i;:::-;39449:9;39443:4;39439:20;39434:2;39423:9;39419:18;39412:48;39477:131;39603:4;39477:131;:::i;:::-;39469:139;;39098:517;;;;:::o;39621:220::-;39761:34;39757:1;39749:6;39745:14;39738:58;39830:3;39825:2;39817:6;39813:15;39806:28;39621:220;:::o;39847:366::-;39989:3;40010:67;40074:2;40069:3;40010:67;:::i;:::-;40003:74;;40086:93;40175:3;40086:93;:::i;:::-;40204:2;40199:3;40195:12;40188:19;;39847:366;;;:::o;40219:620::-;40433:4;40471:2;40460:9;40456:18;40448:26;;40520:9;40514:4;40510:20;40506:1;40495:9;40491:17;40484:47;40548:131;40674:4;40548:131;:::i;:::-;40540:139;;40726:9;40720:4;40716:20;40711:2;40700:9;40696:18;40689:48;40754:78;40827:4;40818:6;40754:78;:::i;:::-;40746:86;;40219:620;;;;:::o;40845:173::-;40985:25;40981:1;40973:6;40969:14;40962:49;40845:173;:::o;41024:366::-;41166:3;41187:67;41251:2;41246:3;41187:67;:::i;:::-;41180:74;;41263:93;41352:3;41263:93;:::i;:::-;41381:2;41376:3;41372:12;41365:19;;41024:366;;;:::o;41396:620::-;41610:4;41648:2;41637:9;41633:18;41625:26;;41697:9;41691:4;41687:20;41683:1;41672:9;41668:17;41661:47;41725:131;41851:4;41725:131;:::i;:::-;41717:139;;41903:9;41897:4;41893:20;41888:2;41877:9;41873:18;41866:48;41931:78;42004:4;41995:6;41931:78;:::i;:::-;41923:86;;41396:620;;;;:::o;42022:411::-;42157:4;42195:2;42184:9;42180:18;42172:26;;42208:65;42270:1;42259:9;42255:17;42246:6;42208:65;:::i;:::-;42320:9;42314:4;42310:20;42305:2;42294:9;42290:18;42283:48;42348:78;42421:4;42412:6;42348:78;:::i;:::-;42340:86;;42022:411;;;;;:::o;42439:221::-;42579:34;42575:1;42567:6;42563:14;42556:58;42648:4;42643:2;42635:6;42631:15;42624:29;42439:221;:::o;42666:366::-;42808:3;42829:67;42893:2;42888:3;42829:67;:::i;:::-;42822:74;;42905:93;42994:3;42905:93;:::i;:::-;43023:2;43018:3;43014:12;43007:19;;42666:366;;;:::o;43038:620::-;43252:4;43290:2;43279:9;43275:18;43267:26;;43339:9;43333:4;43329:20;43325:1;43314:9;43310:17;43303:47;43367:131;43493:4;43367:131;:::i;:::-;43359:139;;43545:9;43539:4;43535:20;43530:2;43519:9;43515:18;43508:48;43573:78;43646:4;43637:6;43573:78;:::i;:::-;43565:86;;43038:620;;;;:::o;43664:115::-;43749:23;43766:5;43749:23;:::i;:::-;43744:3;43737:36;43664:115;;:::o;43785:183::-;43883:11;43917:6;43912:3;43905:19;43957:4;43952:3;43948:14;43933:29;;43785:183;;;;:::o;44002:724::-;44119:3;44148:53;44195:5;44148:53;:::i;:::-;44217:85;44295:6;44290:3;44217:85;:::i;:::-;44210:92;;44326:55;44375:5;44326:55;:::i;:::-;44404:7;44435:1;44420:281;44445:6;44442:1;44439:13;44420:281;;;44521:6;44515:13;44548:61;44605:3;44590:13;44548:61;:::i;:::-;44541:68;;44632:59;44684:6;44632:59;:::i;:::-;44622:69;;44480:221;44467:1;44464;44460:9;44455:14;;44420:281;;;44424:14;44717:3;44710:10;;44124:602;;;44002:724;;;;:::o;44732:676::-;44947:4;44985:2;44974:9;44970:18;44962:26;;44998:69;45064:1;45053:9;45049:17;45040:6;44998:69;:::i;:::-;45114:9;45108:4;45104:20;45099:2;45088:9;45084:18;45077:48;45142:106;45243:4;45234:6;45142:106;:::i;:::-;45134:114;;45295:9;45289:4;45285:20;45280:2;45269:9;45265:18;45258:48;45323:78;45396:4;45387:6;45323:78;:::i;:::-;45315:86;;44732:676;;;;;;:::o;45414:533::-;45583:4;45621:2;45610:9;45606:18;45598:26;;45670:9;45664:4;45660:20;45656:1;45645:9;45641:17;45634:47;45698:78;45771:4;45762:6;45698:78;:::i;:::-;45690:86;;45786:72;45854:2;45843:9;45839:18;45830:6;45786:72;:::i;:::-;45868;45936:2;45925:9;45921:18;45912:6;45868:72;:::i;:::-;45414:533;;;;;;:::o;45953:168::-;46093:20;46089:1;46081:6;46077:14;46070:44;45953:168;:::o;46127:366::-;46269:3;46290:67;46354:2;46349:3;46290:67;:::i;:::-;46283:74;;46366:93;46455:3;46366:93;:::i;:::-;46484:2;46479:3;46475:12;46468:19;;46127:366;;;:::o;46499:529::-;46693:4;46731:2;46720:9;46716:18;46708:26;;46780:9;46774:4;46770:20;46766:1;46755:9;46751:17;46744:47;46808:131;46934:4;46808:131;:::i;:::-;46800:139;;46949:72;47017:2;47006:9;47002:18;46993:6;46949:72;:::i;:::-;46499:529;;;;:::o;47034:231::-;47174:34;47170:1;47162:6;47158:14;47151:58;47243:14;47238:2;47230:6;47226:15;47219:39;47034:231;:::o;47271:366::-;47413:3;47434:67;47498:2;47493:3;47434:67;:::i;:::-;47427:74;;47510:93;47599:3;47510:93;:::i;:::-;47628:2;47623:3;47619:12;47612:19;;47271:366;;;:::o;47643:517::-;47831:4;47869:2;47858:9;47854:18;47846:26;;47882:65;47944:1;47933:9;47929:17;47920:6;47882:65;:::i;:::-;47994:9;47988:4;47984:20;47979:2;47968:9;47964:18;47957:48;48022:131;48148:4;48022:131;:::i;:::-;48014:139;;47643:517;;;;:::o;48166:171::-;48306:23;48302:1;48294:6;48290:14;48283:47;48166:171;:::o;48343:366::-;48485:3;48506:67;48570:2;48565:3;48506:67;:::i;:::-;48499:74;;48582:93;48671:3;48582:93;:::i;:::-;48700:2;48695:3;48691:12;48684:19;;48343:366;;;:::o;48715:168::-;48798:11;48832:6;48827:3;48820:19;48872:4;48867:3;48863:14;48848:29;;48715:168;;;;:::o;48889:373::-;48975:3;49003:38;49035:5;49003:38;:::i;:::-;49057:70;49120:6;49115:3;49057:70;:::i;:::-;49050:77;;49136:65;49194:6;49189:3;49182:4;49175:5;49171:16;49136:65;:::i;:::-;49226:29;49248:6;49226:29;:::i;:::-;49221:3;49217:39;49210:46;;48979:283;48889:373;;;;:::o;49268:616::-;49480:4;49518:2;49507:9;49503:18;49495:26;;49567:9;49561:4;49557:20;49553:1;49542:9;49538:17;49531:47;49595:131;49721:4;49595:131;:::i;:::-;49587:139;;49773:9;49767:4;49763:20;49758:2;49747:9;49743:18;49736:48;49801:76;49872:4;49863:6;49801:76;:::i;:::-;49793:84;;49268:616;;;;:::o;49890:230::-;50030:34;50026:1;50018:6;50014:14;50007:58;50099:13;50094:2;50086:6;50082:15;50075:38;49890:230;:::o;50126:366::-;50268:3;50289:67;50353:2;50348:3;50289:67;:::i;:::-;50282:74;;50365:93;50454:3;50365:93;:::i;:::-;50483:2;50478:3;50474:12;50467:19;;50126:366;;;:::o;50498:517::-;50686:4;50724:2;50713:9;50709:18;50701:26;;50737:65;50799:1;50788:9;50784:17;50775:6;50737:65;:::i;:::-;50849:9;50843:4;50839:20;50834:2;50823:9;50819:18;50812:48;50877:131;51003:4;50877:131;:::i;:::-;50869:139;;50498:517;;;;:::o;51021:117::-;51130:1;51127;51120:12;51144:117;51253:1;51250;51243:12;51267:281;51350:27;51372:4;51350:27;:::i;:::-;51342:6;51338:40;51480:6;51468:10;51465:22;51444:18;51432:10;51429:34;51426:62;51423:88;;;51491:18;;:::i;:::-;51423:88;51531:10;51527:2;51520:22;51310:238;51267:281;;:::o;51554:129::-;51588:6;51615:20;;:::i;:::-;51605:30;;51644:33;51672:4;51664:6;51644:33;:::i;:::-;51554:129;;;:::o;51689:308::-;51751:4;51841:18;51833:6;51830:30;51827:56;;;51863:18;;:::i;:::-;51827:56;51901:29;51923:6;51901:29;:::i;:::-;51893:37;;51985:4;51979;51975:15;51967:23;;51689:308;;;:::o;52003:434::-;52092:5;52117:66;52133:49;52175:6;52133:49;:::i;:::-;52117:66;:::i;:::-;52108:75;;52206:6;52199:5;52192:21;52244:4;52237:5;52233:16;52282:3;52273:6;52268:3;52264:16;52261:25;52258:112;;;52289:79;;:::i;:::-;52258:112;52379:52;52424:6;52419:3;52414;52379:52;:::i;:::-;52098:339;52003:434;;;;;:::o;52457:355::-;52524:5;52573:3;52566:4;52558:6;52554:17;52550:27;52540:122;;52581:79;;:::i;:::-;52540:122;52691:6;52685:13;52716:90;52802:3;52794:6;52787:4;52779:6;52775:17;52716:90;:::i;:::-;52707:99;;52530:282;52457:355;;;;:::o;52818:524::-;52898:6;52947:2;52935:9;52926:7;52922:23;52918:32;52915:119;;;52953:79;;:::i;:::-;52915:119;53094:1;53083:9;53079:17;53073:24;53124:18;53116:6;53113:30;53110:117;;;53146:79;;:::i;:::-;53110:117;53251:74;53317:7;53308:6;53297:9;53293:22;53251:74;:::i;:::-;53241:84;;53044:291;52818:524;;;;:::o;53348:179::-;53488:31;53484:1;53476:6;53472:14;53465:55;53348:179;:::o;53533:366::-;53675:3;53696:67;53760:2;53755:3;53696:67;:::i;:::-;53689:74;;53772:93;53861:3;53772:93;:::i;:::-;53890:2;53885:3;53881:12;53874:19;;53533:366;;;:::o;53905:419::-;54071:4;54109:2;54098:9;54094:18;54086:26;;54158:9;54152:4;54148:20;54144:1;54133:9;54129:17;54122:47;54186:131;54312:4;54186:131;:::i;:::-;54178:139;;53905:419;;;:::o;54330:224::-;54470:34;54466:1;54458:6;54454:14;54447:58;54539:7;54534:2;54526:6;54522:15;54515:32;54330:224;:::o;54560:366::-;54702:3;54723:67;54787:2;54782:3;54723:67;:::i;:::-;54716:74;;54799:93;54888:3;54799:93;:::i;:::-;54917:2;54912:3;54908:12;54901:19;;54560:366;;;:::o;54932:419::-;55098:4;55136:2;55125:9;55121:18;55113:26;;55185:9;55179:4;55175:20;55171:1;55160:9;55156:17;55149:47;55213:131;55339:4;55213:131;:::i;:::-;55205:139;;54932:419;;;:::o;55357:222::-;55497:34;55493:1;55485:6;55481:14;55474:58;55566:5;55561:2;55553:6;55549:15;55542:30;55357:222;:::o;55585:366::-;55727:3;55748:67;55812:2;55807:3;55748:67;:::i;:::-;55741:74;;55824:93;55913:3;55824:93;:::i;:::-;55942:2;55937:3;55933:12;55926:19;;55585:366;;;:::o;55957:419::-;56123:4;56161:2;56150:9;56146:18;56138:26;;56210:9;56204:4;56200:20;56196:1;56185:9;56181:17;56174:47;56238:131;56364:4;56238:131;:::i;:::-;56230:139;;55957:419;;;:::o;56382:221::-;56522:34;56518:1;56510:6;56506:14;56499:58;56591:4;56586:2;56578:6;56574:15;56567:29;56382:221;:::o;56609:366::-;56751:3;56772:67;56836:2;56831:3;56772:67;:::i;:::-;56765:74;;56848:93;56937:3;56848:93;:::i;:::-;56966:2;56961:3;56957:12;56950:19;;56609:366;;;:::o;56981:419::-;57147:4;57185:2;57174:9;57170:18;57162:26;;57234:9;57228:4;57224:20;57220:1;57209:9;57205:17;57198:47;57262:131;57388:4;57262:131;:::i;:::-;57254:139;;56981:419;;;:::o;57406:181::-;57546:33;57542:1;57534:6;57530:14;57523:57;57406:181;:::o;57593:366::-;57735:3;57756:67;57820:2;57815:3;57756:67;:::i;:::-;57749:74;;57832:93;57921:3;57832:93;:::i;:::-;57950:2;57945:3;57941:12;57934:19;;57593:366;;;:::o;57965:419::-;58131:4;58169:2;58158:9;58154:18;58146:26;;58218:9;58212:4;58208:20;58204:1;58193:9;58189:17;58182:47;58246:131;58372:4;58246:131;:::i;:::-;58238:139;;57965:419;;;:::o;58390:220::-;58530:34;58526:1;58518:6;58514:14;58507:58;58599:3;58594:2;58586:6;58582:15;58575:28;58390:220;:::o;58616:366::-;58758:3;58779:67;58843:2;58838:3;58779:67;:::i;:::-;58772:74;;58855:93;58944:3;58855:93;:::i;:::-;58973:2;58968:3;58964:12;58957:19;;58616:366;;;:::o;58988:419::-;59154:4;59192:2;59181:9;59177:18;59169:26;;59241:9;59235:4;59231:20;59227:1;59216:9;59212:17;59205:47;59269:131;59395:4;59269:131;:::i;:::-;59261:139;;58988:419;;;:::o;59413:224::-;59553:34;59549:1;59541:6;59537:14;59530:58;59622:7;59617:2;59609:6;59605:15;59598:32;59413:224;:::o;59643:366::-;59785:3;59806:67;59870:2;59865:3;59806:67;:::i;:::-;59799:74;;59882:93;59971:3;59882:93;:::i;:::-;60000:2;59995:3;59991:12;59984:19;;59643:366;;;:::o;60015:419::-;60181:4;60219:2;60208:9;60204:18;60196:26;;60268:9;60262:4;60258:20;60254:1;60243:9;60239:17;60232:47;60296:131;60422:4;60296:131;:::i;:::-;60288:139;;60015:419;;;:::o;60440:221::-;60580:34;60576:1;60568:6;60564:14;60557:58;60649:4;60644:2;60636:6;60632:15;60625:29;60440:221;:::o;60667:366::-;60809:3;60830:67;60894:2;60889:3;60830:67;:::i;:::-;60823:74;;60906:93;60995:3;60906:93;:::i;:::-;61024:2;61019:3;61015:12;61008:19;;60667:366;;;:::o;61039:419::-;61205:4;61243:2;61232:9;61228:18;61220:26;;61292:9;61286:4;61282:20;61278:1;61267:9;61263:17;61256:47;61320:131;61446:4;61320:131;:::i;:::-;61312:139;;61039:419;;;:::o;61464:225::-;61604:34;61600:1;61592:6;61588:14;61581:58;61673:8;61668:2;61660:6;61656:15;61649:33;61464:225;:::o;61695:366::-;61837:3;61858:67;61922:2;61917:3;61858:67;:::i;:::-;61851:74;;61934:93;62023:3;61934:93;:::i;:::-;62052:2;62047:3;62043:12;62036:19;;61695:366;;;:::o;62067:419::-;62233:4;62271:2;62260:9;62256:18;62248:26;;62320:9;62314:4;62310:20;62306:1;62295:9;62291:17;62284:47;62348:131;62474:4;62348:131;:::i;:::-;62340:139;;62067:419;;;:::o;62492:180::-;62540:77;62537:1;62530:88;62637:4;62634:1;62627:15;62661:4;62658:1;62651:15","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","fuzz_sampleFailReturnEmptyData(bool)":"41128bc8","fuzz_sampleFailWithAssert(uint256)":"2734aab6","fuzz_sampleFailWithCustomError(uint8)":"d59e1d2c","fuzz_sampleFailWithPanic(uint256)":"61583d90","fuzz_sampleFailWithRequire(bool)":"57cee9aa","fuzz_sampleFunction(uint256)":"a99867d0","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/FuzzSetup.sol":{"FuzzSetup":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/FuzzSetup.sol\":\"FuzzSetup\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/FuzzSetup.sol:FuzzSetup","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"bytecode":{"object":"","sourceMap":"99:494:38:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;99:494:38;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;99:494:38;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;99:494:38:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea2646970667358221220b3d6a165b574523f8a2eed9800b5ab1ad9cee709dc976daf19035fc94355b9a664736f6c63430008190033","sourceMap":"99:494:38:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/helpers/BeforeAfter.sol":{"BeforeAfter":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/helpers/BeforeAfter.sol\":\"BeforeAfter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/helpers/BeforeAfter.sol:BeforeAfter","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"53:2063:40:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;53:2063:40;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53:2063:40;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;53:2063:40:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea2646970667358221220647195163b3c4a502b221107a1d23070622024669370217349a7214b64f6389964736f6c63430008190033","sourceMap":"53:2063:40:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/helpers/FuzzStorageVariables.sol":{"FuzzStorageVariables":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/helpers/FuzzStorageVariables.sol\":\"FuzzStorageVariables\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/helpers/FuzzStorageVariables.sol:FuzzStorageVariables","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"bytecode":{"object":"","sourceMap":"140:1005:41:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;140:1005;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;140:1005:41;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;140:1005:41:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea2646970667358221220140ad30cc73552d194ca86cf926e906df2a97ff92ae7ddf33e0dc5860151e03b64736f6c63430008190033","sourceMap":"140:1005:41:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/helpers/postconditions/PostconditionsBase.sol":{"PostconditionsBase":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/helpers/postconditions/PostconditionsBase.sol\":\"PostconditionsBase\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/helpers/postconditions/PostconditionsBase.sol\":{\"keccak256\":\"0x7620b7f61fcb7e3607679cd40ab9b9fe08ba0753144c3fa16a979f30c7b697bd\",\"urls\":[\"bzz-raw://ac6bc39ae3e07aa7faf390ff8418d680c92b1abe9be3bc459c91fcac243e8b7f\",\"dweb:/ipfs/QmPEnrqNCfrnjrBYZj6S54kBqsVfWx3veSJbXkhqfY8Hjr\"]},\"test/fuzzing/properties/Properties.sol\":{\"keccak256\":\"0xf9182045d5b5f54b24b43a79510b0683415d922ac2b2a6e00321e4084dcff499\",\"urls\":[\"bzz-raw://7e90e9737ec7f84afad701476f596fa5a1d5d0b4120ad3124ae865e8cd4698dd\",\"dweb:/ipfs/QmVNFwyrXGk8VkPScstJo6ZSGuVAY7DLv7aDzCK1jyxJoe\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/properties/Properties_ERR.sol\":{\"keccak256\":\"0x1a72ed86c160f1003cf577e117b9da09614d3ab3519e1aad621a1a35433fb488\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1028b0388ba604c47cb93b24ac5e5a9e569d623ea0e9824fc7ed0ac1f72cf2a0\",\"dweb:/ipfs/QmRwu894BMcJ4C7GQ7M5oMAcqyCRjKnuQZJHn89efn51yc\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol:PostconditionsBase","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"69:271:42:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;69:271:42;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;69:271:42;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;69:271:42:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea26469706673582212201c8f6533dc62c5cf4a895781cb0aa45efe7f880e1fafb7e784ef45668bc61b7764736f6c63430008190033","sourceMap":"69:271:42:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol":{"PostconditionsSampleContract":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol\":\"PostconditionsSampleContract\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/helpers/postconditions/PostconditionsBase.sol\":{\"keccak256\":\"0x7620b7f61fcb7e3607679cd40ab9b9fe08ba0753144c3fa16a979f30c7b697bd\",\"urls\":[\"bzz-raw://ac6bc39ae3e07aa7faf390ff8418d680c92b1abe9be3bc459c91fcac243e8b7f\",\"dweb:/ipfs/QmPEnrqNCfrnjrBYZj6S54kBqsVfWx3veSJbXkhqfY8Hjr\"]},\"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol\":{\"keccak256\":\"0xe0b6dfd287772112457c1815e260b672fa4a44eddc8e941bd7e7b7f442cc3f12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://176b618cd965a52efd124215b6d7181e3d852506a34ccf65c80eca366ea5cb52\",\"dweb:/ipfs/QmdyLkLSdU4Kq535JMRxXhcezqn5teK7tb57dGKymmRhKr\"]},\"test/fuzzing/properties/Properties.sol\":{\"keccak256\":\"0xf9182045d5b5f54b24b43a79510b0683415d922ac2b2a6e00321e4084dcff499\",\"urls\":[\"bzz-raw://7e90e9737ec7f84afad701476f596fa5a1d5d0b4120ad3124ae865e8cd4698dd\",\"dweb:/ipfs/QmVNFwyrXGk8VkPScstJo6ZSGuVAY7DLv7aDzCK1jyxJoe\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/properties/Properties_ERR.sol\":{\"keccak256\":\"0x1a72ed86c160f1003cf577e117b9da09614d3ab3519e1aad621a1a35433fb488\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1028b0388ba604c47cb93b24ac5e5a9e569d623ea0e9824fc7ed0ac1f72cf2a0\",\"dweb:/ipfs/QmRwu894BMcJ4C7GQ7M5oMAcqyCRjKnuQZJHn89efn51yc\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol:PostconditionsSampleContract","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"93:1978:43:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;93:1978:43;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;93:1978:43;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;93:1978:43:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea26469706673582212207614cd38f038cd579944b7937ca0c2e2e04e9836ecbfabf4acd8e268a061299664736f6c63430008190033","sourceMap":"93:1978:43:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/helpers/preconditions/PreconditionsBase.sol":{"PreconditionsBase":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"LogAddress","inputs":[{"name":"actor","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/helpers/preconditions/PreconditionsBase.sol\":\"PreconditionsBase\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/helpers/preconditions/PreconditionsBase.sol\":{\"keccak256\":\"0x97170e06bf494e439c413c6208c5a43f7eadc3d1d6df9a9fe46090057a0e9cae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dc268531095ff7bd00c314e91e78e9b3448008e994c6d84d64d5593355eef4\",\"dweb:/ipfs/QmWmn3tjw7n6qzE6eUgrZ5hZJyVAHMR5dPZsHhnf6jYCh8\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol:PreconditionsBase","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"87:3105:44:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;87:3105:44;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;87:3105:44;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;87:3105:44:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea264697066735822122091c9a112ef9129ad9b04db65bc0767c2e4d89bd0ab1982521d372f14a458f49264736f6c63430008190033","sourceMap":"87:3105:44:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol":{"PreconditionsSampleContract":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"LogAddress","inputs":[{"name":"actor","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol\":\"PreconditionsSampleContract\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/helpers/preconditions/PreconditionsBase.sol\":{\"keccak256\":\"0x97170e06bf494e439c413c6208c5a43f7eadc3d1d6df9a9fe46090057a0e9cae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dc268531095ff7bd00c314e91e78e9b3448008e994c6d84d64d5593355eef4\",\"dweb:/ipfs/QmWmn3tjw7n6qzE6eUgrZ5hZJyVAHMR5dPZsHhnf6jYCh8\"]},\"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol\":{\"keccak256\":\"0x82df89f1b0ff934319ada37fe548c8c94afa1ad0dce56ba1903bd3772e19a456\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dadbd2920843037f75e7d6db220fbacd5c10e8781ef67723b2c1e96b89ac6466\",\"dweb:/ipfs/QmZC7dutMBKeSrqa9Z6DhXpWdamzvUBpWomiheibKV12yQ\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol:PreconditionsSampleContract","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"92:1258:45:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;92:1258:45;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;92:1258:45;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;92:1258:45:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea264697066735822122051b3c95a6a2c1d3a0bf909266831383fe3b69a8ea53c6b96653b2f86206070f164736f6c63430008190033","sourceMap":"92:1258:45:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/properties/Properties.sol":{"Properties":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/properties/Properties.sol\":\"Properties\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/properties/Properties.sol\":{\"keccak256\":\"0xf9182045d5b5f54b24b43a79510b0683415d922ac2b2a6e00321e4084dcff499\",\"urls\":[\"bzz-raw://7e90e9737ec7f84afad701476f596fa5a1d5d0b4120ad3124ae865e8cd4698dd\",\"dweb:/ipfs/QmVNFwyrXGk8VkPScstJo6ZSGuVAY7DLv7aDzCK1jyxJoe\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/properties/Properties_ERR.sol\":{\"keccak256\":\"0x1a72ed86c160f1003cf577e117b9da09614d3ab3519e1aad621a1a35433fb488\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1028b0388ba604c47cb93b24ac5e5a9e569d623ea0e9824fc7ed0ac1f72cf2a0\",\"dweb:/ipfs/QmRwu894BMcJ4C7GQ7M5oMAcqyCRjKnuQZJHn89efn51yc\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/properties/Properties.sol:Properties","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"57:571:46:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;57:571:46;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;57:571:46;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;57:571:46:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea2646970667358221220d94e1750ccaa4026144a63c5893a3feb3a7cc44e32d155bb30732670505e02f864736f6c63430008190033","sourceMap":"57:571:46:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/properties/PropertiesBase.sol":{"PropertiesBase":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/properties/PropertiesBase.sol\":\"PropertiesBase\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/properties/PropertiesBase.sol:PropertiesBase","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"340:2757:47:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;340:2757:47;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;340:2757:47;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;340:2757:47:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea2646970667358221220f27bd33170bc6ccb0f51598bcb2145a4b8e87a1c2d56ed91a176bc7e4092c1d864736f6c63430008190033","sourceMap":"340:2757:47:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/properties/PropertiesReverts.sol":{"RevertHandler":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/properties/PropertiesReverts.sol\":\"RevertHandler\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/properties/PropertiesReverts.sol:RevertHandler","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/properties/Properties_ERR.sol":{"Properties_ERR":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/properties/Properties_ERR.sol\":\"Properties_ERR\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/FuzzSetup.sol\":{\"keccak256\":\"0x58af648ef1b851019e7701725906cf820863784e34de621b18604e911f10def6\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://a9e75ce56d8ec568324c8b528587b0fec346870dd82cf6597eb9aee70fcd0769\",\"dweb:/ipfs/QmT58w63xFgYM7DQZeQXLwiHx5mghP774U2LMmXDhRksz9\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/BeforeAfter.sol\":{\"keccak256\":\"0xedce727795aea78a4bd805f5575dbd15b028bcb6f8d54deb7a59d1f0f510f66d\",\"urls\":[\"bzz-raw://1d3253a254facd55f2a328d85eb7b710fbb2689592775d029c15de832c97b834\",\"dweb:/ipfs/QmUUBWRSE2FY3b8tKkKSzx8L7DXaXphLhfJnyYgjCD38sX\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/properties/PropertiesBase.sol\":{\"keccak256\":\"0xb8da826bf10ab0ea78c7ff4fc2982377c614dd9611e8594c0f0e40e8be3dea64\",\"urls\":[\"bzz-raw://d68e500996911df1f22c53276702b7f279b009afe8fd3aa36d5be236da4bba72\",\"dweb:/ipfs/QmWb8hsyVfszqr83QAfXN33KA6vXyu9u9MavKLga4Lid5u\"]},\"test/fuzzing/properties/PropertiesDescriptions.sol\":{\"keccak256\":\"0x4fffb80f5a52c2feb655473b2cd07146c6cc0c41335347a7409087bf11c32cc7\",\"urls\":[\"bzz-raw://6facd688ad576c71c5d059fe345a2ec971a534793d24c4723bffa9de2f3f00fa\",\"dweb:/ipfs/QmZ8gUfyExZFyubsJD5irSuVrp3gMBBnnFnqyEvU1EAFwJ\"]},\"test/fuzzing/properties/PropertiesReverts.sol\":{\"keccak256\":\"0x028de0696bdd3866975df71041eed6c4ea387427a5586850d5b96b58dba41645\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://76a95542c29c478174494652eb044a96304d687e9198cf3e5de6e40ae8345aed\",\"dweb:/ipfs/QmVTKbAuaXKSmZXhiseWrTPHZdKf4JWUezSi7qwDLE1iq9\"]},\"test/fuzzing/properties/Properties_ERR.sol\":{\"keccak256\":\"0x1a72ed86c160f1003cf577e117b9da09614d3ab3519e1aad621a1a35433fb488\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1028b0388ba604c47cb93b24ac5e5a9e569d623ea0e9824fc7ed0ac1f72cf2a0\",\"dweb:/ipfs/QmRwu894BMcJ4C7GQ7M5oMAcqyCRjKnuQZJHn89efn51yc\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]},\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"},{"astId":42847,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"states","offset":0,"slot":"38","type":"t_mapping(t_uint8,t_struct(State)42855_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_address,t_struct(ActorStates)42858_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BeforeAfter.ActorStates)","numberOfBytes":"32","value":"t_struct(ActorStates)42858_storage"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint8,t_struct(State)42855_storage)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => struct BeforeAfter.State)","numberOfBytes":"32","value":"t_struct(State)42855_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ActorStates)42858_storage":{"encoding":"inplace","label":"struct BeforeAfter.ActorStates","numberOfBytes":"32","members":[{"astId":42857,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"userEthBalance","offset":0,"slot":"0","type":"t_uint256"}]},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(State)42855_storage":{"encoding":"inplace","label":"struct BeforeAfter.State","numberOfBytes":"64","members":[{"astId":42852,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"actorStates","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(ActorStates)42858_storage)"},{"astId":42854,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"contractEthBalance","offset":0,"slot":"1","type":"t_uint256"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/properties/Properties_ERR.sol:Properties_ERR","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"bytecode":{"object":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/utils/FunctionCalls.sol":{"FunctionCalls":{"abi":[{"type":"function","name":"IS_TEST","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"excludeSelectors","inputs":[],"outputs":[{"name":"excludedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"failed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzArtifactSelector[]","components":[{"name":"artifact","type":"string","internalType":"string"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","type":"string[]","internalType":"string[]"}],"stateMutability":"view"},{"type":"function","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"targetInterfaces","inputs":[],"outputs":[{"name":"targetedInterfaces_","type":"tuple[]","internalType":"struct StdInvariant.FuzzInterface[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"artifacts","type":"string[]","internalType":"string[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","type":"tuple[]","internalType":"struct StdInvariant.FuzzSelector[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"selectors","type":"bytes4[]","internalType":"bytes4[]"}]}],"stateMutability":"view"},{"type":"function","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"event","name":"SampleFunctionCall","inputs":[{"name":"sampleInput","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_address","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_array","inputs":[{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_bytes","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_bytes32","inputs":[{"name":"","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_int","inputs":[{"name":"","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_address","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"log_named_array","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"log_named_bytes","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"log_named_bytes32","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"log_named_decimal_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_decimal_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_named_int","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"log_named_string","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_named_uint","inputs":[{"name":"key","type":"string","indexed":false,"internalType":"string"},{"name":"val","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"log_string","inputs":[{"name":"","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"log_uint","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"logs","inputs":[{"name":"","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleInput\",\"type\":\"uint256\"}],\"name\":\"SampleFunctionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/utils/FunctionCalls.sol\":\"FunctionCalls\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x7121b5b99c4baefb34fdc1f3cc7235aac7138bbc2265344571709417623f5029\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://3866315b5f89f81746192969834b5932b30c62d7e86ad646e99b6055bdc0ca74\",\"dweb:/ipfs/QmRLhuB96iRxeF5pX4FdsizAaqgDaH2eCWFqfEXbdz9v7n\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab\",\"dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3\"]},\"lib/fuzzlib/src/FuzzBase.sol\":{\"keccak256\":\"0x5af28f863c35200efb462a7980d3c58a49c26043f7e4bf6032741962763af33b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21beb7277cab24f0627650ffc0c04d1d88725319ffc8f9375396f35b4235d3af\",\"dweb:/ipfs/Qmc944GSWaVzBsGTZkpEdG51JJhzB58PhXhWZPyvx5znd8\"]},\"lib/fuzzlib/src/FuzzLibString.sol\":{\"keccak256\":\"0xf3a8e1efff57aeab9c5e36e0d020861a50ac1b2708560a80a515042919cbab6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22b127040ec4c942446d4c23c706ab6e39e32075d6b7ad5e9bcc305b1146f60a\",\"dweb:/ipfs/QmbLB32hjxwmkJMDYDPbKtRecz1pd6q5ndwvNtFkF8RMXj\"]},\"lib/fuzzlib/src/Fuzzlib.sol\":{\"keccak256\":\"0x21b8ab8f2fca3031a10f275e57ad40ebc9cc1aa2364c7a202540293ae1c59a9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b17ef9124a4a4d01a2b34b54cf40d50265557e0b9e6e00a84c49c5c186e0264\",\"dweb:/ipfs/QmaQV8UMQ8Ff3WnKuTLUJiraHF9z8Vm8jm2VTYje2DffTA\"]},\"lib/fuzzlib/src/helpers/HelperAssert.sol\":{\"keccak256\":\"0xb7718ecc1e7256a81662abccd791bb8374dce11ee915175ffb0bed5206f11a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d96bac85a8e500f462488615936df9862fd5a74e2c2331c69fcbbad294f43a9\",\"dweb:/ipfs/QmZVSP4eSDMS5iChbHnNRGyzuzu7xpgrB2uh2oXC534MLN\"]},\"lib/fuzzlib/src/helpers/HelperBase.sol\":{\"keccak256\":\"0x27b6059cdb40c4c53b781fff622137abde0b9e30c02c9dfb3ff49a2324c626ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a731fe01172aeaed4b7b731a151a209a6ab96258bd69fd4e88187f3225d73a4a\",\"dweb:/ipfs/QmX4GLv8WzA7PizvdLUDzr6mU8aYkXbYt1ird1T9FXZ7P2\"]},\"lib/fuzzlib/src/helpers/HelperClamp.sol\":{\"keccak256\":\"0x69a02053b6737aeff48005e3b751b97ad6fa5e47ab02577cb410d61d75e328ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://046cef58bc65bd2502edc58da3dd28bfbd5ffe427faa596b07b5739b6ff33148\",\"dweb:/ipfs/QmeoT9amVem9Zro2vDtcC3uVx8r9ST4mqKQ14isPPc5EUx\"]},\"lib/fuzzlib/src/helpers/HelperLog.sol\":{\"keccak256\":\"0xe1d1cdca9d92870e101582aa912552827acce5f7bd3806eb20fcc2d8ac4506bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75aa05bd7f4ce9e4a908d38960ae4bcac4765797c51cd3d4ac77e1b4adeb410e\",\"dweb:/ipfs/QmeGd3e9rVTHdyt8GrZGDvXLaD3AvdMmXU2KSiix36MRSK\"]},\"lib/fuzzlib/src/helpers/HelperMath.sol\":{\"keccak256\":\"0x2c97c4e99ad5d41ddb75a402473399c56581fce9503463a5eeebb7f40cf36417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cc97155c81e1815757d99abe51312f969f7cfcd1b961e548e691d752cb00606\",\"dweb:/ipfs/QmTVg7BWA28gqyRns2vcUmqjrgMPwujpuBp4TewWV9NY9v\"]},\"lib/fuzzlib/src/helpers/HelperRandom.sol\":{\"keccak256\":\"0x487105a55c72b41dc3720d3719ba1fea621a70b00114275691bfacee8d335543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74d98830fb318d6e9a036ff395d41247618ba66f4d39bbbcc97255531972ab07\",\"dweb:/ipfs/QmU3vrYna1wTDvoLZtpaYhU8kNY6FpHs1zjm6dTHvePx7k\"]},\"lib/fuzzlib/src/libraries/LibLog.sol\":{\"keccak256\":\"0x4f42b28a871d09b29fd6a5175cd27d258472b6ff16a85aebb3131c8ef581cd56\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2f184ae99c3b8577d50fd3e651389d38676bec0e2f0560d811f170da79f0b84\",\"dweb:/ipfs/QmUySa2KzKoPJDoLRCUDfDC9zfZWKLnBh3F7c2216DWCio\"]},\"lib/fuzzlib/src/platform/IPlatform.sol\":{\"keccak256\":\"0x124b1a152983cf214d0cabe4f32845fc7f776f243b32a99abde92f82652747eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0774b81c6396a7ae1d706a19d3d53133dfcbe659f1f8615d6f8effb9c549114d\",\"dweb:/ipfs/QmcBqYaGGd6YzsggaBJh4VPZsiexJ28kKELKUWUGBges4d\"]},\"lib/fuzzlib/src/platform/PlatformCrytic.sol\":{\"keccak256\":\"0x5ea0c2f7c4ef3c9e5d7081631a63e5cd0fc00048548fc1997c2af708d8524d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a9bb280fdbeadf280758777d3fe46a04c19a8c9453e4b6f73da27336ed496a\",\"dweb:/ipfs/QmRu9cM3Zd3s1kzwRV5BdUcRrLnVPqpxBfik2YZeuBRCHN\"]},\"test/fuzzing/SampleContract.sol\":{\"keccak256\":\"0x68848d2ac73016fc23059e2fe07b355766d2ad4b5438b6ec3c2353eb5adc783e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d1f92ee0daaf217a91c8ef25a1040fb23771994dd575325bc2cb6409c14d667\",\"dweb:/ipfs/QmTCTFrUagRKJP9MwiYEbBMtDekDSmuemgg1aSm7g8KmKY\"]},\"test/fuzzing/helpers/FuzzStorageVariables.sol\":{\"keccak256\":\"0x221af33c44d880b035a6e5161e564f19acd684879056c5a9ca390d254912e41d\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://7fd8839706ef276b82b5e619384001620c85c938bd9bc53f465694581c5ea2f5\",\"dweb:/ipfs/QmWd23G5Bpx4o4ecqkWvRNvFKrVbooB5f4nA2pXH6Qj69h\"]},\"test/fuzzing/utils/FunctionCalls.sol\":{\"keccak256\":\"0x688871c0c7d310dcd39c70100db0b3992a3d0125414762b5b8d009b0113f669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554b6d67df246809b5689781b4e8bc222551fe46c5387ba7e3cb9e2c19d0774a\",\"dweb:/ipfs/QmT3k8MKGhLcfqPmYKsnb7nCvxqySpiZcmgJD3yy61efSK\"]},\"test/fuzzing/utils/FuzzActors.sol\":{\"keccak256\":\"0xa0f6ad3b060382c6c776b008726a6162dde9bde44e73c081f259f812ecf806e3\",\"license\":\"UNTITLED\",\"urls\":[\"bzz-raw://4f911de7d8c55cd33a86bc5f8184ef0d3bc3b1014ec1d794da50de6bb7b8d44e\",\"dweb:/ipfs/QmayshWoPpJf9mfA4B8Gyd6VqoEJKLLysZuVjv7D1pnP8N\"]}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":38996,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"fl","offset":0,"slot":"0","type":"t_contract(Fuzzlib)39466"},{"astId":61,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"stdstore","offset":0,"slot":"1","type":"t_struct(StdStorage)7507_storage"},{"astId":218,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_failed","offset":0,"slot":"9","type":"t_bool"},{"astId":2719,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"stdChainsInitialized","offset":1,"slot":"9","type":"t_bool"},{"astId":2740,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"chains","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)"},{"astId":2744,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"defaultRpcUrls","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_string_storage)"},{"astId":2748,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"idToAlias","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":2751,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"fallbackToDefaultRpcUrls","offset":0,"slot":"13","type":"t_bool"},{"astId":3554,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"gasMeteringOff","offset":1,"slot":"13","type":"t_bool"},{"astId":5591,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"stdstore","offset":0,"slot":"14","type":"t_struct(StdStorage)7507_storage"},{"astId":6465,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_excludedContracts","offset":0,"slot":"22","type":"t_array(t_address)dyn_storage"},{"astId":6468,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_excludedSenders","offset":0,"slot":"23","type":"t_array(t_address)dyn_storage"},{"astId":6471,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_targetedContracts","offset":0,"slot":"24","type":"t_array(t_address)dyn_storage"},{"astId":6474,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_targetedSenders","offset":0,"slot":"25","type":"t_array(t_address)dyn_storage"},{"astId":6477,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_excludedArtifacts","offset":0,"slot":"26","type":"t_array(t_string_storage)dyn_storage"},{"astId":6480,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_targetedArtifacts","offset":0,"slot":"27","type":"t_array(t_string_storage)dyn_storage"},{"astId":6484,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_targetedArtifactSelectors","offset":0,"slot":"28","type":"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage"},{"astId":6488,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_excludedSelectors","offset":0,"slot":"29","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6492,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_targetedSelectors","offset":0,"slot":"30","type":"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage"},{"astId":6496,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_targetedInterfaces","offset":0,"slot":"31","type":"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage"},{"astId":12104,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"IS_TEST","offset":0,"slot":"32","type":"t_bool"},{"astId":45058,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"USERS","offset":0,"slot":"33","type":"t_array(t_address)dyn_storage"},{"astId":43035,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"currentActor","offset":0,"slot":"34","type":"t_address"},{"astId":43038,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_setActor","offset":20,"slot":"34","type":"t_bool"},{"astId":43047,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"iteration","offset":0,"slot":"35","type":"t_uint256"},{"astId":43049,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"lastTimestamp","offset":0,"slot":"36","type":"t_uint256"},{"astId":43058,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"sampleContract","offset":0,"slot":"37","type":"t_contract(SampleContract)42819"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"encoding":"dynamic_array","label":"address[]","numberOfBytes":"32","base":"t_address"},"t_array(t_bytes32)dyn_storage":{"encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32","base":"t_bytes32"},"t_array(t_bytes4)dyn_storage":{"encoding":"dynamic_array","label":"bytes4[]","numberOfBytes":"32","base":"t_bytes4"},"t_array(t_string_storage)dyn_storage":{"encoding":"dynamic_array","label":"string[]","numberOfBytes":"32","base":"t_string_storage"},"t_array(t_struct(FuzzArtifactSelector)6456_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzArtifactSelector[]","numberOfBytes":"32","base":"t_struct(FuzzArtifactSelector)6456_storage"},"t_array(t_struct(FuzzInterface)6462_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzInterface[]","numberOfBytes":"32","base":"t_struct(FuzzInterface)6462_storage"},"t_array(t_struct(FuzzSelector)6450_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct StdInvariant.FuzzSelector[]","numberOfBytes":"32","base":"t_struct(FuzzSelector)6450_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(Fuzzlib)39466":{"encoding":"inplace","label":"contract Fuzzlib","numberOfBytes":"20"},"t_contract(SampleContract)42819":{"encoding":"inplace","label":"contract SampleContract","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))"},"t_mapping(t_bytes32,t_struct(FindData)7482_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct FindData)","numberOfBytes":"32","value":"t_struct(FindData)7482_storage"},"t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage))":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => mapping(bytes32 => struct FindData))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(FindData)7482_storage)"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_string_memory_ptr,t_struct(Chain)2735_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct StdChains.Chain)","numberOfBytes":"32","value":"t_struct(Chain)2735_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Chain)2735_storage":{"encoding":"inplace","label":"struct StdChains.Chain","numberOfBytes":"128","members":[{"astId":2728,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2730,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"chainId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2732,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"chainAlias","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"rpcUrl","offset":0,"slot":"3","type":"t_string_storage"}]},"t_struct(FindData)7482_storage":{"encoding":"inplace","label":"struct FindData","numberOfBytes":"128","members":[{"astId":7475,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"slot","offset":0,"slot":"0","type":"t_uint256"},{"astId":7477,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"offsetLeft","offset":0,"slot":"1","type":"t_uint256"},{"astId":7479,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"offsetRight","offset":0,"slot":"2","type":"t_uint256"},{"astId":7481,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"found","offset":0,"slot":"3","type":"t_bool"}]},"t_struct(FuzzArtifactSelector)6456_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzArtifactSelector","numberOfBytes":"64","members":[{"astId":6452,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"artifact","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6455,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(FuzzInterface)6462_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzInterface","numberOfBytes":"64","members":[{"astId":6458,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6461,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"artifacts","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}]},"t_struct(FuzzSelector)6450_storage":{"encoding":"inplace","label":"struct StdInvariant.FuzzSelector","numberOfBytes":"64","members":[{"astId":6446,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"addr","offset":0,"slot":"0","type":"t_address"},{"astId":6449,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"selectors","offset":0,"slot":"1","type":"t_array(t_bytes4)dyn_storage"}]},"t_struct(StdStorage)7507_storage":{"encoding":"inplace","label":"struct StdStorage","numberOfBytes":"256","members":[{"astId":7491,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"finds","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)7482_storage)))"},{"astId":7494,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_keys","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":7496,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_sig","offset":0,"slot":"2","type":"t_bytes4"},{"astId":7498,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_depth","offset":0,"slot":"3","type":"t_uint256"},{"astId":7500,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_target","offset":0,"slot":"4","type":"t_address"},{"astId":7502,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_set","offset":0,"slot":"5","type":"t_bytes32"},{"astId":7504,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_enable_packed_slots","offset":0,"slot":"6","type":"t_bool"},{"astId":7506,"contract":"test/fuzzing/utils/FunctionCalls.sol:FunctionCalls","label":"_calldata","offset":0,"slot":"7","type":"t_bytes_storage"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"bytecode":{"object":"","sourceMap":"153:2138:51:-:0;;;214:13:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;192:35;;;;;;;;;;;;;;;;;;;;3166:4:2;3126:44;;;;;;;;;;;;;;;;;;;;1038:4:12;1016:26;;;;;;;;;;;;;;;;;;;;411:48:52;;;;;;;;284:7;411:48;;;;;;;;340:7;411:48;;;;;;;;396:7;411:48;;;;;;;;;;;;;;;:::i;:::-;;401:4:41;384:21;;;;;;;;;;;;;;;;;;;;523:1;503:21;;153:2138:51;;;;;;;;;;258:2:23;;;;;;;;;;:14;;;281:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;258:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;153:2138:51;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:126:54:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;153:2138:51:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561000f575f80fd5b50600436106100b2575f3560e01c8063916a17c61161006f578063916a17c61461016a578063b0464fdc14610188578063b5508aa9146101a6578063ba414fa6146101c4578063e20c9f71146101e2578063fa7626d414610200576100b2565b80631ed7831c146100b65780632ade3880146100d45780633e5e3c23146100f25780633f7286f41461011057806366d9a9a01461012e57806385226c811461014c575b5f80fd5b6100be61021e565b6040516100cb9190610d93565b60405180910390f35b6100dc6102a9565b6040516100e99190610fd3565b60405180910390f35b6100fa61042d565b6040516101079190610d93565b60405180910390f35b6101186104b8565b6040516101259190610d93565b60405180910390f35b610136610543565b60405161014391906111d1565b60405180910390f35b6101546106c5565b6040516101619190611274565b60405180910390f35b610172610799565b60405161017f9190611389565b60405180910390f35b6101906108e0565b60405161019d9190611389565b60405180910390f35b6101ae610a27565b6040516101bb9190611274565b60405180910390f35b6101cc610afb565b6040516101d991906113c3565b60405180910390f35b6101ea610c0f565b6040516101f79190610d93565b60405180910390f35b610208610c9a565b60405161021591906113c3565b60405180910390f35b6060601780548060200260200160405190810160405280929190818152602001828054801561029f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610256575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020015f905b82821015610424578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561040d578382905f5260205f2001805461038290611409565b80601f01602080910402602001604051908101604052809291908181526020018280546103ae90611409565b80156103f95780601f106103d0576101008083540402835291602001916103f9565b820191905f5260205f20905b8154815290600101906020018083116103dc57829003601f168201915b505050505081526020019060010190610365565b5050505081525050815260200190600101906102cc565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156104ae57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610465575b5050505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561053957602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104f0575b5050505050905090565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106bc578382905f5260205f2090600202016040518060400160405290815f8201805461059690611409565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290611409565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106a457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106515790505b50505050508152505081526020019060010190610566565b50505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610790578382905f5260205f2001805461070590611409565b80601f016020809104026020016040519081016040528092919081815260200182805461073190611409565b801561077c5780601f106107535761010080835404028352916020019161077c565b820191905f5260205f20905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200190600101906106e8565b50505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156108d7578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161086c5790505b505050505081525050815260200190600101906107bc565b50505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610a1e578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109b35790505b50505050508152505081526020019060010190610903565b50505050905090565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610af2578382905f5260205f20018054610a6790611409565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390611409565b8015610ade5780601f10610ab557610100808354040283529160200191610ade565b820191905f5260205f20905b815481529060010190602001808311610ac157829003601f168201915b505050505081526020019060010190610a4a565b50505050905090565b5f60095f9054906101000a900460ff1615610b265760095f9054906101000a900460ff169050610c0c565b5f801b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff1663667f9d707f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c7f6661696c656400000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610bc8929190611460565b602060405180830381865afa158015610be3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0791906114b5565b141590505b90565b60606016805480602002602001604051908101604052809291908181526020018280548015610c9057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c47575b5050505050905090565b60205f9054906101000a900460ff1681565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cfe82610cd5565b9050919050565b610d0e81610cf4565b82525050565b5f610d1f8383610d05565b60208301905092915050565b5f602082019050919050565b5f610d4182610cac565b610d4b8185610cb6565b9350610d5683610cc6565b805f5b83811015610d86578151610d6d8882610d14565b9750610d7883610d2b565b925050600181019050610d59565b5085935050505092915050565b5f6020820190508181035f830152610dab8184610d37565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e4782610e05565b610e518185610e0f565b9350610e61818560208601610e1f565b610e6a81610e2d565b840191505092915050565b5f610e808383610e3d565b905092915050565b5f602082019050919050565b5f610e9e82610ddc565b610ea88185610de6565b935083602082028501610eba85610df6565b805f5b85811015610ef55784840389528151610ed68582610e75565b9450610ee183610e88565b925060208a01995050600181019050610ebd565b50829750879550505050505092915050565b5f604083015f830151610f1c5f860182610d05565b5060208301518482036020860152610f348282610e94565b9150508091505092915050565b5f610f4c8383610f07565b905092915050565b5f602082019050919050565b5f610f6a82610db3565b610f748185610dbd565b935083602082028501610f8685610dcd565b805f5b85811015610fc15784840389528151610fa28582610f41565b9450610fad83610f54565b925060208a01995050600181019050610f89565b50829750879550505050505092915050565b5f6020820190508181035f830152610feb8184610f60565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61107981611045565b82525050565b5f61108a8383611070565b60208301905092915050565b5f602082019050919050565b5f6110ac8261101c565b6110b68185611026565b93506110c183611036565b805f5b838110156110f15781516110d8888261107f565b97506110e383611096565b9250506001810190506110c4565b5085935050505092915050565b5f604083015f8301518482035f8601526111188282610e3d565b9150506020830151848203602086015261113282826110a2565b9150508091505092915050565b5f61114a83836110fe565b905092915050565b5f602082019050919050565b5f61116882610ff3565b6111728185610ffd565b9350836020820285016111848561100d565b805f5b858110156111bf57848403895281516111a0858261113f565b94506111ab83611152565b925060208a01995050600181019050611187565b50829750879550505050505092915050565b5f6020820190508181035f8301526111e9818461115e565b905092915050565b5f82825260208201905092915050565b5f61120b82610ddc565b61121581856111f1565b93508360208202850161122785610df6565b805f5b8581101561126257848403895281516112438582610e75565b945061124e83610e88565b925060208a0199505060018101905061122a565b50829750879550505050505092915050565b5f6020820190508181035f83015261128c8184611201565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f604083015f8301516112d25f860182610d05565b50602083015184820360208601526112ea82826110a2565b9150508091505092915050565b5f61130283836112bd565b905092915050565b5f602082019050919050565b5f61132082611294565b61132a818561129e565b93508360208202850161133c856112ae565b805f5b85811015611377578484038952815161135885826112f7565b94506113638361130a565b925060208a0199505060018101905061133f565b50829750879550505050505092915050565b5f6020820190508181035f8301526113a18184611316565b905092915050565b5f8115159050919050565b6113bd816113a9565b82525050565b5f6020820190506113d65f8301846113b4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061142057607f821691505b602082108103611433576114326113dc565b5b50919050565b61144281610cf4565b82525050565b5f819050919050565b61145a81611448565b82525050565b5f6040820190506114735f830185611439565b6114806020830184611451565b9392505050565b5f80fd5b61149481611448565b811461149e575f80fd5b50565b5f815190506114af8161148b565b92915050565b5f602082840312156114ca576114c9611487565b5b5f6114d7848285016114a1565b9150509291505056fea2646970667358221220ed8c015b70b90b328747645edbbf82b5ad66cd1e388b5da8007aad3389e435ee64736f6c63430008190033","sourceMap":"153:2138:51:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3684:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3385:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3193:186;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3047:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3532:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2754:147;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2459:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1243:204:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:142:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1016:26:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:134:5;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3193:186;:::o;3047:140::-;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;:::o;3532:146::-;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;:::o;2754:147::-;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;:::o;2459:141::-;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;:::o;1243:204:1:-;1282:4;1302:7;;;;;;;;;;;1298:143;;;1332:7;;;;;;;;;;;1325:14;;;;1298:143;1428:1;1420:10;;219:28;211:37;;1377:7;;;219:28;211:37;;1398:17;1377:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;;:::o;2606:142:5:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;1016:26:12:-;;;;;;;;;;;;;:::o;7:114:54:-;74:6;108:5;102:12;92:22;;7:114;;;:::o;127:184::-;226:11;260:6;255:3;248:19;300:4;295:3;291:14;276:29;;127:184;;;;:::o;317:132::-;384:4;407:3;399:11;;437:4;432:3;428:14;420:22;;317:132;;;:::o;455:126::-;492:7;532:42;525:5;521:54;510:65;;455:126;;;:::o;587:96::-;624:7;653:24;671:5;653:24;:::i;:::-;642:35;;587:96;;;:::o;689:108::-;766:24;784:5;766:24;:::i;:::-;761:3;754:37;689:108;;:::o;803:179::-;872:10;893:46;935:3;927:6;893:46;:::i;:::-;971:4;966:3;962:14;948:28;;803:179;;;;:::o;988:113::-;1058:4;1090;1085:3;1081:14;1073:22;;988:113;;;:::o;1137:732::-;1256:3;1285:54;1333:5;1285:54;:::i;:::-;1355:86;1434:6;1429:3;1355:86;:::i;:::-;1348:93;;1465:56;1515:5;1465:56;:::i;:::-;1544:7;1575:1;1560:284;1585:6;1582:1;1579:13;1560:284;;;1661:6;1655:13;1688:63;1747:3;1732:13;1688:63;:::i;:::-;1681:70;;1774:60;1827:6;1774:60;:::i;:::-;1764:70;;1620:224;1607:1;1604;1600:9;1595:14;;1560:284;;;1564:14;1860:3;1853:10;;1261:608;;;1137:732;;;;:::o;1875:373::-;2018:4;2056:2;2045:9;2041:18;2033:26;;2105:9;2099:4;2095:20;2091:1;2080:9;2076:17;2069:47;2133:108;2236:4;2227:6;2133:108;:::i;:::-;2125:116;;1875:373;;;;:::o;2254:145::-;2352:6;2386:5;2380:12;2370:22;;2254:145;;;:::o;2405:215::-;2535:11;2569:6;2564:3;2557:19;2609:4;2604:3;2600:14;2585:29;;2405:215;;;;:::o;2626:163::-;2724:4;2747:3;2739:11;;2777:4;2772:3;2768:14;2760:22;;2626:163;;;:::o;2795:124::-;2872:6;2906:5;2900:12;2890:22;;2795:124;;;:::o;2925:184::-;3024:11;3058:6;3053:3;3046:19;3098:4;3093:3;3089:14;3074:29;;2925:184;;;;:::o;3115:142::-;3192:4;3215:3;3207:11;;3245:4;3240:3;3236:14;3228:22;;3115:142;;;:::o;3263:99::-;3315:6;3349:5;3343:12;3333:22;;3263:99;;;:::o;3368:159::-;3442:11;3476:6;3471:3;3464:19;3516:4;3511:3;3507:14;3492:29;;3368:159;;;;:::o;3533:139::-;3622:6;3617:3;3612;3606:23;3663:1;3654:6;3649:3;3645:16;3638:27;3533:139;;;:::o;3678:102::-;3719:6;3770:2;3766:7;3761:2;3754:5;3750:14;3746:28;3736:38;;3678:102;;;:::o;3786:357::-;3864:3;3892:39;3925:5;3892:39;:::i;:::-;3947:61;4001:6;3996:3;3947:61;:::i;:::-;3940:68;;4017:65;4075:6;4070:3;4063:4;4056:5;4052:16;4017:65;:::i;:::-;4107:29;4129:6;4107:29;:::i;:::-;4102:3;4098:39;4091:46;;3868:275;3786:357;;;;:::o;4149:196::-;4238:10;4273:66;4335:3;4327:6;4273:66;:::i;:::-;4259:80;;4149:196;;;;:::o;4351:123::-;4431:4;4463;4458:3;4454:14;4446:22;;4351:123;;;:::o;4508:971::-;4637:3;4666:64;4724:5;4666:64;:::i;:::-;4746:86;4825:6;4820:3;4746:86;:::i;:::-;4739:93;;4858:3;4903:4;4895:6;4891:17;4886:3;4882:27;4933:66;4993:5;4933:66;:::i;:::-;5022:7;5053:1;5038:396;5063:6;5060:1;5057:13;5038:396;;;5134:9;5128:4;5124:20;5119:3;5112:33;5185:6;5179:13;5213:84;5292:4;5277:13;5213:84;:::i;:::-;5205:92;;5320:70;5383:6;5320:70;:::i;:::-;5310:80;;5419:4;5414:3;5410:14;5403:21;;5098:336;5085:1;5082;5078:9;5073:14;;5038:396;;;5042:14;5450:4;5443:11;;5470:3;5463:10;;4642:837;;;;;4508:971;;;;:::o;5563:663::-;5684:3;5720:4;5715:3;5711:14;5807:4;5800:5;5796:16;5790:23;5826:63;5883:4;5878:3;5874:14;5860:12;5826:63;:::i;:::-;5735:164;5986:4;5979:5;5975:16;5969:23;6039:3;6033:4;6029:14;6022:4;6017:3;6013:14;6006:38;6065:123;6183:4;6169:12;6065:123;:::i;:::-;6057:131;;5909:290;6216:4;6209:11;;5689:537;5563:663;;;;:::o;6232:280::-;6363:10;6398:108;6502:3;6494:6;6398:108;:::i;:::-;6384:122;;6232:280;;;;:::o;6518:144::-;6619:4;6651;6646:3;6642:14;6634:22;;6518:144;;;:::o;6750:1159::-;6931:3;6960:85;7039:5;6960:85;:::i;:::-;7061:117;7171:6;7166:3;7061:117;:::i;:::-;7054:124;;7204:3;7249:4;7241:6;7237:17;7232:3;7228:27;7279:87;7360:5;7279:87;:::i;:::-;7389:7;7420:1;7405:459;7430:6;7427:1;7424:13;7405:459;;;7501:9;7495:4;7491:20;7486:3;7479:33;7552:6;7546:13;7580:126;7701:4;7686:13;7580:126;:::i;:::-;7572:134;;7729:91;7813:6;7729:91;:::i;:::-;7719:101;;7849:4;7844:3;7840:14;7833:21;;7465:399;7452:1;7449;7445:9;7440:14;;7405:459;;;7409:14;7880:4;7873:11;;7900:3;7893:10;;6936:973;;;;;6750:1159;;;;:::o;7915:497::-;8120:4;8158:2;8147:9;8143:18;8135:26;;8207:9;8201:4;8197:20;8193:1;8182:9;8178:17;8171:47;8235:170;8400:4;8391:6;8235:170;:::i;:::-;8227:178;;7915:497;;;;:::o;8418:152::-;8523:6;8557:5;8551:12;8541:22;;8418:152;;;:::o;8576:222::-;8713:11;8747:6;8742:3;8735:19;8787:4;8782:3;8778:14;8763:29;;8576:222;;;;:::o;8804:170::-;8909:4;8932:3;8924:11;;8962:4;8957:3;8953:14;8945:22;;8804:170;;;:::o;8980:113::-;9046:6;9080:5;9074:12;9064:22;;8980:113;;;:::o;9099:173::-;9187:11;9221:6;9216:3;9209:19;9261:4;9256:3;9252:14;9237:29;;9099:173;;;;:::o;9278:131::-;9344:4;9367:3;9359:11;;9397:4;9392:3;9388:14;9380:22;;9278:131;;;:::o;9415:149::-;9451:7;9491:66;9484:5;9480:78;9469:89;;9415:149;;;:::o;9570:105::-;9645:23;9662:5;9645:23;:::i;:::-;9640:3;9633:36;9570:105;;:::o;9681:175::-;9748:10;9769:44;9809:3;9801:6;9769:44;:::i;:::-;9845:4;9840:3;9836:14;9822:28;;9681:175;;;;:::o;9862:112::-;9931:4;9963;9958:3;9954:14;9946:22;;9862:112;;;:::o;10008:704::-;10115:3;10144:53;10191:5;10144:53;:::i;:::-;10213:75;10281:6;10276:3;10213:75;:::i;:::-;10206:82;;10312:55;10361:5;10312:55;:::i;:::-;10390:7;10421:1;10406:281;10431:6;10428:1;10425:13;10406:281;;;10507:6;10501:13;10534:61;10591:3;10576:13;10534:61;:::i;:::-;10527:68;;10618:59;10670:6;10618:59;:::i;:::-;10608:69;;10466:221;10453:1;10450;10446:9;10441:14;;10406:281;;;10410:14;10703:3;10696:10;;10120:592;;;10008:704;;;;:::o;10810:730::-;10945:3;10981:4;10976:3;10972:14;11072:4;11065:5;11061:16;11055:23;11125:3;11119:4;11115:14;11108:4;11103:3;11099:14;11092:38;11151:73;11219:4;11205:12;11151:73;:::i;:::-;11143:81;;10996:239;11322:4;11315:5;11311:16;11305:23;11375:3;11369:4;11365:14;11358:4;11353:3;11349:14;11342:38;11401:101;11497:4;11483:12;11401:101;:::i;:::-;11393:109;;11245:268;11530:4;11523:11;;10950:590;10810:730;;;;:::o;11546:308::-;11691:10;11726:122;11844:3;11836:6;11726:122;:::i;:::-;11712:136;;11546:308;;;;:::o;11860:151::-;11968:4;12000;11995:3;11991:14;11983:22;;11860:151;;;:::o;12113:1215::-;12308:3;12337:92;12423:5;12337:92;:::i;:::-;12445:124;12562:6;12557:3;12445:124;:::i;:::-;12438:131;;12595:3;12640:4;12632:6;12628:17;12623:3;12619:27;12670:94;12758:5;12670:94;:::i;:::-;12787:7;12818:1;12803:480;12828:6;12825:1;12822:13;12803:480;;;12899:9;12893:4;12889:20;12884:3;12877:33;12950:6;12944:13;12978:140;13113:4;13098:13;12978:140;:::i;:::-;12970:148;;13141:98;13232:6;13141:98;:::i;:::-;13131:108;;13268:4;13263:3;13259:14;13252:21;;12863:420;12850:1;12847;12843:9;12838:14;;12803:480;;;12807:14;13299:4;13292:11;;13319:3;13312:10;;12313:1015;;;;;12113:1215;;;;:::o;13334:525::-;13553:4;13591:2;13580:9;13576:18;13568:26;;13640:9;13634:4;13630:20;13626:1;13615:9;13611:17;13604:47;13668:184;13847:4;13838:6;13668:184;:::i;:::-;13660:192;;13334:525;;;;:::o;13865:194::-;13974:11;14008:6;14003:3;13996:19;14048:4;14043:3;14039:14;14024:29;;13865:194;;;;:::o;14093:991::-;14232:3;14261:64;14319:5;14261:64;:::i;:::-;14341:96;14430:6;14425:3;14341:96;:::i;:::-;14334:103;;14463:3;14508:4;14500:6;14496:17;14491:3;14487:27;14538:66;14598:5;14538:66;:::i;:::-;14627:7;14658:1;14643:396;14668:6;14665:1;14662:13;14643:396;;;14739:9;14733:4;14729:20;14724:3;14717:33;14790:6;14784:13;14818:84;14897:4;14882:13;14818:84;:::i;:::-;14810:92;;14925:70;14988:6;14925:70;:::i;:::-;14915:80;;15024:4;15019:3;15015:14;15008:21;;14703:336;14690:1;14687;14683:9;14678:14;;14643:396;;;14647:14;15055:4;15048:11;;15075:3;15068:10;;14237:847;;;;;14093:991;;;;:::o;15090:413::-;15253:4;15291:2;15280:9;15276:18;15268:26;;15340:9;15334:4;15330:20;15326:1;15315:9;15311:17;15304:47;15368:128;15491:4;15482:6;15368:128;:::i;:::-;15360:136;;15090:413;;;;:::o;15509:144::-;15606:6;15640:5;15634:12;15624:22;;15509:144;;;:::o;15659:214::-;15788:11;15822:6;15817:3;15810:19;15862:4;15857:3;15853:14;15838:29;;15659:214;;;;:::o;15879:162::-;15976:4;15999:3;15991:11;;16029:4;16024:3;16020:14;16012:22;;15879:162;;;:::o;16123:639::-;16242:3;16278:4;16273:3;16269:14;16365:4;16358:5;16354:16;16348:23;16384:63;16441:4;16436:3;16432:14;16418:12;16384:63;:::i;:::-;16293:164;16544:4;16537:5;16533:16;16527:23;16597:3;16591:4;16587:14;16580:4;16575:3;16571:14;16564:38;16623:101;16719:4;16705:12;16623:101;:::i;:::-;16615:109;;16467:268;16752:4;16745:11;;16247:515;16123:639;;;;:::o;16768:276::-;16897:10;16932:106;17034:3;17026:6;16932:106;:::i;:::-;16918:120;;16768:276;;;;:::o;17050:143::-;17150:4;17182;17177:3;17173:14;17165:22;;17050:143;;;:::o;17279:1151::-;17458:3;17487:84;17565:5;17487:84;:::i;:::-;17587:116;17696:6;17691:3;17587:116;:::i;:::-;17580:123;;17729:3;17774:4;17766:6;17762:17;17757:3;17753:27;17804:86;17884:5;17804:86;:::i;:::-;17913:7;17944:1;17929:456;17954:6;17951:1;17948:13;17929:456;;;18025:9;18019:4;18015:20;18010:3;18003:33;18076:6;18070:13;18104:124;18223:4;18208:13;18104:124;:::i;:::-;18096:132;;18251:90;18334:6;18251:90;:::i;:::-;18241:100;;18370:4;18365:3;18361:14;18354:21;;17989:396;17976:1;17973;17969:9;17964:14;;17929:456;;;17933:14;18401:4;18394:11;;18421:3;18414:10;;17463:967;;;;;17279:1151;;;;:::o;18436:493::-;18639:4;18677:2;18666:9;18662:18;18654:26;;18726:9;18720:4;18716:20;18712:1;18701:9;18697:17;18690:47;18754:168;18917:4;18908:6;18754:168;:::i;:::-;18746:176;;18436:493;;;;:::o;18935:90::-;18969:7;19012:5;19005:13;18998:21;18987:32;;18935:90;;;:::o;19031:109::-;19112:21;19127:5;19112:21;:::i;:::-;19107:3;19100:34;19031:109;;:::o;19146:210::-;19233:4;19271:2;19260:9;19256:18;19248:26;;19284:65;19346:1;19335:9;19331:17;19322:6;19284:65;:::i;:::-;19146:210;;;;:::o;19362:180::-;19410:77;19407:1;19400:88;19507:4;19504:1;19497:15;19531:4;19528:1;19521:15;19548:320;19592:6;19629:1;19623:4;19619:12;19609:22;;19676:1;19670:4;19666:12;19697:18;19687:81;;19753:4;19745:6;19741:17;19731:27;;19687:81;19815:2;19807:6;19804:14;19784:18;19781:38;19778:84;;19834:18;;:::i;:::-;19778:84;19599:269;19548:320;;;:::o;19874:118::-;19961:24;19979:5;19961:24;:::i;:::-;19956:3;19949:37;19874:118;;:::o;19998:77::-;20035:7;20064:5;20053:16;;19998:77;;;:::o;20081:118::-;20168:24;20186:5;20168:24;:::i;:::-;20163:3;20156:37;20081:118;;:::o;20205:332::-;20326:4;20364:2;20353:9;20349:18;20341:26;;20377:71;20445:1;20434:9;20430:17;20421:6;20377:71;:::i;:::-;20458:72;20526:2;20515:9;20511:18;20502:6;20458:72;:::i;:::-;20205:332;;;;;:::o;20624:117::-;20733:1;20730;20723:12;20870:122;20943:24;20961:5;20943:24;:::i;:::-;20936:5;20933:35;20923:63;;20982:1;20979;20972:12;20923:63;20870:122;:::o;20998:143::-;21055:5;21086:6;21080:13;21071:22;;21102:33;21129:5;21102:33;:::i;:::-;20998:143;;;;:::o;21147:351::-;21217:6;21266:2;21254:9;21245:7;21241:23;21237:32;21234:119;;;21272:79;;:::i;:::-;21234:119;21392:1;21417:64;21473:7;21464:6;21453:9;21449:22;21417:64;:::i;:::-;21407:74;;21363:128;21147:351;;;;:::o","linkReferences":{}},"methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23"}}}},"test/fuzzing/utils/FuzzConstants.sol":{"FuzzConstants":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/fuzzing/utils/FuzzConstants.sol\":\"FuzzConstants\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ERC721A/=lib/ERC721A/contracts/\",\":@openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/=lib/\",\":@uniswap/permit2/=lib/permit2/src/\",\":@uniswap/swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":fuzzlib/=lib/fuzzlib/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":permit2/=lib/permit2/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=lib/permit2/lib/solmate/\",\":swap-router-contracts/=lib/swap-router-contracts/contracts/\",\":v3-core/=lib/v3-core/\"]},\"sources\":{\"test/fuzzing/utils/FuzzConstants.sol\":{\"keccak256\":\"0xb544dbecf68f5df29c4c71d2af083452c20a983acbecc6ec37e52b584a3f0304\",\"urls\":[\"bzz-raw://37e1f711994ca4ed6c6ded2641c3532b93aa97952a1f8688e4da0ef74d975961\",\"dweb:/ipfs/QmcQB4xVmyovYNnCrd7mvQY5zrsZ7ESavdPZLBHh4tBoEV\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea264697066735822122097d2dfe5aeb5577040d2897bb5090d4dfa46b05defedd1538d2acdeea847a73964736f6c63430008190033","sourceMap":"25:2360:53:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"60806040525f80fdfea264697066735822122097d2dfe5aeb5577040d2897bb5090d4dfa46b05defedd1538d2acdeea847a73964736f6c63430008190033","sourceMap":"25:2360:53:-:0;;;;;","linkReferences":{}}}}}},"sources":{"lib/forge-std/src/Base.sol":{"id":0,"ast":{}},"lib/forge-std/src/StdAssertions.sol":{"id":1,"ast":{}},"lib/forge-std/src/StdChains.sol":{"id":2,"ast":{}},"lib/forge-std/src/StdCheats.sol":{"id":3,"ast":{}},"lib/forge-std/src/StdError.sol":{"id":4,"ast":{}},"lib/forge-std/src/StdInvariant.sol":{"id":5,"ast":{}},"lib/forge-std/src/StdJson.sol":{"id":6,"ast":{}},"lib/forge-std/src/StdMath.sol":{"id":7,"ast":{}},"lib/forge-std/src/StdStorage.sol":{"id":8,"ast":{}},"lib/forge-std/src/StdStyle.sol":{"id":9,"ast":{}},"lib/forge-std/src/StdToml.sol":{"id":10,"ast":{}},"lib/forge-std/src/StdUtils.sol":{"id":11,"ast":{}},"lib/forge-std/src/Test.sol":{"id":12,"ast":{}},"lib/forge-std/src/Vm.sol":{"id":13,"ast":{}},"lib/forge-std/src/console.sol":{"id":14,"ast":{}},"lib/forge-std/src/console2.sol":{"id":15,"ast":{}},"lib/forge-std/src/interfaces/IERC165.sol":{"id":16,"ast":{}},"lib/forge-std/src/interfaces/IERC20.sol":{"id":17,"ast":{}},"lib/forge-std/src/interfaces/IERC721.sol":{"id":18,"ast":{}},"lib/forge-std/src/interfaces/IMulticall3.sol":{"id":19,"ast":{}},"lib/forge-std/src/mocks/MockERC20.sol":{"id":20,"ast":{}},"lib/forge-std/src/mocks/MockERC721.sol":{"id":21,"ast":{}},"lib/forge-std/src/safeconsole.sol":{"id":22,"ast":{}},"lib/fuzzlib/src/FuzzBase.sol":{"id":23,"ast":{}},"lib/fuzzlib/src/FuzzLibString.sol":{"id":24,"ast":{}},"lib/fuzzlib/src/Fuzzlib.sol":{"id":25,"ast":{}},"lib/fuzzlib/src/helpers/HelperAssert.sol":{"id":26,"ast":{}},"lib/fuzzlib/src/helpers/HelperBase.sol":{"id":27,"ast":{}},"lib/fuzzlib/src/helpers/HelperClamp.sol":{"id":28,"ast":{}},"lib/fuzzlib/src/helpers/HelperLog.sol":{"id":29,"ast":{}},"lib/fuzzlib/src/helpers/HelperMath.sol":{"id":30,"ast":{}},"lib/fuzzlib/src/helpers/HelperRandom.sol":{"id":31,"ast":{}},"lib/fuzzlib/src/libraries/LibLog.sol":{"id":32,"ast":{}},"lib/fuzzlib/src/platform/IPlatform.sol":{"id":33,"ast":{}},"lib/fuzzlib/src/platform/PlatformCrytic.sol":{"id":34,"ast":{}},"test/fuzzing/FoundryPlayground.sol":{"id":35,"ast":{"absolutePath":"test/fuzzing/FoundryPlayground.sol","id":42353,"exportedSymbols":{"BeforeAfter":[43027],"FoundryPlayground":[42352],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzGuided":[42376],"FuzzLibString":[39439],"FuzzSampleContract":[42691],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PostconditionsBase":[43084],"PostconditionsSampleContract":[43235],"PreconditionsBase":[43645],"PreconditionsSampleContract":[43751],"Properties":[43773],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"Properties_ERR":[44798],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"32:1026:35","nodes":[{"id":42275,"nodeType":"PragmaDirective","src":"32:23:35","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":42276,"nodeType":"ImportDirective","src":"57:26:35","nodes":[],"absolutePath":"test/fuzzing/FuzzGuided.sol","file":"./FuzzGuided.sol","nameLocation":"-1:-1:-1","scope":42353,"sourceUnit":42377,"symbolAliases":[],"unitAlias":""},{"id":42352,"nodeType":"ContractDefinition","src":"85:972:35","nodes":[{"id":42291,"nodeType":"FunctionDefinition","src":"132:105:35","nodes":[],"body":{"id":42290,"nodeType":"Block","src":"156:81:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"31353234373835393932","id":42284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"174:10:35","typeDescriptions":{"typeIdentifier":"t_rational_1524785992_by_1","typeString":"int_const 1524785992"},"value":"1524785992"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1524785992_by_1","typeString":"int_const 1524785992"}],"expression":{"id":42281,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"166:2:35","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":42283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"169:4:35","memberName":"warp","nodeType":"MemberAccess","referencedDeclaration":15932,"src":"166:7:35","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":42285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"166:19:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42286,"nodeType":"ExpressionStatement","src":"166:19:35"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":42287,"name":"fuzzSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42706,"src":"219:9:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":42288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"219:11:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42289,"nodeType":"ExpressionStatement","src":"219:11:35"}]},"functionSelector":"0a9254e4","implemented":true,"kind":"function","modifiers":[],"name":"setUp","nameLocation":"141:5:35","parameters":{"id":42279,"nodeType":"ParameterList","parameters":[],"src":"146:2:35"},"returnParameters":{"id":42280,"nodeType":"ParameterList","parameters":[],"src":"156:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42299,"nodeType":"FunctionDefinition","src":"243:86:35","nodes":[],"body":{"id":42298,"nodeType":"Block","src":"290:39:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"31","id":42295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"320:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42294,"name":"fuzz_sampleFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42435,"src":"300:19:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":42296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"300:22:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42297,"nodeType":"ExpressionStatement","src":"300:22:35"}]},"functionSelector":"ad36ac56","implemented":true,"kind":"function","modifiers":[],"name":"test_coverage_SampleFunction","nameLocation":"252:28:35","parameters":{"id":42292,"nodeType":"ParameterList","parameters":[],"src":"280:2:35"},"returnParameters":{"id":42293,"nodeType":"ParameterList","parameters":[],"src":"290:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42311,"nodeType":"FunctionDefinition","src":"335:107:35","nodes":[],"body":{"id":42310,"nodeType":"Block","src":"371:71:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"31","id":42303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"401:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42302,"name":"fuzz_sampleFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42435,"src":"381:19:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":42304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"381:22:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42305,"nodeType":"ExpressionStatement","src":"381:22:35"},{"expression":{"arguments":[{"hexValue":"32","id":42307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"433:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":42306,"name":"fuzz_sampleFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42435,"src":"413:19:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":42308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"413:22:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42309,"nodeType":"ExpressionStatement","src":"413:22:35"}]},"functionSelector":"f32edd76","implemented":true,"kind":"function","modifiers":[],"name":"test_repro_INV_01","nameLocation":"344:17:35","parameters":{"id":42300,"nodeType":"ParameterList","parameters":[],"src":"361:2:35"},"returnParameters":{"id":42301,"nodeType":"ParameterList","parameters":[],"src":"371:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42319,"nodeType":"FunctionDefinition","src":"448:116:35","nodes":[],"body":{"id":42318,"nodeType":"Block","src":"487:77:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"74727565","id":42315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"552:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":42314,"name":"fuzz_sampleFailWithRequire","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42486,"src":"525:26:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":42316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"525:32:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42317,"nodeType":"ExpressionStatement","src":"525:32:35"}]},"functionSelector":"0e96a923","implemented":true,"kind":"function","modifiers":[],"name":"test_repro_ERR_01_01","nameLocation":"457:20:35","parameters":{"id":42312,"nodeType":"ParameterList","parameters":[],"src":"477:2:35"},"returnParameters":{"id":42313,"nodeType":"ParameterList","parameters":[],"src":"487:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42327,"nodeType":"FunctionDefinition","src":"570:122:35","nodes":[],"body":{"id":42326,"nodeType":"Block","src":"609:83:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"31","id":42323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"683:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42322,"name":"fuzz_sampleFailWithCustomError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42537,"src":"652:30:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":42324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"652:33:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42325,"nodeType":"ExpressionStatement","src":"652:33:35"}]},"functionSelector":"d469e84e","implemented":true,"kind":"function","modifiers":[],"name":"test_repro_ERR_01_02","nameLocation":"579:20:35","parameters":{"id":42320,"nodeType":"ParameterList","parameters":[],"src":"599:2:35"},"returnParameters":{"id":42321,"nodeType":"ParameterList","parameters":[],"src":"609:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42335,"nodeType":"FunctionDefinition","src":"698:109:35","nodes":[],"body":{"id":42334,"nodeType":"Block","src":"737:70:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"31","id":42331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"798:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42330,"name":"fuzz_sampleFailWithPanic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42588,"src":"773:24:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":42332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"773:27:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42333,"nodeType":"ExpressionStatement","src":"773:27:35"}]},"functionSelector":"eb970f49","implemented":true,"kind":"function","modifiers":[],"name":"test_repro_ERR_01_03","nameLocation":"707:20:35","parameters":{"id":42328,"nodeType":"ParameterList","parameters":[],"src":"727:2:35"},"returnParameters":{"id":42329,"nodeType":"ParameterList","parameters":[],"src":"737:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42343,"nodeType":"FunctionDefinition","src":"813:111:35","nodes":[],"body":{"id":42342,"nodeType":"Block","src":"852:72:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"31","id":42339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"915:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42338,"name":"fuzz_sampleFailWithAssert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42639,"src":"889:25:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":42340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"889:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42341,"nodeType":"ExpressionStatement","src":"889:28:35"}]},"functionSelector":"aed1d4cd","implemented":true,"kind":"function","modifiers":[],"name":"test_repro_ERR_01_04","nameLocation":"822:20:35","parameters":{"id":42336,"nodeType":"ParameterList","parameters":[],"src":"842:2:35"},"returnParameters":{"id":42337,"nodeType":"ParameterList","parameters":[],"src":"852:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42351,"nodeType":"FunctionDefinition","src":"930:125:35","nodes":[],"body":{"id":42350,"nodeType":"Block","src":"969:86:35","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"74727565","id":42347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1043:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":42346,"name":"fuzz_sampleFailReturnEmptyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42690,"src":"1012:30:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":42348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1012:36:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42349,"nodeType":"ExpressionStatement","src":"1012:36:35"}]},"functionSelector":"207b395c","implemented":true,"kind":"function","modifiers":[],"name":"test_repro_ERR_01_05","nameLocation":"939:20:35","parameters":{"id":42344,"nodeType":"ParameterList","parameters":[],"src":"959:2:35"},"returnParameters":{"id":42345,"nodeType":"ParameterList","parameters":[],"src":"969:0:35"},"scope":42352,"stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"abstract":false,"baseContracts":[{"baseName":{"id":42277,"name":"FuzzGuided","nameLocations":["115:10:35"],"nodeType":"IdentifierPath","referencedDeclaration":42376,"src":"115:10:35"},"id":42278,"nodeType":"InheritanceSpecifier","src":"115:10:35"}],"canonicalName":"FoundryPlayground","contractDependencies":[39466,42273,42819],"contractKind":"contract","fullyImplemented":true,"internalFunctionIDs":{"16196":1},"linearizedBaseContracts":[42352,42376,42691,43235,43084,43773,44798,44624,44162,45200,43751,43645,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"FoundryPlayground","nameLocation":"94:17:35","scope":42353,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,43244,44810]}],"license":"MIT"}},"test/fuzzing/FuzzGuided.sol":{"id":36,"ast":{"absolutePath":"test/fuzzing/FuzzGuided.sol","id":42377,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzGuided":[42376],"FuzzLibString":[39439],"FuzzSampleContract":[42691],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PostconditionsBase":[43084],"PostconditionsSampleContract":[43235],"PreconditionsBase":[43645],"PreconditionsSampleContract":[43751],"Properties":[43773],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"Properties_ERR":[44798],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"37:315:36","nodes":[{"id":42354,"nodeType":"PragmaDirective","src":"37:23:36","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":42355,"nodeType":"ImportDirective","src":"62:34:36","nodes":[],"absolutePath":"test/fuzzing/FuzzSampleContract.sol","file":"./FuzzSampleContract.sol","nameLocation":"-1:-1:-1","scope":42377,"sourceUnit":42692,"symbolAliases":[],"unitAlias":""},{"id":42376,"nodeType":"ContractDefinition","src":"98:253:36","nodes":[{"id":42375,"nodeType":"FunctionDefinition","src":"146:203:36","nodes":[],"body":{"id":42374,"nodeType":"Block","src":"257:92:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":42367,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42359,"src":"287:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42366,"name":"fuzz_sampleFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42435,"src":"267:19:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":42368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"267:32:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42369,"nodeType":"ExpressionStatement","src":"267:32:36"},{"expression":{"arguments":[{"id":42371,"name":"sampleInput2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42361,"src":"329:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42370,"name":"fuzz_sampleFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42435,"src":"309:19:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":42372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"309:33:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42373,"nodeType":"ExpressionStatement","src":"309:33:36"}]},"functionSelector":"7a24d15d","implemented":true,"kind":"function","modifiers":[{"id":42364,"kind":"modifierInvocation","modifierName":{"id":42363,"name":"setCurrentActor","nameLocations":["241:15:36"],"nodeType":"IdentifierPath","referencedDeclaration":43330,"src":"241:15:36"},"nodeType":"ModifierInvocation","src":"241:15:36"}],"name":"fuzz_guided_sampleFunctionCallTwice","nameLocation":"155:35:36","parameters":{"id":42362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42359,"mutability":"mutable","name":"sampleInput","nameLocation":"199:11:36","nodeType":"VariableDeclaration","scope":42375,"src":"191:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42358,"name":"uint256","nodeType":"ElementaryTypeName","src":"191:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":42361,"mutability":"mutable","name":"sampleInput2","nameLocation":"220:12:36","nodeType":"VariableDeclaration","scope":42375,"src":"212:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42360,"name":"uint256","nodeType":"ElementaryTypeName","src":"212:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"190:43:36"},"returnParameters":{"id":42365,"nodeType":"ParameterList","parameters":[],"src":"257:0:36"},"scope":42376,"stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"abstract":false,"baseContracts":[{"baseName":{"id":42356,"name":"FuzzSampleContract","nameLocations":["121:18:36"],"nodeType":"IdentifierPath","referencedDeclaration":42691,"src":"121:18:36"},"id":42357,"nodeType":"InheritanceSpecifier","src":"121:18:36"}],"canonicalName":"FuzzGuided","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"internalFunctionIDs":{"16196":1},"linearizedBaseContracts":[42376,42691,43235,43084,43773,44798,44624,44162,45200,43751,43645,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"FuzzGuided","nameLocation":"107:10:36","scope":42377,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,43244,44810]}],"license":"UNTITLED"}},"test/fuzzing/FuzzSampleContract.sol":{"id":37,"ast":{"absolutePath":"test/fuzzing/FuzzSampleContract.sol","id":42692,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzLibString":[39439],"FuzzSampleContract":[42691],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PostconditionsBase":[43084],"PostconditionsSampleContract":[43235],"PreconditionsBase":[43645],"PreconditionsSampleContract":[43751],"Properties":[43773],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"Properties_ERR":[44798],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"32:3296:37","nodes":[{"id":42378,"nodeType":"PragmaDirective","src":"32:23:37","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":42379,"nodeType":"ImportDirective","src":"57:65:37","nodes":[],"absolutePath":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol","file":"./helpers/preconditions/PreconditionsSampleContract.sol","nameLocation":"-1:-1:-1","scope":42692,"sourceUnit":43752,"symbolAliases":[],"unitAlias":""},{"id":42380,"nodeType":"ImportDirective","src":"123:67:37","nodes":[],"absolutePath":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","file":"./helpers/postconditions/PostconditionsSampleContract.sol","nameLocation":"-1:-1:-1","scope":42692,"sourceUnit":43236,"symbolAliases":[],"unitAlias":""},{"id":42691,"nodeType":"ContractDefinition","src":"192:3135:37","nodes":[{"id":42435,"nodeType":"FunctionDefinition","src":"287:470:37","nodes":[],"body":{"id":42434,"nodeType":"Block","src":"360:397:37","nodes":[],"statements":[{"assignments":[42393],"declarations":[{"constant":false,"id":42393,"mutability":"mutable","name":"params","nameLocation":"398:6:37","nodeType":"VariableDeclaration","scope":42434,"src":"370:34:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFunctionParams_$42827_memory_ptr","typeString":"struct BeforeAfter.SampleFunctionParams"},"typeName":{"id":42392,"nodeType":"UserDefinedTypeName","pathNode":{"id":42391,"name":"SampleFunctionParams","nameLocations":["370:20:37"],"nodeType":"IdentifierPath","referencedDeclaration":42827,"src":"370:20:37"},"referencedDeclaration":42827,"src":"370:20:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFunctionParams_$42827_storage_ptr","typeString":"struct BeforeAfter.SampleFunctionParams"}},"visibility":"internal"}],"id":42397,"initialValue":{"arguments":[{"id":42395,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42386,"src":"435:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42394,"name":"sampleFunctionPreconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43670,"src":"407:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_struct$_SampleFunctionParams_$42827_memory_ptr_$","typeString":"function (uint256) returns (struct BeforeAfter.SampleFunctionParams memory)"}},"id":42396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"407:40:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SampleFunctionParams_$42827_memory_ptr","typeString":"struct BeforeAfter.SampleFunctionParams memory"}},"nodeType":"VariableDeclarationStatement","src":"370:77:37"},{"assignments":[42402],"declarations":[{"constant":false,"id":42402,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"475:14:37","nodeType":"VariableDeclaration","scope":42434,"src":"458:31:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42400,"name":"address","nodeType":"ElementaryTypeName","src":"458:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42401,"nodeType":"ArrayTypeName","src":"458:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":42408,"initialValue":{"arguments":[{"hexValue":"31","id":42406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"506:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"492:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":42403,"name":"address","nodeType":"ElementaryTypeName","src":"496:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42404,"nodeType":"ArrayTypeName","src":"496:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":42407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"492:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"458:50:37"},{"expression":{"id":42413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":42409,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42402,"src":"518:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42411,"indexExpression":{"hexValue":"30","id":42410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"533:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"518:17:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42412,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"538:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"518:32:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42414,"nodeType":"ExpressionStatement","src":"518:32:37"},{"expression":{"arguments":[{"id":42416,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42402,"src":"568:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42415,"name":"_before","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42870,"src":"560:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":42417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"560:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42418,"nodeType":"ExpressionStatement","src":"560:23:37"},{"assignments":[42420,42422],"declarations":[{"constant":false,"id":42420,"mutability":"mutable","name":"success","nameLocation":"600:7:37","nodeType":"VariableDeclaration","scope":42434,"src":"595:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42419,"name":"bool","nodeType":"ElementaryTypeName","src":"595:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":42422,"mutability":"mutable","name":"returnData","nameLocation":"622:10:37","nodeType":"VariableDeclaration","scope":42434,"src":"609:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42421,"name":"bytes","nodeType":"ElementaryTypeName","src":"609:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":42427,"initialValue":{"arguments":[{"expression":{"id":42424,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42393,"src":"656:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFunctionParams_$42827_memory_ptr","typeString":"struct BeforeAfter.SampleFunctionParams memory"}},"id":42425,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"663:10:37","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42826,"src":"656:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42423,"name":"_sampleFunctionCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44848,"src":"636:19:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (uint256) returns (bool,bytes memory)"}},"id":42426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"636:38:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"594:80:37"},{"expression":{"arguments":[{"id":42429,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42420,"src":"714:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":42430,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42422,"src":"723:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":42431,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42402,"src":"735:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42428,"name":"sampleFunctionPostconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43119,"src":"685:28:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$_t_bytes_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (bool,bytes memory,address[] memory)"}},"id":42432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"685:65:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42433,"nodeType":"ExpressionStatement","src":"685:65:37"}]},"functionSelector":"a99867d0","implemented":true,"kind":"function","modifiers":[{"id":42389,"kind":"modifierInvocation","modifierName":{"id":42388,"name":"setCurrentActor","nameLocations":["344:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":43330,"src":"344:15:37"},"nodeType":"ModifierInvocation","src":"344:15:37"}],"name":"fuzz_sampleFunction","nameLocation":"296:19:37","parameters":{"id":42387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42386,"mutability":"mutable","name":"sampleInput","nameLocation":"324:11:37","nodeType":"VariableDeclaration","scope":42435,"src":"316:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42385,"name":"uint256","nodeType":"ElementaryTypeName","src":"316:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"315:21:37"},"returnParameters":{"id":42390,"nodeType":"ParameterList","parameters":[],"src":"360:0:37"},"scope":42691,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42486,"nodeType":"FunctionDefinition","src":"763:502:37","nodes":[],"body":{"id":42485,"nodeType":"Block","src":"840:425:37","nodes":[],"statements":[{"assignments":[42444],"declarations":[{"constant":false,"id":42444,"mutability":"mutable","name":"params","nameLocation":"885:6:37","nodeType":"VariableDeclaration","scope":42485,"src":"850:41:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithRequireParams_$42830_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithRequireParams"},"typeName":{"id":42443,"nodeType":"UserDefinedTypeName","pathNode":{"id":42442,"name":"SampleFailWithRequireParams","nameLocations":["850:27:37"],"nodeType":"IdentifierPath","referencedDeclaration":42830,"src":"850:27:37"},"referencedDeclaration":42830,"src":"850:27:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithRequireParams_$42830_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithRequireParams"}},"visibility":"internal"}],"id":42448,"initialValue":{"arguments":[{"id":42446,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42437,"src":"929:11:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":42445,"name":"sampleFailWithRequirePreconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43685,"src":"894:34:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$returns$_t_struct$_SampleFailWithRequireParams_$42830_memory_ptr_$","typeString":"function (bool) returns (struct BeforeAfter.SampleFailWithRequireParams memory)"}},"id":42447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"894:47:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithRequireParams_$42830_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithRequireParams memory"}},"nodeType":"VariableDeclarationStatement","src":"850:91:37"},{"assignments":[42453],"declarations":[{"constant":false,"id":42453,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"969:14:37","nodeType":"VariableDeclaration","scope":42485,"src":"952:31:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42451,"name":"address","nodeType":"ElementaryTypeName","src":"952:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42452,"nodeType":"ArrayTypeName","src":"952:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":42459,"initialValue":{"arguments":[{"hexValue":"31","id":42457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1000:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"986:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":42454,"name":"address","nodeType":"ElementaryTypeName","src":"990:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42455,"nodeType":"ArrayTypeName","src":"990:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":42458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"952:50:37"},{"expression":{"id":42464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":42460,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42453,"src":"1012:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42462,"indexExpression":{"hexValue":"30","id":42461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1027:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1012:17:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42463,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"1032:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1012:32:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42465,"nodeType":"ExpressionStatement","src":"1012:32:37"},{"expression":{"arguments":[{"id":42467,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42453,"src":"1062:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42466,"name":"_before","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42870,"src":"1054:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":42468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42469,"nodeType":"ExpressionStatement","src":"1054:23:37"},{"assignments":[42471,42473],"declarations":[{"constant":false,"id":42471,"mutability":"mutable","name":"success","nameLocation":"1094:7:37","nodeType":"VariableDeclaration","scope":42485,"src":"1089:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42470,"name":"bool","nodeType":"ElementaryTypeName","src":"1089:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":42473,"mutability":"mutable","name":"returnData","nameLocation":"1116:10:37","nodeType":"VariableDeclaration","scope":42485,"src":"1103:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42472,"name":"bytes","nodeType":"ElementaryTypeName","src":"1103:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":42478,"initialValue":{"arguments":[{"expression":{"id":42475,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42444,"src":"1157:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithRequireParams_$42830_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithRequireParams memory"}},"id":42476,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1164:10:37","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42829,"src":"1157:17:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":42474,"name":"_sampleFailWithRequireCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44882,"src":"1130:26:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bool) returns (bool,bytes memory)"}},"id":42477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1130:45:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1088:87:37"},{"expression":{"arguments":[{"id":42480,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42471,"src":"1222:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":42481,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42473,"src":"1231:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":42482,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42453,"src":"1243:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42479,"name":"sampleFailWithRequirePostconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43142,"src":"1186:35:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$_t_bytes_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (bool,bytes memory,address[] memory)"}},"id":42483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1186:72:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42484,"nodeType":"ExpressionStatement","src":"1186:72:37"}]},"functionSelector":"57cee9aa","implemented":true,"kind":"function","modifiers":[{"id":42440,"kind":"modifierInvocation","modifierName":{"id":42439,"name":"setCurrentActor","nameLocations":["824:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":43330,"src":"824:15:37"},"nodeType":"ModifierInvocation","src":"824:15:37"}],"name":"fuzz_sampleFailWithRequire","nameLocation":"772:26:37","parameters":{"id":42438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42437,"mutability":"mutable","name":"sampleInput","nameLocation":"804:11:37","nodeType":"VariableDeclaration","scope":42486,"src":"799:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42436,"name":"bool","nodeType":"ElementaryTypeName","src":"799:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"798:18:37"},"returnParameters":{"id":42441,"nodeType":"ParameterList","parameters":[],"src":"840:0:37"},"scope":42691,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42537,"nodeType":"FunctionDefinition","src":"1271:519:37","nodes":[],"body":{"id":42536,"nodeType":"Block","src":"1351:439:37","nodes":[],"statements":[{"assignments":[42495],"declarations":[{"constant":false,"id":42495,"mutability":"mutable","name":"params","nameLocation":"1400:6:37","nodeType":"VariableDeclaration","scope":42536,"src":"1361:45:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithCustomErrorParams_$42833_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithCustomErrorParams"},"typeName":{"id":42494,"nodeType":"UserDefinedTypeName","pathNode":{"id":42493,"name":"SampleFailWithCustomErrorParams","nameLocations":["1361:31:37"],"nodeType":"IdentifierPath","referencedDeclaration":42833,"src":"1361:31:37"},"referencedDeclaration":42833,"src":"1361:31:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithCustomErrorParams_$42833_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithCustomErrorParams"}},"visibility":"internal"}],"id":42499,"initialValue":{"arguments":[{"id":42497,"name":"sampleNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42488,"src":"1448:9:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":42496,"name":"sampleFailWithCustomErrorPreconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43700,"src":"1409:38:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$returns$_t_struct$_SampleFailWithCustomErrorParams_$42833_memory_ptr_$","typeString":"function (uint8) returns (struct BeforeAfter.SampleFailWithCustomErrorParams memory)"}},"id":42498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1409:49:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithCustomErrorParams_$42833_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithCustomErrorParams memory"}},"nodeType":"VariableDeclarationStatement","src":"1361:97:37"},{"assignments":[42504],"declarations":[{"constant":false,"id":42504,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"1486:14:37","nodeType":"VariableDeclaration","scope":42536,"src":"1469:31:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42502,"name":"address","nodeType":"ElementaryTypeName","src":"1469:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42503,"nodeType":"ArrayTypeName","src":"1469:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":42510,"initialValue":{"arguments":[{"hexValue":"31","id":42508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1517:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1503:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":42505,"name":"address","nodeType":"ElementaryTypeName","src":"1507:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42506,"nodeType":"ArrayTypeName","src":"1507:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":42509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1503:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1469:50:37"},{"expression":{"id":42515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":42511,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42504,"src":"1529:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42513,"indexExpression":{"hexValue":"30","id":42512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1544:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1529:17:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42514,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"1549:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1529:32:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42516,"nodeType":"ExpressionStatement","src":"1529:32:37"},{"expression":{"arguments":[{"id":42518,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42504,"src":"1579:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42517,"name":"_before","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42870,"src":"1571:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":42519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1571:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42520,"nodeType":"ExpressionStatement","src":"1571:23:37"},{"assignments":[42522,42524],"declarations":[{"constant":false,"id":42522,"mutability":"mutable","name":"success","nameLocation":"1611:7:37","nodeType":"VariableDeclaration","scope":42536,"src":"1606:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42521,"name":"bool","nodeType":"ElementaryTypeName","src":"1606:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":42524,"mutability":"mutable","name":"returnData","nameLocation":"1633:10:37","nodeType":"VariableDeclaration","scope":42536,"src":"1620:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42523,"name":"bytes","nodeType":"ElementaryTypeName","src":"1620:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":42529,"initialValue":{"arguments":[{"expression":{"id":42526,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42495,"src":"1678:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithCustomErrorParams_$42833_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithCustomErrorParams memory"}},"id":42527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1685:10:37","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42832,"src":"1678:17:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":42525,"name":"_sampleFailWithCustomErrorCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44916,"src":"1647:30:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (uint8) returns (bool,bytes memory)"}},"id":42528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1647:49:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1605:91:37"},{"expression":{"arguments":[{"id":42531,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42522,"src":"1747:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":42532,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42524,"src":"1756:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":42533,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42504,"src":"1768:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42530,"name":"sampleFailWithCustomErrorPostconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43165,"src":"1707:39:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$_t_bytes_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (bool,bytes memory,address[] memory)"}},"id":42534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1707:76:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42535,"nodeType":"ExpressionStatement","src":"1707:76:37"}]},"functionSelector":"d59e1d2c","implemented":true,"kind":"function","modifiers":[{"id":42491,"kind":"modifierInvocation","modifierName":{"id":42490,"name":"setCurrentActor","nameLocations":["1335:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":43330,"src":"1335:15:37"},"nodeType":"ModifierInvocation","src":"1335:15:37"}],"name":"fuzz_sampleFailWithCustomError","nameLocation":"1280:30:37","parameters":{"id":42489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42488,"mutability":"mutable","name":"sampleNum","nameLocation":"1317:9:37","nodeType":"VariableDeclaration","scope":42537,"src":"1311:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42487,"name":"uint8","nodeType":"ElementaryTypeName","src":"1311:5:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1310:17:37"},"returnParameters":{"id":42492,"nodeType":"ParameterList","parameters":[],"src":"1351:0:37"},"scope":42691,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42588,"nodeType":"FunctionDefinition","src":"1796:495:37","nodes":[],"body":{"id":42587,"nodeType":"Block","src":"1874:417:37","nodes":[],"statements":[{"assignments":[42546],"declarations":[{"constant":false,"id":42546,"mutability":"mutable","name":"params","nameLocation":"1917:6:37","nodeType":"VariableDeclaration","scope":42587,"src":"1884:39:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithPanicParams_$42836_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithPanicParams"},"typeName":{"id":42545,"nodeType":"UserDefinedTypeName","pathNode":{"id":42544,"name":"SampleFailWithPanicParams","nameLocations":["1884:25:37"],"nodeType":"IdentifierPath","referencedDeclaration":42836,"src":"1884:25:37"},"referencedDeclaration":42836,"src":"1884:25:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithPanicParams_$42836_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithPanicParams"}},"visibility":"internal"}],"id":42550,"initialValue":{"arguments":[{"id":42548,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42539,"src":"1959:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42547,"name":"sampleFailWithPanicPreconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43720,"src":"1926:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_struct$_SampleFailWithPanicParams_$42836_memory_ptr_$","typeString":"function (uint256) returns (struct BeforeAfter.SampleFailWithPanicParams memory)"}},"id":42549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1926:45:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithPanicParams_$42836_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithPanicParams memory"}},"nodeType":"VariableDeclarationStatement","src":"1884:87:37"},{"assignments":[42555],"declarations":[{"constant":false,"id":42555,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"1999:14:37","nodeType":"VariableDeclaration","scope":42587,"src":"1982:31:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42553,"name":"address","nodeType":"ElementaryTypeName","src":"1982:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42554,"nodeType":"ArrayTypeName","src":"1982:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":42561,"initialValue":{"arguments":[{"hexValue":"31","id":42559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2030:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2016:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":42556,"name":"address","nodeType":"ElementaryTypeName","src":"2020:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42557,"nodeType":"ArrayTypeName","src":"2020:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":42560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1982:50:37"},{"expression":{"id":42566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":42562,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42555,"src":"2042:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42564,"indexExpression":{"hexValue":"30","id":42563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2057:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2042:17:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42565,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"2062:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2042:32:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42567,"nodeType":"ExpressionStatement","src":"2042:32:37"},{"expression":{"arguments":[{"id":42569,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42555,"src":"2092:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42568,"name":"_before","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42870,"src":"2084:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":42570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2084:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42571,"nodeType":"ExpressionStatement","src":"2084:23:37"},{"assignments":[42573,42575],"declarations":[{"constant":false,"id":42573,"mutability":"mutable","name":"success","nameLocation":"2124:7:37","nodeType":"VariableDeclaration","scope":42587,"src":"2119:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42572,"name":"bool","nodeType":"ElementaryTypeName","src":"2119:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":42575,"mutability":"mutable","name":"returnData","nameLocation":"2146:10:37","nodeType":"VariableDeclaration","scope":42587,"src":"2133:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42574,"name":"bytes","nodeType":"ElementaryTypeName","src":"2133:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":42580,"initialValue":{"arguments":[{"expression":{"id":42577,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42546,"src":"2185:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithPanicParams_$42836_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithPanicParams memory"}},"id":42578,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2192:10:37","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42835,"src":"2185:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42576,"name":"_sampleFailWithPanicCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44950,"src":"2160:24:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (uint256) returns (bool,bytes memory)"}},"id":42579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2160:43:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2118:85:37"},{"expression":{"arguments":[{"id":42582,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42573,"src":"2248:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":42583,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42575,"src":"2257:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":42584,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42555,"src":"2269:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42581,"name":"sampleFailWithPanicPostconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43188,"src":"2214:33:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$_t_bytes_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (bool,bytes memory,address[] memory)"}},"id":42585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2214:70:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42586,"nodeType":"ExpressionStatement","src":"2214:70:37"}]},"functionSelector":"61583d90","implemented":true,"kind":"function","modifiers":[{"id":42542,"kind":"modifierInvocation","modifierName":{"id":42541,"name":"setCurrentActor","nameLocations":["1858:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":43330,"src":"1858:15:37"},"nodeType":"ModifierInvocation","src":"1858:15:37"}],"name":"fuzz_sampleFailWithPanic","nameLocation":"1805:24:37","parameters":{"id":42540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42539,"mutability":"mutable","name":"sampleInput","nameLocation":"1838:11:37","nodeType":"VariableDeclaration","scope":42588,"src":"1830:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42538,"name":"uint256","nodeType":"ElementaryTypeName","src":"1830:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1829:21:37"},"returnParameters":{"id":42543,"nodeType":"ParameterList","parameters":[],"src":"1874:0:37"},"scope":42691,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42639,"nodeType":"FunctionDefinition","src":"2297:500:37","nodes":[],"body":{"id":42638,"nodeType":"Block","src":"2376:421:37","nodes":[],"statements":[{"assignments":[42597],"declarations":[{"constant":false,"id":42597,"mutability":"mutable","name":"params","nameLocation":"2420:6:37","nodeType":"VariableDeclaration","scope":42638,"src":"2386:40:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithAssertParams_$42839_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithAssertParams"},"typeName":{"id":42596,"nodeType":"UserDefinedTypeName","pathNode":{"id":42595,"name":"SampleFailWithAssertParams","nameLocations":["2386:26:37"],"nodeType":"IdentifierPath","referencedDeclaration":42839,"src":"2386:26:37"},"referencedDeclaration":42839,"src":"2386:26:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithAssertParams_$42839_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithAssertParams"}},"visibility":"internal"}],"id":42601,"initialValue":{"arguments":[{"id":42599,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42590,"src":"2463:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42598,"name":"sampleFailWithAssertPreconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43735,"src":"2429:33:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_struct$_SampleFailWithAssertParams_$42839_memory_ptr_$","typeString":"function (uint256) returns (struct BeforeAfter.SampleFailWithAssertParams memory)"}},"id":42600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2429:46:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithAssertParams_$42839_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithAssertParams memory"}},"nodeType":"VariableDeclarationStatement","src":"2386:89:37"},{"assignments":[42606],"declarations":[{"constant":false,"id":42606,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"2503:14:37","nodeType":"VariableDeclaration","scope":42638,"src":"2486:31:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42604,"name":"address","nodeType":"ElementaryTypeName","src":"2486:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42605,"nodeType":"ArrayTypeName","src":"2486:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":42612,"initialValue":{"arguments":[{"hexValue":"31","id":42610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2534:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2520:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":42607,"name":"address","nodeType":"ElementaryTypeName","src":"2524:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42608,"nodeType":"ArrayTypeName","src":"2524:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":42611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2520:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2486:50:37"},{"expression":{"id":42617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":42613,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42606,"src":"2546:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42615,"indexExpression":{"hexValue":"30","id":42614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2561:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2546:17:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42616,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"2566:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2546:32:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42618,"nodeType":"ExpressionStatement","src":"2546:32:37"},{"expression":{"arguments":[{"id":42620,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42606,"src":"2596:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42619,"name":"_before","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42870,"src":"2588:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":42621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2588:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42622,"nodeType":"ExpressionStatement","src":"2588:23:37"},{"assignments":[42624,42626],"declarations":[{"constant":false,"id":42624,"mutability":"mutable","name":"success","nameLocation":"2628:7:37","nodeType":"VariableDeclaration","scope":42638,"src":"2623:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42623,"name":"bool","nodeType":"ElementaryTypeName","src":"2623:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":42626,"mutability":"mutable","name":"returnData","nameLocation":"2650:10:37","nodeType":"VariableDeclaration","scope":42638,"src":"2637:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42625,"name":"bytes","nodeType":"ElementaryTypeName","src":"2637:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":42631,"initialValue":{"arguments":[{"expression":{"id":42628,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42597,"src":"2690:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithAssertParams_$42839_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithAssertParams memory"}},"id":42629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2697:10:37","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42838,"src":"2690:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42627,"name":"_sampleFailWithAssertCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44984,"src":"2664:25:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (uint256) returns (bool,bytes memory)"}},"id":42630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2664:44:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2622:86:37"},{"expression":{"arguments":[{"id":42633,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42624,"src":"2754:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":42634,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42626,"src":"2763:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":42635,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42606,"src":"2775:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42632,"name":"sampleFailWithAssertPostconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43211,"src":"2719:34:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$_t_bytes_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (bool,bytes memory,address[] memory)"}},"id":42636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2719:71:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42637,"nodeType":"ExpressionStatement","src":"2719:71:37"}]},"functionSelector":"2734aab6","implemented":true,"kind":"function","modifiers":[{"id":42593,"kind":"modifierInvocation","modifierName":{"id":42592,"name":"setCurrentActor","nameLocations":["2360:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":43330,"src":"2360:15:37"},"nodeType":"ModifierInvocation","src":"2360:15:37"}],"name":"fuzz_sampleFailWithAssert","nameLocation":"2306:25:37","parameters":{"id":42591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42590,"mutability":"mutable","name":"sampleInput","nameLocation":"2340:11:37","nodeType":"VariableDeclaration","scope":42639,"src":"2332:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42589,"name":"uint256","nodeType":"ElementaryTypeName","src":"2332:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2331:21:37"},"returnParameters":{"id":42594,"nodeType":"ParameterList","parameters":[],"src":"2376:0:37"},"scope":42691,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":42690,"nodeType":"FunctionDefinition","src":"2803:522:37","nodes":[],"body":{"id":42689,"nodeType":"Block","src":"2884:441:37","nodes":[],"statements":[{"assignments":[42648],"declarations":[{"constant":false,"id":42648,"mutability":"mutable","name":"params","nameLocation":"2933:6:37","nodeType":"VariableDeclaration","scope":42689,"src":"2894:45:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailReturnEmptyDataParams_$42842_memory_ptr","typeString":"struct BeforeAfter.SampleFailReturnEmptyDataParams"},"typeName":{"id":42647,"nodeType":"UserDefinedTypeName","pathNode":{"id":42646,"name":"SampleFailReturnEmptyDataParams","nameLocations":["2894:31:37"],"nodeType":"IdentifierPath","referencedDeclaration":42842,"src":"2894:31:37"},"referencedDeclaration":42842,"src":"2894:31:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailReturnEmptyDataParams_$42842_storage_ptr","typeString":"struct BeforeAfter.SampleFailReturnEmptyDataParams"}},"visibility":"internal"}],"id":42652,"initialValue":{"arguments":[{"id":42650,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42641,"src":"2981:11:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":42649,"name":"sampleFailReturnEmptyDataPreconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43750,"src":"2942:38:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$returns$_t_struct$_SampleFailReturnEmptyDataParams_$42842_memory_ptr_$","typeString":"function (bool) returns (struct BeforeAfter.SampleFailReturnEmptyDataParams memory)"}},"id":42651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2942:51:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailReturnEmptyDataParams_$42842_memory_ptr","typeString":"struct BeforeAfter.SampleFailReturnEmptyDataParams memory"}},"nodeType":"VariableDeclarationStatement","src":"2894:99:37"},{"assignments":[42657],"declarations":[{"constant":false,"id":42657,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"3021:14:37","nodeType":"VariableDeclaration","scope":42689,"src":"3004:31:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42655,"name":"address","nodeType":"ElementaryTypeName","src":"3004:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42656,"nodeType":"ArrayTypeName","src":"3004:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":42663,"initialValue":{"arguments":[{"hexValue":"31","id":42661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3052:1:37","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":42660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3038:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":42658,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42659,"nodeType":"ArrayTypeName","src":"3042:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":42662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3038:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3004:50:37"},{"expression":{"id":42668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":42664,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42657,"src":"3064:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42666,"indexExpression":{"hexValue":"30","id":42665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3079:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3064:17:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42667,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"3084:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3064:32:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42669,"nodeType":"ExpressionStatement","src":"3064:32:37"},{"expression":{"arguments":[{"id":42671,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42657,"src":"3114:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42670,"name":"_before","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42870,"src":"3106:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":42672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3106:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42673,"nodeType":"ExpressionStatement","src":"3106:23:37"},{"assignments":[42675,42677],"declarations":[{"constant":false,"id":42675,"mutability":"mutable","name":"success","nameLocation":"3146:7:37","nodeType":"VariableDeclaration","scope":42689,"src":"3141:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42674,"name":"bool","nodeType":"ElementaryTypeName","src":"3141:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":42677,"mutability":"mutable","name":"returnData","nameLocation":"3168:10:37","nodeType":"VariableDeclaration","scope":42689,"src":"3155:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42676,"name":"bytes","nodeType":"ElementaryTypeName","src":"3155:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":42682,"initialValue":{"arguments":[{"expression":{"id":42679,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42648,"src":"3213:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailReturnEmptyDataParams_$42842_memory_ptr","typeString":"struct BeforeAfter.SampleFailReturnEmptyDataParams memory"}},"id":42680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3220:10:37","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42841,"src":"3213:17:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":42678,"name":"_sampleFailReturnEmptyDataCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45018,"src":"3182:30:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bool) returns (bool,bytes memory)"}},"id":42681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3182:49:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3140:91:37"},{"expression":{"arguments":[{"id":42684,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42675,"src":"3282:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":42685,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42677,"src":"3291:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":42686,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42657,"src":"3303:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42683,"name":"sampleFailReturnEmptyDataPostconditions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43234,"src":"3242:39:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bool_$_t_bytes_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (bool,bytes memory,address[] memory)"}},"id":42687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3242:76:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42688,"nodeType":"ExpressionStatement","src":"3242:76:37"}]},"functionSelector":"41128bc8","implemented":true,"kind":"function","modifiers":[{"id":42644,"kind":"modifierInvocation","modifierName":{"id":42643,"name":"setCurrentActor","nameLocations":["2868:15:37"],"nodeType":"IdentifierPath","referencedDeclaration":43330,"src":"2868:15:37"},"nodeType":"ModifierInvocation","src":"2868:15:37"}],"name":"fuzz_sampleFailReturnEmptyData","nameLocation":"2812:30:37","parameters":{"id":42642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42641,"mutability":"mutable","name":"sampleInput","nameLocation":"2848:11:37","nodeType":"VariableDeclaration","scope":42690,"src":"2843:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42640,"name":"bool","nodeType":"ElementaryTypeName","src":"2843:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2842:18:37"},"returnParameters":{"id":42645,"nodeType":"ParameterList","parameters":[],"src":"2884:0:37"},"scope":42691,"stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"abstract":false,"baseContracts":[{"baseName":{"id":42381,"name":"PreconditionsSampleContract","nameLocations":["223:27:37"],"nodeType":"IdentifierPath","referencedDeclaration":43751,"src":"223:27:37"},"id":42382,"nodeType":"InheritanceSpecifier","src":"223:27:37"},{"baseName":{"id":42383,"name":"PostconditionsSampleContract","nameLocations":["252:28:37"],"nodeType":"IdentifierPath","referencedDeclaration":43235,"src":"252:28:37"},"id":42384,"nodeType":"InheritanceSpecifier","src":"252:28:37"}],"canonicalName":"FuzzSampleContract","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"internalFunctionIDs":{"16196":1},"linearizedBaseContracts":[42691,43235,43084,43773,44798,44624,44162,45200,43751,43645,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"FuzzSampleContract","nameLocation":"201:18:37","scope":42692,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,43244,44810]}],"license":"MIT"}},"test/fuzzing/FuzzSetup.sol":{"id":38,"ast":{"absolutePath":"test/fuzzing/FuzzSetup.sol","id":42754,"exportedSymbols":{"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"37:557:38","nodes":[{"id":42693,"nodeType":"PragmaDirective","src":"37:23:38","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":42694,"nodeType":"ImportDirective","src":"62:35:38","nodes":[],"absolutePath":"test/fuzzing/utils/FunctionCalls.sol","file":"./utils/FunctionCalls.sol","nameLocation":"-1:-1:-1","scope":42754,"sourceUnit":45020,"symbolAliases":[],"unitAlias":""},{"id":42753,"nodeType":"ContractDefinition","src":"99:494:38","nodes":[{"id":42706,"nodeType":"FunctionDefinition","src":"141:89:38","nodes":[],"body":{"id":42705,"nodeType":"Block","src":"171:59:38","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":42699,"name":"deploySampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42717,"src":"181:20:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":42700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"181:22:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42701,"nodeType":"ExpressionStatement","src":"181:22:38"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":42702,"name":"labelAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42752,"src":"213:8:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":42703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"213:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42704,"nodeType":"ExpressionStatement","src":"213:10:38"}]},"implemented":true,"kind":"function","modifiers":[],"name":"fuzzSetup","nameLocation":"150:9:38","parameters":{"id":42697,"nodeType":"ParameterList","parameters":[],"src":"159:2:38"},"returnParameters":{"id":42698,"nodeType":"ParameterList","parameters":[],"src":"171:0:38"},"scope":42753,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":42717,"nodeType":"FunctionDefinition","src":"236:95:38","nodes":[],"body":{"id":42716,"nodeType":"Block","src":"277:54:38","nodes":[],"statements":[{"expression":{"id":42714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":42709,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"287:14:38","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":42712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"304:18:38","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_SampleContract_$42819_$","typeString":"function () returns (contract SampleContract)"},"typeName":{"id":42711,"nodeType":"UserDefinedTypeName","pathNode":{"id":42710,"name":"SampleContract","nameLocations":["308:14:38"],"nodeType":"IdentifierPath","referencedDeclaration":42819,"src":"308:14:38"},"referencedDeclaration":42819,"src":"308:14:38","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}},"id":42713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"304:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}},"src":"287:37:38","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}},"id":42715,"nodeType":"ExpressionStatement","src":"287:37:38"}]},"implemented":true,"kind":"function","modifiers":[],"name":"deploySampleContract","nameLocation":"245:20:38","parameters":{"id":42707,"nodeType":"ParameterList","parameters":[],"src":"265:2:38"},"returnParameters":{"id":42708,"nodeType":"ParameterList","parameters":[],"src":"277:0:38"},"scope":42753,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":42752,"nodeType":"FunctionDefinition","src":"355:236:38","nodes":[],"body":{"id":42751,"nodeType":"Block","src":"384:207:38","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":42725,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"431:14:38","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":42724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"423:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":42723,"name":"address","nodeType":"ElementaryTypeName","src":"423:7:38","typeDescriptions":{}}},"id":42726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"423:23:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"53616d706c65436f6e7472616374","id":42727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"448:16:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_3f2480e5dcad495df86947c428cd35ae4acc450845fd92fdf266d27b8f5098f8","typeString":"literal_string \"SampleContract\""},"value":"SampleContract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_3f2480e5dcad495df86947c428cd35ae4acc450845fd92fdf266d27b8f5098f8","typeString":"literal_string \"SampleContract\""}],"expression":{"id":42720,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"414:2:38","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":42722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"417:5:38","memberName":"label","nodeType":"MemberAccess","referencedDeclaration":15439,"src":"414:8:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) external"}},"id":42728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"414:51:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42729,"nodeType":"ExpressionStatement","src":"414:51:38"},{"expression":{"arguments":[{"id":42733,"name":"USER1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45039,"src":"501:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"5553455231","id":42734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"508:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_c98ee9c08f325b310bbe53d2fa69775409148401363d7b9828346551022f3bfb","typeString":"literal_string \"USER1\""},"value":"USER1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_c98ee9c08f325b310bbe53d2fa69775409148401363d7b9828346551022f3bfb","typeString":"literal_string \"USER1\""}],"expression":{"id":42730,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"492:2:38","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":42732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"495:5:38","memberName":"label","nodeType":"MemberAccess","referencedDeclaration":15439,"src":"492:8:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) external"}},"id":42735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"492:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42736,"nodeType":"ExpressionStatement","src":"492:24:38"},{"expression":{"arguments":[{"id":42740,"name":"USER2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45045,"src":"535:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"5553455232","id":42741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"542:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_a967b5033e40b3286e8bf81e7b6577bb8a64dfda6109db99968048cfd977df2f","typeString":"literal_string \"USER2\""},"value":"USER2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_a967b5033e40b3286e8bf81e7b6577bb8a64dfda6109db99968048cfd977df2f","typeString":"literal_string \"USER2\""}],"expression":{"id":42737,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"526:2:38","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":42739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"529:5:38","memberName":"label","nodeType":"MemberAccess","referencedDeclaration":15439,"src":"526:8:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) external"}},"id":42742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"526:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42743,"nodeType":"ExpressionStatement","src":"526:24:38"},{"expression":{"arguments":[{"id":42747,"name":"USER3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45051,"src":"569:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"5553455233","id":42748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"576:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_13e6db0eb14358224fd9eb1a42503432a26d52b5765093f36b04a40874932a65","typeString":"literal_string \"USER3\""},"value":"USER3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_13e6db0eb14358224fd9eb1a42503432a26d52b5765093f36b04a40874932a65","typeString":"literal_string \"USER3\""}],"expression":{"id":42744,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"560:2:38","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":42746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"563:5:38","memberName":"label","nodeType":"MemberAccess","referencedDeclaration":15439,"src":"560:8:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) external"}},"id":42749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"560:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42750,"nodeType":"ExpressionStatement","src":"560:24:38"}]},"implemented":true,"kind":"function","modifiers":[],"name":"labelAll","nameLocation":"364:8:38","parameters":{"id":42718,"nodeType":"ParameterList","parameters":[],"src":"372:2:38"},"returnParameters":{"id":42719,"nodeType":"ParameterList","parameters":[],"src":"384:0:38"},"scope":42753,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":42695,"name":"FunctionCalls","nameLocations":["121:13:38"],"nodeType":"IdentifierPath","referencedDeclaration":45019,"src":"121:13:38"},"id":42696,"nodeType":"InheritanceSpecifier","src":"121:13:38"}],"canonicalName":"FuzzSetup","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013],"name":"FuzzSetup","nameLocation":"108:9:38","scope":42754,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}],"license":"UNTITLED"}},"test/fuzzing/SampleContract.sol":{"id":39,"ast":{}},"test/fuzzing/helpers/BeforeAfter.sol":{"id":40,"ast":{"absolutePath":"test/fuzzing/helpers/BeforeAfter.sol","id":43028,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"0:2117:40","nodes":[{"id":42821,"nodeType":"PragmaDirective","src":"0:23:40","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":42822,"nodeType":"ImportDirective","src":"25:26:40","nodes":[],"absolutePath":"test/fuzzing/FuzzSetup.sol","file":"../FuzzSetup.sol","nameLocation":"-1:-1:-1","scope":43028,"sourceUnit":42754,"symbolAliases":[],"unitAlias":""},{"id":43027,"nodeType":"ContractDefinition","src":"53:2063:40","nodes":[{"id":42827,"nodeType":"StructDefinition","src":"93:63:40","nodes":[],"canonicalName":"BeforeAfter.SampleFunctionParams","members":[{"constant":false,"id":42826,"mutability":"mutable","name":"sampleUint","nameLocation":"139:10:40","nodeType":"VariableDeclaration","scope":42827,"src":"131:18:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42825,"name":"uint256","nodeType":"ElementaryTypeName","src":"131:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SampleFunctionParams","nameLocation":"100:20:40","scope":43027,"visibility":"public"},{"id":42830,"nodeType":"StructDefinition","src":"162:67:40","nodes":[],"canonicalName":"BeforeAfter.SampleFailWithRequireParams","members":[{"constant":false,"id":42829,"mutability":"mutable","name":"sampleUint","nameLocation":"212:10:40","nodeType":"VariableDeclaration","scope":42830,"src":"207:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42828,"name":"bool","nodeType":"ElementaryTypeName","src":"207:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"SampleFailWithRequireParams","nameLocation":"169:27:40","scope":43027,"visibility":"public"},{"id":42833,"nodeType":"StructDefinition","src":"235:72:40","nodes":[],"canonicalName":"BeforeAfter.SampleFailWithCustomErrorParams","members":[{"constant":false,"id":42832,"mutability":"mutable","name":"sampleUint","nameLocation":"290:10:40","nodeType":"VariableDeclaration","scope":42833,"src":"284:16:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42831,"name":"uint8","nodeType":"ElementaryTypeName","src":"284:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"name":"SampleFailWithCustomErrorParams","nameLocation":"242:31:40","scope":43027,"visibility":"public"},{"id":42836,"nodeType":"StructDefinition","src":"313:68:40","nodes":[],"canonicalName":"BeforeAfter.SampleFailWithPanicParams","members":[{"constant":false,"id":42835,"mutability":"mutable","name":"sampleUint","nameLocation":"364:10:40","nodeType":"VariableDeclaration","scope":42836,"src":"356:18:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42834,"name":"uint256","nodeType":"ElementaryTypeName","src":"356:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SampleFailWithPanicParams","nameLocation":"320:25:40","scope":43027,"visibility":"public"},{"id":42839,"nodeType":"StructDefinition","src":"387:69:40","nodes":[],"canonicalName":"BeforeAfter.SampleFailWithAssertParams","members":[{"constant":false,"id":42838,"mutability":"mutable","name":"sampleUint","nameLocation":"439:10:40","nodeType":"VariableDeclaration","scope":42839,"src":"431:18:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42837,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SampleFailWithAssertParams","nameLocation":"394:26:40","scope":43027,"visibility":"public"},{"id":42842,"nodeType":"StructDefinition","src":"462:71:40","nodes":[],"canonicalName":"BeforeAfter.SampleFailReturnEmptyDataParams","members":[{"constant":false,"id":42841,"mutability":"mutable","name":"sampleUint","nameLocation":"516:10:40","nodeType":"VariableDeclaration","scope":42842,"src":"511:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42840,"name":"bool","nodeType":"ElementaryTypeName","src":"511:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"SampleFailReturnEmptyDataParams","nameLocation":"469:31:40","scope":43027,"visibility":"public"},{"id":42847,"nodeType":"VariableDeclaration","src":"539:30:40","nodes":[],"constant":false,"mutability":"mutable","name":"states","nameLocation":"563:6:40","scope":43027,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_struct$_State_$42855_storage_$","typeString":"mapping(uint8 => struct BeforeAfter.State)"},"typeName":{"id":42846,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":42843,"name":"uint8","nodeType":"ElementaryTypeName","src":"547:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Mapping","src":"539:23:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_struct$_State_$42855_storage_$","typeString":"mapping(uint8 => struct BeforeAfter.State)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":42845,"nodeType":"UserDefinedTypeName","pathNode":{"id":42844,"name":"State","nameLocations":["556:5:40"],"nodeType":"IdentifierPath","referencedDeclaration":42855,"src":"556:5:40"},"referencedDeclaration":42855,"src":"556:5:40","typeDescriptions":{"typeIdentifier":"t_struct$_State_$42855_storage_ptr","typeString":"struct BeforeAfter.State"}}},"visibility":"internal"},{"id":42855,"nodeType":"StructDefinition","src":"576:109:40","nodes":[],"canonicalName":"BeforeAfter.State","members":[{"constant":false,"id":42852,"mutability":"mutable","name":"actorStates","nameLocation":"631:11:40","nodeType":"VariableDeclaration","scope":42855,"src":"599:43:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ActorStates_$42858_storage_$","typeString":"mapping(address => struct BeforeAfter.ActorStates)"},"typeName":{"id":42851,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":42848,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"599:31:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ActorStates_$42858_storage_$","typeString":"mapping(address => struct BeforeAfter.ActorStates)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":42850,"nodeType":"UserDefinedTypeName","pathNode":{"id":42849,"name":"ActorStates","nameLocations":["618:11:40"],"nodeType":"IdentifierPath","referencedDeclaration":42858,"src":"618:11:40"},"referencedDeclaration":42858,"src":"618:11:40","typeDescriptions":{"typeIdentifier":"t_struct$_ActorStates_$42858_storage_ptr","typeString":"struct BeforeAfter.ActorStates"}}},"visibility":"internal"},{"constant":false,"id":42854,"mutability":"mutable","name":"contractEthBalance","nameLocation":"660:18:40","nodeType":"VariableDeclaration","scope":42855,"src":"652:26:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42853,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"State","nameLocation":"583:5:40","scope":43027,"visibility":"public"},{"id":42858,"nodeType":"StructDefinition","src":"691:58:40","nodes":[],"canonicalName":"BeforeAfter.ActorStates","members":[{"constant":false,"id":42857,"mutability":"mutable","name":"userEthBalance","nameLocation":"728:14:40","nodeType":"VariableDeclaration","scope":42858,"src":"720:22:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42856,"name":"uint256","nodeType":"ElementaryTypeName","src":"720:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ActorStates","nameLocation":"698:11:40","scope":43027,"visibility":"public"},{"id":42870,"nodeType":"FunctionDefinition","src":"755:89:40","nodes":[],"body":{"id":42869,"nodeType":"Block","src":"806:38:40","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"30","id":42865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"827:1:40","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":42866,"name":"actors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42861,"src":"830:6:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42864,"name":"_setStates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42900,"src":"816:10:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (uint8,address[] memory)"}},"id":42867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"816:21:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42868,"nodeType":"ExpressionStatement","src":"816:21:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_before","nameLocation":"764:7:40","parameters":{"id":42862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42861,"mutability":"mutable","name":"actors","nameLocation":"789:6:40","nodeType":"VariableDeclaration","scope":42870,"src":"772:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42859,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42860,"nodeType":"ArrayTypeName","src":"772:9:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"771:25:40"},"returnParameters":{"id":42863,"nodeType":"ParameterList","parameters":[],"src":"806:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":42882,"nodeType":"FunctionDefinition","src":"850:88:40","nodes":[],"body":{"id":42881,"nodeType":"Block","src":"900:38:40","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"31","id":42877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"921:1:40","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"id":42878,"name":"actors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42873,"src":"924:6:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42876,"name":"_setStates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42900,"src":"910:10:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (uint8,address[] memory)"}},"id":42879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"910:21:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42880,"nodeType":"ExpressionStatement","src":"910:21:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_after","nameLocation":"859:6:40","parameters":{"id":42874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42873,"mutability":"mutable","name":"actors","nameLocation":"883:6:40","nodeType":"VariableDeclaration","scope":42882,"src":"866:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42871,"name":"address","nodeType":"ElementaryTypeName","src":"866:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42872,"nodeType":"ArrayTypeName","src":"866:9:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"865:25:40"},"returnParameters":{"id":42875,"nodeType":"ParameterList","parameters":[],"src":"900:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":42900,"nodeType":"FunctionDefinition","src":"944:154:40","nodes":[],"body":{"id":42899,"nodeType":"Block","src":"1013:85:40","nodes":[],"statements":[{"expression":{"arguments":[{"id":42891,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42884,"src":"1038:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":42892,"name":"actors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42887,"src":"1047:6:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":42890,"name":"_processActors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42929,"src":"1023:14:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (uint8,address[] memory)"}},"id":42893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:31:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42894,"nodeType":"ExpressionStatement","src":"1023:31:40"},{"expression":{"arguments":[{"id":42896,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42884,"src":"1083:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":42895,"name":"_updateCommonState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42939,"src":"1064:18:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":42897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:27:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42898,"nodeType":"ExpressionStatement","src":"1064:27:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_setStates","nameLocation":"953:10:40","parameters":{"id":42888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42884,"mutability":"mutable","name":"callNum","nameLocation":"970:7:40","nodeType":"VariableDeclaration","scope":42900,"src":"964:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42883,"name":"uint8","nodeType":"ElementaryTypeName","src":"964:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":42887,"mutability":"mutable","name":"actors","nameLocation":"996:6:40","nodeType":"VariableDeclaration","scope":42900,"src":"979:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42885,"name":"address","nodeType":"ElementaryTypeName","src":"979:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42886,"nodeType":"ArrayTypeName","src":"979:9:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"963:40:40"},"returnParameters":{"id":42889,"nodeType":"ParameterList","parameters":[],"src":"1013:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":42929,"nodeType":"FunctionDefinition","src":"1104:191:40","nodes":[],"body":{"id":42928,"nodeType":"Block","src":"1176:119:40","nodes":[],"statements":[{"body":{"id":42926,"nodeType":"Block","src":"1230:59:40","statements":[{"expression":{"arguments":[{"id":42920,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42902,"src":"1259:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"baseExpression":{"id":42921,"name":"actors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42905,"src":"1268:6:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42923,"indexExpression":{"id":42922,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42909,"src":"1275:1:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1268:9:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42919,"name":"_setActorState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42952,"src":"1244:14:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$_t_address_$returns$__$","typeString":"function (uint8,address)"}},"id":42924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1244:34:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42925,"nodeType":"ExpressionStatement","src":"1244:34:40"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":42915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":42912,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42909,"src":"1206:1:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":42913,"name":"actors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42905,"src":"1210:6:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":42914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1217:6:40","memberName":"length","nodeType":"MemberAccess","src":"1210:13:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1206:17:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":42927,"initializationExpression":{"assignments":[42909],"declarations":[{"constant":false,"id":42909,"mutability":"mutable","name":"i","nameLocation":"1199:1:40","nodeType":"VariableDeclaration","scope":42927,"src":"1191:9:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42908,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":42911,"initialValue":{"hexValue":"30","id":42910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1203:1:40","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1191:13:40"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":42917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1225:3:40","subExpression":{"id":42916,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42909,"src":"1225:1:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":42918,"nodeType":"ExpressionStatement","src":"1225:3:40"},"nodeType":"ForStatement","src":"1186:103:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_processActors","nameLocation":"1113:14:40","parameters":{"id":42906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42902,"mutability":"mutable","name":"callNum","nameLocation":"1134:7:40","nodeType":"VariableDeclaration","scope":42929,"src":"1128:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42901,"name":"uint8","nodeType":"ElementaryTypeName","src":"1128:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":42905,"mutability":"mutable","name":"actors","nameLocation":"1160:6:40","nodeType":"VariableDeclaration","scope":42929,"src":"1143:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42903,"name":"address","nodeType":"ElementaryTypeName","src":"1143:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42904,"nodeType":"ArrayTypeName","src":"1143:9:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1127:40:40"},"returnParameters":{"id":42907,"nodeType":"ParameterList","parameters":[],"src":"1176:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":42939,"nodeType":"FunctionDefinition","src":"1301:100:40","nodes":[],"body":{"id":42938,"nodeType":"Block","src":"1352:49:40","nodes":[],"statements":[{"expression":{"arguments":[{"id":42935,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42931,"src":"1386:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":42934,"name":"checkContractEthBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43009,"src":"1362:23:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":42936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1362:32:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42937,"nodeType":"ExpressionStatement","src":"1362:32:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_updateCommonState","nameLocation":"1310:18:40","parameters":{"id":42932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42931,"mutability":"mutable","name":"callNum","nameLocation":"1335:7:40","nodeType":"VariableDeclaration","scope":42939,"src":"1329:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42930,"name":"uint8","nodeType":"ElementaryTypeName","src":"1329:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1328:15:40"},"returnParameters":{"id":42933,"nodeType":"ParameterList","parameters":[],"src":"1352:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":42952,"nodeType":"FunctionDefinition","src":"1407:123:40","nodes":[],"body":{"id":42951,"nodeType":"Block","src":"1478:52:40","nodes":[],"statements":[{"expression":{"arguments":[{"id":42947,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42941,"src":"1508:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":42948,"name":"actor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42943,"src":"1517:5:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42946,"name":"checkUserEthBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42980,"src":"1488:19:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$_t_address_$returns$__$","typeString":"function (uint8,address)"}},"id":42949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1488:35:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42950,"nodeType":"ExpressionStatement","src":"1488:35:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_setActorState","nameLocation":"1416:14:40","parameters":{"id":42944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42941,"mutability":"mutable","name":"callNum","nameLocation":"1437:7:40","nodeType":"VariableDeclaration","scope":42952,"src":"1431:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42940,"name":"uint8","nodeType":"ElementaryTypeName","src":"1431:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":42943,"mutability":"mutable","name":"actor","nameLocation":"1454:5:40","nodeType":"VariableDeclaration","scope":42952,"src":"1446:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42942,"name":"address","nodeType":"ElementaryTypeName","src":"1446:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1430:30:40"},"returnParameters":{"id":42945,"nodeType":"ParameterList","parameters":[],"src":"1478:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":42980,"nodeType":"FunctionDefinition","src":"1536:222:40","nodes":[],"body":{"id":42979,"nodeType":"Block","src":"1603:155:40","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"4265666f72652f4166746572207573657245746842616c616e6365","id":42962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1625:29:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_30e76e32dab40ec38e8abaca4549a9509ceca4b35bbca2cda1eae70a45bb3552","typeString":"literal_string \"Before/After userEthBalance\""},"value":"Before/After userEthBalance"},{"id":42963,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42954,"src":"1656:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"id":42964,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42956,"src":"1665:4:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1670:7:40","memberName":"balance","nodeType":"MemberAccess","src":"1665:12:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_30e76e32dab40ec38e8abaca4549a9509ceca4b35bbca2cda1eae70a45bb3552","typeString":"literal_string \"Before/After userEthBalance\""},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":42959,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24267,"src":"1613:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$24267_$","typeString":"type(library console)"}},"id":42961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1621:3:40","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":17438,"src":"1613:11:40","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256,uint256) pure"}},"id":42966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1613:65:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42967,"nodeType":"ExpressionStatement","src":"1613:65:40"},{"expression":{"id":42977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":42968,"name":"states","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42847,"src":"1688:6:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_struct$_State_$42855_storage_$","typeString":"mapping(uint8 => struct BeforeAfter.State storage ref)"}},"id":42970,"indexExpression":{"id":42969,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42954,"src":"1695:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1688:15:40","typeDescriptions":{"typeIdentifier":"t_struct$_State_$42855_storage","typeString":"struct BeforeAfter.State storage ref"}},"id":42971,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1704:11:40","memberName":"actorStates","nodeType":"MemberAccess","referencedDeclaration":42852,"src":"1688:27:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ActorStates_$42858_storage_$","typeString":"mapping(address => struct BeforeAfter.ActorStates storage ref)"}},"id":42973,"indexExpression":{"id":42972,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42956,"src":"1716:4:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1688:33:40","typeDescriptions":{"typeIdentifier":"t_struct$_ActorStates_$42858_storage","typeString":"struct BeforeAfter.ActorStates storage ref"}},"id":42974,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1722:14:40","memberName":"userEthBalance","nodeType":"MemberAccess","referencedDeclaration":42857,"src":"1688:48:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":42975,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42956,"src":"1739:4:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1744:7:40","memberName":"balance","nodeType":"MemberAccess","src":"1739:12:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1688:63:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":42978,"nodeType":"ExpressionStatement","src":"1688:63:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"checkUserEthBalance","nameLocation":"1545:19:40","parameters":{"id":42957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42954,"mutability":"mutable","name":"callNum","nameLocation":"1571:7:40","nodeType":"VariableDeclaration","scope":42980,"src":"1565:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42953,"name":"uint8","nodeType":"ElementaryTypeName","src":"1565:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":42956,"mutability":"mutable","name":"user","nameLocation":"1588:4:40","nodeType":"VariableDeclaration","scope":42980,"src":"1580:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42955,"name":"address","nodeType":"ElementaryTypeName","src":"1580:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1564:29:40"},"returnParameters":{"id":42958,"nodeType":"ParameterList","parameters":[],"src":"1603:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43009,"nodeType":"FunctionDefinition","src":"1764:240:40","nodes":[],"body":{"id":43008,"nodeType":"Block","src":"1821:183:40","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"4265666f72652f416674657220636f6e747261637445746842616c616e6365","id":42988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1843:33:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_b61ee1bf896325184efbd8111c93a1a6395ac1f2943f4d17053f4e29958fb682","typeString":"literal_string \"Before/After contractEthBalance\""},"value":"Before/After contractEthBalance"},{"id":42989,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42982,"src":"1878:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"arguments":[{"id":42992,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"1895:14:40","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":42991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1887:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":42990,"name":"address","nodeType":"ElementaryTypeName","src":"1887:7:40","typeDescriptions":{}}},"id":42993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1887:23:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1911:7:40","memberName":"balance","nodeType":"MemberAccess","src":"1887:31:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b61ee1bf896325184efbd8111c93a1a6395ac1f2943f4d17053f4e29958fb682","typeString":"literal_string \"Before/After contractEthBalance\""},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":42985,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24267,"src":"1831:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$24267_$","typeString":"type(library console)"}},"id":42987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1839:3:40","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":17438,"src":"1831:11:40","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256,uint256) pure"}},"id":42995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1831:88:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42996,"nodeType":"ExpressionStatement","src":"1831:88:40"},{"expression":{"id":43006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":42997,"name":"states","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42847,"src":"1929:6:40","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_struct$_State_$42855_storage_$","typeString":"mapping(uint8 => struct BeforeAfter.State storage ref)"}},"id":42999,"indexExpression":{"id":42998,"name":"callNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42982,"src":"1936:7:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1929:15:40","typeDescriptions":{"typeIdentifier":"t_struct$_State_$42855_storage","typeString":"struct BeforeAfter.State storage ref"}},"id":43000,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1945:18:40","memberName":"contractEthBalance","nodeType":"MemberAccess","referencedDeclaration":42854,"src":"1929:34:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":43003,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"1974:14:40","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":43002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1966:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":43001,"name":"address","nodeType":"ElementaryTypeName","src":"1966:7:40","typeDescriptions":{}}},"id":43004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1966:23:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1990:7:40","memberName":"balance","nodeType":"MemberAccess","src":"1966:31:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1929:68:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43007,"nodeType":"ExpressionStatement","src":"1929:68:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"checkContractEthBalance","nameLocation":"1773:23:40","parameters":{"id":42983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42982,"mutability":"mutable","name":"callNum","nameLocation":"1803:7:40","nodeType":"VariableDeclaration","scope":43009,"src":"1797:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":42981,"name":"uint8","nodeType":"ElementaryTypeName","src":"1797:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1796:15:40"},"returnParameters":{"id":42984,"nodeType":"ParameterList","parameters":[],"src":"1821:0:40"},"scope":43027,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43026,"nodeType":"FunctionDefinition","src":"2010:104:40","nodes":[],"body":{"id":43025,"nodeType":"Block","src":"2077:37:40","nodes":[],"statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43018,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43011,"src":"2094:1:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":43019,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43013,"src":"2098:1:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2094:5:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":43022,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43013,"src":"2106:1:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2094:13:40","trueExpression":{"id":43021,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43011,"src":"2102:1:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":43017,"id":43024,"nodeType":"Return","src":"2087:20:40"}]},"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2019:3:40","parameters":{"id":43014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43011,"mutability":"mutable","name":"a","nameLocation":"2031:1:40","nodeType":"VariableDeclaration","scope":43026,"src":"2023:9:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43010,"name":"uint256","nodeType":"ElementaryTypeName","src":"2023:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43013,"mutability":"mutable","name":"b","nameLocation":"2042:1:40","nodeType":"VariableDeclaration","scope":43026,"src":"2034:9:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43012,"name":"uint256","nodeType":"ElementaryTypeName","src":"2034:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2022:22:40"},"returnParameters":{"id":43017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43026,"src":"2068:7:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43015,"name":"uint256","nodeType":"ElementaryTypeName","src":"2068:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2067:9:40"},"scope":43027,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":42823,"name":"FuzzSetup","nameLocations":["77:9:40"],"nodeType":"IdentifierPath","referencedDeclaration":42753,"src":"77:9:40"},"id":42824,"nodeType":"InheritanceSpecifier","src":"77:9:40"}],"canonicalName":"BeforeAfter","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013],"name":"BeforeAfter","nameLocation":"62:11:40","scope":43028,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}]}},"test/fuzzing/helpers/FuzzStorageVariables.sol":{"id":41,"ast":{"absolutePath":"test/fuzzing/helpers/FuzzStorageVariables.sol","id":43060,"exportedSymbols":{"FuzzActors":[45059],"FuzzBase":[39013],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"37:1109:41","nodes":[{"id":43029,"nodeType":"PragmaDirective","src":"37:23:41","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":43030,"nodeType":"ImportDirective","src":"62:41:41","nodes":[],"absolutePath":"test/fuzzing/SampleContract.sol","file":"test/fuzzing/SampleContract.sol","nameLocation":"-1:-1:-1","scope":43060,"sourceUnit":42820,"symbolAliases":[],"unitAlias":""},{"id":43031,"nodeType":"ImportDirective","src":"105:33:41","nodes":[],"absolutePath":"test/fuzzing/utils/FuzzActors.sol","file":"../utils/FuzzActors.sol","nameLocation":"-1:-1:-1","scope":43060,"sourceUnit":45060,"symbolAliases":[],"unitAlias":""},{"id":43059,"nodeType":"ContractDefinition","src":"140:1005:41","nodes":[{"id":43035,"nodeType":"VariableDeclaration","src":"358:20:41","nodes":[],"constant":false,"mutability":"mutable","name":"currentActor","nameLocation":"366:12:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43034,"name":"address","nodeType":"ElementaryTypeName","src":"358:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"id":43038,"nodeType":"VariableDeclaration","src":"384:21:41","nodes":[],"constant":false,"mutability":"mutable","name":"_setActor","nameLocation":"389:9:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43036,"name":"bool","nodeType":"ElementaryTypeName","src":"384:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":43037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"401:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"internal"},{"id":43041,"nodeType":"VariableDeclaration","src":"412:44:41","nodes":[],"constant":true,"mutability":"constant","name":"PRIME","nameLocation":"438:5:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43039,"name":"uint256","nodeType":"ElementaryTypeName","src":"412:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32313437343833363437","id":43040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"446:10:41","typeDescriptions":{"typeIdentifier":"t_rational_2147483647_by_1","typeString":"int_const 2147483647"},"value":"2147483647"},"visibility":"internal"},{"id":43044,"nodeType":"VariableDeclaration","src":"462:35:41","nodes":[],"constant":true,"mutability":"constant","name":"SEED","nameLocation":"488:4:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43042,"name":"uint256","nodeType":"ElementaryTypeName","src":"462:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3232","id":43043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"495:2:41","typeDescriptions":{"typeIdentifier":"t_rational_22_by_1","typeString":"int_const 22"},"value":"22"},"visibility":"internal"},{"id":43047,"nodeType":"VariableDeclaration","src":"503:21:41","nodes":[],"constant":false,"mutability":"mutable","name":"iteration","nameLocation":"511:9:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43045,"name":"uint256","nodeType":"ElementaryTypeName","src":"503:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":43046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"523:1:41","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"id":43049,"nodeType":"VariableDeclaration","src":"551:21:41","nodes":[],"constant":false,"mutability":"mutable","name":"lastTimestamp","nameLocation":"559:13:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43048,"name":"uint256","nodeType":"ElementaryTypeName","src":"551:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"id":43052,"nodeType":"VariableDeclaration","src":"747:50:41","nodes":[],"constant":true,"mutability":"constant","name":"CATCH_REQUIRE_REVERT","nameLocation":"770:20:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43050,"name":"bool","nodeType":"ElementaryTypeName","src":"747:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":43051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"793:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"internal"},{"id":43055,"nodeType":"VariableDeclaration","src":"848:49:41","nodes":[],"constant":true,"mutability":"constant","name":"CATCH_EMPTY_REVERTS","nameLocation":"871:19:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43053,"name":"bool","nodeType":"ElementaryTypeName","src":"848:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":43054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"893:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"internal"},{"id":43058,"nodeType":"VariableDeclaration","src":"1104:38:41","nodes":[],"constant":false,"mutability":"mutable","name":"sampleContract","nameLocation":"1128:14:41","scope":43059,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"},"typeName":{"id":43057,"nodeType":"UserDefinedTypeName","pathNode":{"id":43056,"name":"SampleContract","nameLocations":["1104:14:41"],"nodeType":"IdentifierPath","referencedDeclaration":42819,"src":"1104:14:41"},"referencedDeclaration":42819,"src":"1104:14:41","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}},"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":43032,"name":"FuzzActors","nameLocations":["173:10:41"],"nodeType":"IdentifierPath","referencedDeclaration":45059,"src":"173:10:41"},"id":43033,"nodeType":"InheritanceSpecifier","src":"173:10:41"}],"canonicalName":"FuzzStorageVariables","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013],"name":"FuzzStorageVariables","nameLocation":"149:20:41","scope":43060,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216]}],"license":"UNTITLED"}},"test/fuzzing/helpers/postconditions/PostconditionsBase.sol":{"id":42,"ast":{"absolutePath":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol","id":43085,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzLibString":[39439],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PostconditionsBase":[43084],"Properties":[43773],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"Properties_ERR":[44798],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"0:341:42","nodes":[{"id":43061,"nodeType":"PragmaDirective","src":"0:24:42","nodes":[],"literals":["solidity","^","0.8",".25"]},{"id":43062,"nodeType":"ImportDirective","src":"26:41:42","nodes":[],"absolutePath":"test/fuzzing/properties/Properties.sol","file":"../../properties/Properties.sol","nameLocation":"-1:-1:-1","scope":43085,"sourceUnit":43774,"symbolAliases":[],"unitAlias":""},{"id":43084,"nodeType":"ContractDefinition","src":"69:271:42","nodes":[{"id":43073,"nodeType":"FunctionDefinition","src":"117:106:42","nodes":[],"body":{"id":43072,"nodeType":"Block","src":"187:36:42","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":43069,"name":"invariant_GLOB_01","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43764,"src":"197:17:42","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":43070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"197:19:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43071,"nodeType":"ExpressionStatement","src":"197:19:42"}]},"implemented":true,"kind":"function","modifiers":[],"name":"onSuccessInvariantsGeneral","nameLocation":"126:26:42","parameters":{"id":43067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43066,"mutability":"mutable","name":"returnData","nameLocation":"166:10:42","nodeType":"VariableDeclaration","scope":43073,"src":"153:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43065,"name":"bytes","nodeType":"ElementaryTypeName","src":"153:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"152:25:42"},"returnParameters":{"id":43068,"nodeType":"ParameterList","parameters":[],"src":"187:0:42"},"scope":43084,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43083,"nodeType":"FunctionDefinition","src":"229:109:42","nodes":[],"body":{"id":43082,"nodeType":"Block","src":"296:42:42","nodes":[],"statements":[{"expression":{"arguments":[{"id":43079,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43075,"src":"320:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43078,"name":"invariant_ERR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44248,"src":"306:13:42","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"306:25:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43081,"nodeType":"ExpressionStatement","src":"306:25:42"}]},"implemented":true,"kind":"function","modifiers":[],"name":"onFailInvariantsGeneral","nameLocation":"238:23:42","parameters":{"id":43076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43075,"mutability":"mutable","name":"returnData","nameLocation":"275:10:42","nodeType":"VariableDeclaration","scope":43083,"src":"262:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43074,"name":"bytes","nodeType":"ElementaryTypeName","src":"262:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"261:25:42"},"returnParameters":{"id":43077,"nodeType":"ParameterList","parameters":[],"src":"296:0:42"},"scope":43084,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":43063,"name":"Properties","nameLocations":["100:10:42"],"nodeType":"IdentifierPath","referencedDeclaration":43773,"src":"100:10:42"},"id":43064,"nodeType":"InheritanceSpecifier","src":"100:10:42"}],"canonicalName":"PostconditionsBase","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[43084,43773,44798,44624,44162,45200,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"PostconditionsBase","nameLocation":"78:18:42","scope":43085,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}]}},"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol":{"id":43,"ast":{"absolutePath":"test/fuzzing/helpers/postconditions/PostconditionsSampleContract.sol","id":43236,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzLibString":[39439],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PostconditionsBase":[43084],"PostconditionsSampleContract":[43235],"Properties":[43773],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"Properties_ERR":[44798],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"32:2040:43","nodes":[{"id":43086,"nodeType":"PragmaDirective","src":"32:23:43","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":43087,"nodeType":"ImportDirective","src":"57:34:43","nodes":[],"absolutePath":"test/fuzzing/helpers/postconditions/PostconditionsBase.sol","file":"./PostconditionsBase.sol","nameLocation":"-1:-1:-1","scope":43236,"sourceUnit":43085,"symbolAliases":[],"unitAlias":""},{"id":43235,"nodeType":"ContractDefinition","src":"93:1978:43","nodes":[{"id":43119,"nodeType":"FunctionDefinition","src":"159:359:43","nodes":[],"body":{"id":43118,"nodeType":"Block","src":"290:228:43","nodes":[],"statements":[{"condition":{"id":43099,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43091,"src":"304:7:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":43116,"nodeType":"Block","src":"452:60:43","statements":[{"expression":{"arguments":[{"id":43113,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43093,"src":"490:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43112,"name":"onFailInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43083,"src":"466:23:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"466:35:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43115,"nodeType":"ExpressionStatement","src":"466:35:43"}]},"id":43117,"nodeType":"IfStatement","src":"300:212:43","trueBody":{"id":43111,"nodeType":"Block","src":"313:133:43","statements":[{"expression":{"arguments":[{"id":43101,"name":"actorsToUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43096,"src":"334:14:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":43100,"name":"_after","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42882,"src":"327:6:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":43102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"327:22:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43103,"nodeType":"ExpressionStatement","src":"327:22:43"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":43104,"name":"invariant_INV_01","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43772,"src":"364:16:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":43105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"364:18:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43106,"nodeType":"ExpressionStatement","src":"364:18:43"},{"expression":{"arguments":[{"id":43108,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43093,"src":"424:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43107,"name":"onSuccessInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43073,"src":"397:26:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"397:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43110,"nodeType":"ExpressionStatement","src":"397:38:43"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFunctionPostconditions","nameLocation":"168:28:43","parameters":{"id":43097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43091,"mutability":"mutable","name":"success","nameLocation":"202:7:43","nodeType":"VariableDeclaration","scope":43119,"src":"197:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43090,"name":"bool","nodeType":"ElementaryTypeName","src":"197:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":43093,"mutability":"mutable","name":"returnData","nameLocation":"224:10:43","nodeType":"VariableDeclaration","scope":43119,"src":"211:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43092,"name":"bytes","nodeType":"ElementaryTypeName","src":"211:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":43096,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"253:14:43","nodeType":"VariableDeclaration","scope":43119,"src":"236:31:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":43094,"name":"address","nodeType":"ElementaryTypeName","src":"236:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43095,"nodeType":"ArrayTypeName","src":"236:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"196:72:43"},"returnParameters":{"id":43098,"nodeType":"ParameterList","parameters":[],"src":"290:0:43"},"scope":43235,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43142,"nodeType":"FunctionDefinition","src":"524:296:43","nodes":[],"body":{"id":43141,"nodeType":"Block","src":"662:158:43","nodes":[],"statements":[{"condition":{"id":43129,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43121,"src":"676:7:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":43139,"nodeType":"Block","src":"754:60:43","statements":[{"expression":{"arguments":[{"id":43136,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43123,"src":"792:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43135,"name":"onFailInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43083,"src":"768:23:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"768:35:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43138,"nodeType":"ExpressionStatement","src":"768:35:43"}]},"id":43140,"nodeType":"IfStatement","src":"672:142:43","trueBody":{"id":43134,"nodeType":"Block","src":"685:63:43","statements":[{"expression":{"arguments":[{"id":43131,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43123,"src":"726:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43130,"name":"onSuccessInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43073,"src":"699:26:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"699:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43133,"nodeType":"ExpressionStatement","src":"699:38:43"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithRequirePostconditions","nameLocation":"533:35:43","parameters":{"id":43127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43121,"mutability":"mutable","name":"success","nameLocation":"574:7:43","nodeType":"VariableDeclaration","scope":43142,"src":"569:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43120,"name":"bool","nodeType":"ElementaryTypeName","src":"569:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":43123,"mutability":"mutable","name":"returnData","nameLocation":"596:10:43","nodeType":"VariableDeclaration","scope":43142,"src":"583:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43122,"name":"bytes","nodeType":"ElementaryTypeName","src":"583:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":43126,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"625:14:43","nodeType":"VariableDeclaration","scope":43142,"src":"608:31:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":43124,"name":"address","nodeType":"ElementaryTypeName","src":"608:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43125,"nodeType":"ArrayTypeName","src":"608:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"568:72:43"},"returnParameters":{"id":43128,"nodeType":"ParameterList","parameters":[],"src":"662:0:43"},"scope":43235,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43165,"nodeType":"FunctionDefinition","src":"826:318:43","nodes":[],"body":{"id":43164,"nodeType":"Block","src":"986:158:43","nodes":[],"statements":[{"condition":{"id":43152,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43144,"src":"1000:7:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":43162,"nodeType":"Block","src":"1078:60:43","statements":[{"expression":{"arguments":[{"id":43159,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43146,"src":"1116:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43158,"name":"onFailInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43083,"src":"1092:23:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1092:35:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43161,"nodeType":"ExpressionStatement","src":"1092:35:43"}]},"id":43163,"nodeType":"IfStatement","src":"996:142:43","trueBody":{"id":43157,"nodeType":"Block","src":"1009:63:43","statements":[{"expression":{"arguments":[{"id":43154,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43146,"src":"1050:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43153,"name":"onSuccessInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43073,"src":"1023:26:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43156,"nodeType":"ExpressionStatement","src":"1023:38:43"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithCustomErrorPostconditions","nameLocation":"835:39:43","parameters":{"id":43150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43144,"mutability":"mutable","name":"success","nameLocation":"889:7:43","nodeType":"VariableDeclaration","scope":43165,"src":"884:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43143,"name":"bool","nodeType":"ElementaryTypeName","src":"884:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":43146,"mutability":"mutable","name":"returnData","nameLocation":"919:10:43","nodeType":"VariableDeclaration","scope":43165,"src":"906:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43145,"name":"bytes","nodeType":"ElementaryTypeName","src":"906:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":43149,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"956:14:43","nodeType":"VariableDeclaration","scope":43165,"src":"939:31:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":43147,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43148,"nodeType":"ArrayTypeName","src":"939:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"874:102:43"},"returnParameters":{"id":43151,"nodeType":"ParameterList","parameters":[],"src":"986:0:43"},"scope":43235,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43188,"nodeType":"FunctionDefinition","src":"1150:294:43","nodes":[],"body":{"id":43187,"nodeType":"Block","src":"1286:158:43","nodes":[],"statements":[{"condition":{"id":43175,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43167,"src":"1300:7:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":43185,"nodeType":"Block","src":"1378:60:43","statements":[{"expression":{"arguments":[{"id":43182,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43169,"src":"1416:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43181,"name":"onFailInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43083,"src":"1392:23:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1392:35:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43184,"nodeType":"ExpressionStatement","src":"1392:35:43"}]},"id":43186,"nodeType":"IfStatement","src":"1296:142:43","trueBody":{"id":43180,"nodeType":"Block","src":"1309:63:43","statements":[{"expression":{"arguments":[{"id":43177,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43169,"src":"1350:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43176,"name":"onSuccessInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43073,"src":"1323:26:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1323:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43179,"nodeType":"ExpressionStatement","src":"1323:38:43"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithPanicPostconditions","nameLocation":"1159:33:43","parameters":{"id":43173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43167,"mutability":"mutable","name":"success","nameLocation":"1198:7:43","nodeType":"VariableDeclaration","scope":43188,"src":"1193:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43166,"name":"bool","nodeType":"ElementaryTypeName","src":"1193:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":43169,"mutability":"mutable","name":"returnData","nameLocation":"1220:10:43","nodeType":"VariableDeclaration","scope":43188,"src":"1207:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43168,"name":"bytes","nodeType":"ElementaryTypeName","src":"1207:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":43172,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"1249:14:43","nodeType":"VariableDeclaration","scope":43188,"src":"1232:31:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":43170,"name":"address","nodeType":"ElementaryTypeName","src":"1232:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43171,"nodeType":"ArrayTypeName","src":"1232:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1192:72:43"},"returnParameters":{"id":43174,"nodeType":"ParameterList","parameters":[],"src":"1286:0:43"},"scope":43235,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43211,"nodeType":"FunctionDefinition","src":"1450:295:43","nodes":[],"body":{"id":43210,"nodeType":"Block","src":"1587:158:43","nodes":[],"statements":[{"condition":{"id":43198,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43190,"src":"1601:7:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":43208,"nodeType":"Block","src":"1679:60:43","statements":[{"expression":{"arguments":[{"id":43205,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43192,"src":"1717:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43204,"name":"onFailInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43083,"src":"1693:23:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1693:35:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43207,"nodeType":"ExpressionStatement","src":"1693:35:43"}]},"id":43209,"nodeType":"IfStatement","src":"1597:142:43","trueBody":{"id":43203,"nodeType":"Block","src":"1610:63:43","statements":[{"expression":{"arguments":[{"id":43200,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43192,"src":"1651:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43199,"name":"onSuccessInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43073,"src":"1624:26:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1624:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43202,"nodeType":"ExpressionStatement","src":"1624:38:43"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithAssertPostconditions","nameLocation":"1459:34:43","parameters":{"id":43196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43190,"mutability":"mutable","name":"success","nameLocation":"1499:7:43","nodeType":"VariableDeclaration","scope":43211,"src":"1494:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43189,"name":"bool","nodeType":"ElementaryTypeName","src":"1494:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":43192,"mutability":"mutable","name":"returnData","nameLocation":"1521:10:43","nodeType":"VariableDeclaration","scope":43211,"src":"1508:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43191,"name":"bytes","nodeType":"ElementaryTypeName","src":"1508:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":43195,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"1550:14:43","nodeType":"VariableDeclaration","scope":43211,"src":"1533:31:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":43193,"name":"address","nodeType":"ElementaryTypeName","src":"1533:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43194,"nodeType":"ArrayTypeName","src":"1533:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1493:72:43"},"returnParameters":{"id":43197,"nodeType":"ParameterList","parameters":[],"src":"1587:0:43"},"scope":43235,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43234,"nodeType":"FunctionDefinition","src":"1751:318:43","nodes":[],"body":{"id":43233,"nodeType":"Block","src":"1911:158:43","nodes":[],"statements":[{"condition":{"id":43221,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43213,"src":"1925:7:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":43231,"nodeType":"Block","src":"2003:60:43","statements":[{"expression":{"arguments":[{"id":43228,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43215,"src":"2041:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43227,"name":"onFailInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43083,"src":"2017:23:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2017:35:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43230,"nodeType":"ExpressionStatement","src":"2017:35:43"}]},"id":43232,"nodeType":"IfStatement","src":"1921:142:43","trueBody":{"id":43226,"nodeType":"Block","src":"1934:63:43","statements":[{"expression":{"arguments":[{"id":43223,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43215,"src":"1975:10:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43222,"name":"onSuccessInvariantsGeneral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43073,"src":"1948:26:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":43224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1948:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43225,"nodeType":"ExpressionStatement","src":"1948:38:43"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailReturnEmptyDataPostconditions","nameLocation":"1760:39:43","parameters":{"id":43219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43213,"mutability":"mutable","name":"success","nameLocation":"1814:7:43","nodeType":"VariableDeclaration","scope":43234,"src":"1809:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43212,"name":"bool","nodeType":"ElementaryTypeName","src":"1809:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":43215,"mutability":"mutable","name":"returnData","nameLocation":"1844:10:43","nodeType":"VariableDeclaration","scope":43234,"src":"1831:23:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43214,"name":"bytes","nodeType":"ElementaryTypeName","src":"1831:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":43218,"mutability":"mutable","name":"actorsToUpdate","nameLocation":"1881:14:43","nodeType":"VariableDeclaration","scope":43234,"src":"1864:31:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":43216,"name":"address","nodeType":"ElementaryTypeName","src":"1864:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43217,"nodeType":"ArrayTypeName","src":"1864:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1799:102:43"},"returnParameters":{"id":43220,"nodeType":"ParameterList","parameters":[],"src":"1911:0:43"},"scope":43235,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":43088,"name":"PostconditionsBase","nameLocations":["134:18:43"],"nodeType":"IdentifierPath","referencedDeclaration":43084,"src":"134:18:43"},"id":43089,"nodeType":"InheritanceSpecifier","src":"134:18:43"}],"canonicalName":"PostconditionsSampleContract","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[43235,43084,43773,44798,44624,44162,45200,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"PostconditionsSampleContract","nameLocation":"102:28:43","scope":43236,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}],"license":"MIT"}},"test/fuzzing/helpers/preconditions/PreconditionsBase.sol":{"id":44,"ast":{"absolutePath":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol","id":43646,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PreconditionsBase":[43645],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"32:3161:44","nodes":[{"id":43237,"nodeType":"PragmaDirective","src":"32:23:44","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":43238,"nodeType":"ImportDirective","src":"57:28:44","nodes":[],"absolutePath":"test/fuzzing/helpers/BeforeAfter.sol","file":"../BeforeAfter.sol","nameLocation":"-1:-1:-1","scope":43646,"sourceUnit":43028,"symbolAliases":[],"unitAlias":""},{"id":43645,"nodeType":"ContractDefinition","src":"87:3105:44","nodes":[{"id":43244,"nodeType":"EventDefinition","src":"135:32:44","nodes":[],"anonymous":false,"eventSelector":"b123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a284","name":"LogAddress","nameLocation":"141:10:44","parameters":{"id":43243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43242,"indexed":false,"mutability":"mutable","name":"actor","nameLocation":"160:5:44","nodeType":"VariableDeclaration","scope":43244,"src":"152:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43241,"name":"address","nodeType":"ElementaryTypeName","src":"152:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"151:15:44"}},{"id":43330,"nodeType":"ModifierDefinition","src":"173:895:44","nodes":[],"body":{"id":43329,"nodeType":"Block","src":"200:868:44","nodes":[],"statements":[{"condition":{"id":43246,"name":"_setActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43038,"src":"214:9:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43323,"nodeType":"IfStatement","src":"210:710:44","trueBody":{"id":43322,"nodeType":"Block","src":"225:695:44","statements":[{"assignments":[43248],"declarations":[{"constant":false,"id":43248,"mutability":"mutable","name":"fuzzNumber","nameLocation":"247:10:44","nodeType":"VariableDeclaration","scope":43322,"src":"239:18:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43247,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43253,"initialValue":{"arguments":[{"id":43250,"name":"iteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43047,"src":"279:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":43251,"name":"SEED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43044,"src":"290:4:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":43249,"name":"generateFuzzNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43499,"src":"260:18:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":43252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"260:35:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"239:56:44"},{"expression":{"arguments":[{"hexValue":"66757a7a20697465726174696f6e","id":43257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"321:16:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_e1aa807a40ab2d07c86761dbcfef9838ede64475effbfd08bd424e446041cda5","typeString":"literal_string \"fuzz iteration\""},"value":"fuzz iteration"},{"id":43258,"name":"iteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43047,"src":"339:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e1aa807a40ab2d07c86761dbcfef9838ede64475effbfd08bd424e446041cda5","typeString":"literal_string \"fuzz iteration\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43254,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24267,"src":"309:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$24267_$","typeString":"type(library console)"}},"id":43256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"317:3:44","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":16894,"src":"309:11:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) pure"}},"id":43259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"309:40:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43260,"nodeType":"ExpressionStatement","src":"309:40:44"},{"expression":{"id":43281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43261,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"363:12:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":43262,"name":"USERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45058,"src":"378:5:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":43280,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43268,"name":"iteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43047,"src":"419:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":43269,"name":"PRIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43041,"src":"431:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"419:17:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":43271,"name":"SEED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43044,"src":"439:4:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"419:24:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43266,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"402:3:44","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":43267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"406:12:44","memberName":"encodePacked","nodeType":"MemberAccess","src":"402:16:44","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"402:42:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43265,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"392:9:44","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":43274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"392:53:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":43264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"384:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":43263,"name":"uint256","nodeType":"ElementaryTypeName","src":"384:7:44","typeDescriptions":{}}},"id":43275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"384:62:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"components":[{"expression":{"id":43276,"name":"USERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45058,"src":"450:5:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":43277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"456:6:44","memberName":"length","nodeType":"MemberAccess","src":"450:12:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":43278,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"449:14:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"384:79:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"378:86:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"363:101:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43282,"nodeType":"ExpressionStatement","src":"363:101:44"},{"expression":{"id":43285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43283,"name":"iteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43047,"src":"479:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":43284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"492:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"479:14:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43286,"nodeType":"ExpressionStatement","src":"479:14:44"},{"expression":{"arguments":[{"hexValue":"5072616e6b696e673a20","id":43290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"564:12:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_ff718884333f978f404b58bb8d4a9fd359b3e402ecc275c02e74ea43e8feee54","typeString":"literal_string \"Pranking: \""},"value":"Pranking: "},{"arguments":[{"id":43292,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"587:12:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":43291,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43609,"src":"578:8:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":43293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"578:22:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ff718884333f978f404b58bb8d4a9fd359b3e402ecc275c02e74ea43e8feee54","typeString":"literal_string \"Pranking: \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":43287,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24267,"src":"552:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$24267_$","typeString":"type(library console)"}},"id":43289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"560:3:44","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":16928,"src":"552:11:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory) pure"}},"id":43294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"552:49:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43295,"nodeType":"ExpressionStatement","src":"552:49:44"},{"expression":{"arguments":[{"hexValue":"426c6f636b2074696d657374616d703a20","id":43299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"649:19:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd84c76c1e920d8ee03d13d1625935d13fa7b44d17e672305ca7e98d1006ff53","typeString":"literal_string \"Block timestamp: \""},"value":"Block timestamp: "},{"expression":{"id":43300,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"670:5:44","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":43301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"676:9:44","memberName":"timestamp","nodeType":"MemberAccess","src":"670:15:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_dd84c76c1e920d8ee03d13d1625935d13fa7b44d17e672305ca7e98d1006ff53","typeString":"literal_string \"Block timestamp: \""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43296,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24267,"src":"637:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$24267_$","typeString":"type(library console)"}},"id":43298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"645:3:44","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":16894,"src":"637:11:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) pure"}},"id":43302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"637:49:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43303,"nodeType":"ExpressionStatement","src":"637:49:44"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":43304,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"752:5:44","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":43305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"758:9:44","memberName":"timestamp","nodeType":"MemberAccess","src":"752:15:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":43306,"name":"lastTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43049,"src":"770:13:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"752:31:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":43320,"nodeType":"Block","src":"846:64:44","statements":[{"expression":{"id":43318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43315,"name":"lastTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43049,"src":"864:13:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":43316,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"880:5:44","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":43317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"886:9:44","memberName":"timestamp","nodeType":"MemberAccess","src":"880:15:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"864:31:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43319,"nodeType":"ExpressionStatement","src":"864:31:44"}]},"id":43321,"nodeType":"IfStatement","src":"748:162:44","trueBody":{"id":43314,"nodeType":"Block","src":"785:55:44","statements":[{"expression":{"arguments":[{"id":43311,"name":"lastTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43049,"src":"811:13:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43308,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"803:2:44","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":43310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:4:44","memberName":"warp","nodeType":"MemberAccess","referencedDeclaration":15932,"src":"803:7:44","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":43312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"803:22:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43313,"nodeType":"ExpressionStatement","src":"803:22:44"}]}}]}},{"eventCall":{"arguments":[{"id":43325,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"945:12:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":43324,"name":"LogAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43244,"src":"934:10:44","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":43326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:24:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43327,"nodeType":"EmitStatement","src":"929:29:44"},{"id":43328,"nodeType":"PlaceholderStatement","src":"968:1:44"}]},"name":"setCurrentActor","nameLocation":"182:15:44","parameters":{"id":43245,"nodeType":"ParameterList","parameters":[],"src":"197:2:44"},"virtual":false,"visibility":"internal"},{"id":43475,"nodeType":"FunctionDefinition","src":"1074:1287:44","nodes":[],"body":{"id":43474,"nodeType":"Block","src":"1121:1240:44","nodes":[],"statements":[{"assignments":[43339],"declarations":[{"constant":false,"id":43339,"mutability":"mutable","name":"targetArray","nameLocation":"1148:11:44","nodeType":"VariableDeclaration","scope":43474,"src":"1131:28:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":43337,"name":"address","nodeType":"ElementaryTypeName","src":"1131:7:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":43338,"nodeType":"ArrayTypeName","src":"1131:9:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":43341,"initialValue":{"id":43340,"name":"USERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45058,"src":"1162:5:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1131:36:44"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":43343,"name":"targetArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43339,"src":"1206:11:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":43344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1218:6:44","memberName":"length","nodeType":"MemberAccess","src":"1206:18:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":43345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1227:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1206:22:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54617267657420617272617920697320656d707479","id":43347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1230:23:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd214897e2e4f241c557af0e19230bc9e6f1361a21d7ab9172b7ef7a21fe6dab","typeString":"literal_string \"Target array is empty\""},"value":"Target array is empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cd214897e2e4f241c557af0e19230bc9e6f1361a21d7ab9172b7ef7a21fe6dab","typeString":"literal_string \"Target array is empty\""}],"id":43342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1198:7:44","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":43348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1198:56:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43349,"nodeType":"ExpressionStatement","src":"1198:56:44"},{"assignments":[43351],"declarations":[{"constant":false,"id":43351,"mutability":"mutable","name":"targetIndex","nameLocation":"1307:11:44","nodeType":"VariableDeclaration","scope":43474,"src":"1299:19:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43350,"name":"uint256","nodeType":"ElementaryTypeName","src":"1299:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43352,"nodeType":"VariableDeclarationStatement","src":"1299:19:44"},{"assignments":[43354],"declarations":[{"constant":false,"id":43354,"mutability":"mutable","name":"found","nameLocation":"1333:5:44","nodeType":"VariableDeclaration","scope":43474,"src":"1328:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43353,"name":"bool","nodeType":"ElementaryTypeName","src":"1328:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":43356,"initialValue":{"hexValue":"66616c7365","id":43355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1341:5:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"1328:18:44"},{"body":{"id":43398,"nodeType":"Block","src":"1405:258:44","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":43372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":43368,"name":"targetArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43339,"src":"1423:11:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":43370,"indexExpression":{"id":43369,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43358,"src":"1435:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1423:14:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":43371,"name":"targetUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43332,"src":"1441:10:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1423:28:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43397,"nodeType":"IfStatement","src":"1419:234:44","trueBody":{"id":43396,"nodeType":"Block","src":"1453:200:44","statements":[{"expression":{"id":43375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43373,"name":"targetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43351,"src":"1471:11:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43374,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43358,"src":"1485:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1471:15:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43376,"nodeType":"ExpressionStatement","src":"1471:15:44"},{"expression":{"arguments":[{"hexValue":"53657474696e672075736572","id":43380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1516:14:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_38d368f1423fbd20ce0df9da82f3c1261a2adb8eeb4a0c34f52fe29987e77110","typeString":"literal_string \"Setting user\""},"value":"Setting user"},{"id":43381,"name":"targetUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43332,"src":"1532:10:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_38d368f1423fbd20ce0df9da82f3c1261a2adb8eeb4a0c34f52fe29987e77110","typeString":"literal_string \"Setting user\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":43377,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24267,"src":"1504:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$24267_$","typeString":"type(library console)"}},"id":43379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1512:3:44","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":16962,"src":"1504:11:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address) pure"}},"id":43382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1504:39:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43383,"nodeType":"ExpressionStatement","src":"1504:39:44"},{"expression":{"arguments":[{"hexValue":"496e646578","id":43387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1573:7:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_f7792039f07e6afc0fffaa256750a60fa9d7fdb5a41934eb9200432707b001fb","typeString":"literal_string \"Index\""},"value":"Index"},{"id":43388,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43358,"src":"1582:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f7792039f07e6afc0fffaa256750a60fa9d7fdb5a41934eb9200432707b001fb","typeString":"literal_string \"Index\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43384,"name":"console","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24267,"src":"1561:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_console_$24267_$","typeString":"type(library console)"}},"id":43386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1569:3:44","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":16894,"src":"1561:11:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) pure"}},"id":43389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1561:23:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43390,"nodeType":"ExpressionStatement","src":"1561:23:44"},{"expression":{"id":43393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43391,"name":"found","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43354,"src":"1603:5:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":43392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1611:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1603:12:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43394,"nodeType":"ExpressionStatement","src":"1603:12:44"},{"id":43395,"nodeType":"Break","src":"1633:5:44"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43361,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43358,"src":"1376:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":43362,"name":"targetArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43339,"src":"1380:11:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":43363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1392:6:44","memberName":"length","nodeType":"MemberAccess","src":"1380:18:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1376:22:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43399,"initializationExpression":{"assignments":[43358],"declarations":[{"constant":false,"id":43358,"mutability":"mutable","name":"i","nameLocation":"1369:1:44","nodeType":"VariableDeclaration","scope":43399,"src":"1361:9:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1361:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43360,"initialValue":{"hexValue":"30","id":43359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1373:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1361:13:44"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":43366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1400:3:44","subExpression":{"id":43365,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43358,"src":"1400:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43367,"nodeType":"ExpressionStatement","src":"1400:3:44"},"nodeType":"ForStatement","src":"1356:307:44"},{"expression":{"arguments":[{"id":43401,"name":"found","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43354,"src":"1681:5:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5461726765742075736572206e6f7420666f756e6420696e206172726179","id":43402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1688:32:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_b75c023fc028cd7cf89eb3468f928503c37f059dcc43b0f235dab5c8a207a5b7","typeString":"literal_string \"Target user not found in array\""},"value":"Target user not found in array"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b75c023fc028cd7cf89eb3468f928503c37f059dcc43b0f235dab5c8a207a5b7","typeString":"literal_string \"Target user not found in array\""}],"id":43400,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1673:7:44","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":43403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:48:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43404,"nodeType":"ExpressionStatement","src":"1673:48:44"},{"assignments":[43406],"declarations":[{"constant":false,"id":43406,"mutability":"mutable","name":"maxIterations","nameLocation":"1740:13:44","nodeType":"VariableDeclaration","scope":43474,"src":"1732:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43405,"name":"uint256","nodeType":"ElementaryTypeName","src":"1732:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43408,"initialValue":{"hexValue":"313030303030","id":43407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1756:6:44","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"nodeType":"VariableDeclarationStatement","src":"1732:30:44"},{"assignments":[43410],"declarations":[{"constant":false,"id":43410,"mutability":"mutable","name":"currentIteration","nameLocation":"1807:16:44","nodeType":"VariableDeclaration","scope":43474,"src":"1799:24:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43412,"initialValue":{"id":43411,"name":"iteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43047,"src":"1826:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1799:36:44"},{"assignments":[43414],"declarations":[{"constant":false,"id":43414,"mutability":"mutable","name":"iterationFound","nameLocation":"1850:14:44","nodeType":"VariableDeclaration","scope":43474,"src":"1845:19:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43413,"name":"bool","nodeType":"ElementaryTypeName","src":"1845:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":43416,"initialValue":{"hexValue":"66616c7365","id":43415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1867:5:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"1845:27:44"},{"body":{"id":43467,"nodeType":"Block","src":"1927:360:44","statements":[{"assignments":[43428],"declarations":[{"constant":false,"id":43428,"mutability":"mutable","name":"hash","nameLocation":"1949:4:44","nodeType":"VariableDeclaration","scope":43467,"src":"1941:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43427,"name":"uint256","nodeType":"ElementaryTypeName","src":"1941:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43442,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43434,"name":"currentIteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43410,"src":"1991:16:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":43435,"name":"PRIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43041,"src":"2010:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1991:24:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":43437,"name":"SEED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43044,"src":"2018:4:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1991:31:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43432,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1974:3:44","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":43433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1978:12:44","memberName":"encodePacked","nodeType":"MemberAccess","src":"1974:16:44","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1974:49:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43431,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1964:9:44","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":43440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1964:60:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":43430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1956:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":43429,"name":"uint256","nodeType":"ElementaryTypeName","src":"1956:7:44","typeDescriptions":{}}},"id":43441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1956:69:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1941:84:44"},{"assignments":[43444],"declarations":[{"constant":false,"id":43444,"mutability":"mutable","name":"index","nameLocation":"2047:5:44","nodeType":"VariableDeclaration","scope":43467,"src":"2039:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43443,"name":"uint256","nodeType":"ElementaryTypeName","src":"2039:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43449,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43445,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43428,"src":"2055:4:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":43446,"name":"targetArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43339,"src":"2062:11:44","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":43447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2074:6:44","memberName":"length","nodeType":"MemberAccess","src":"2062:18:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2055:25:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2039:41:44"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43450,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43444,"src":"2099:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":43451,"name":"targetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43351,"src":"2108:11:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2099:20:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43463,"nodeType":"IfStatement","src":"2095:149:44","trueBody":{"id":43462,"nodeType":"Block","src":"2121:123:44","statements":[{"expression":{"id":43455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43453,"name":"iteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43047,"src":"2139:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43454,"name":"currentIteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43410,"src":"2151:16:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2139:28:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43456,"nodeType":"ExpressionStatement","src":"2139:28:44"},{"expression":{"id":43459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43457,"name":"iterationFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43414,"src":"2185:14:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":43458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2202:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2185:21:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43460,"nodeType":"ExpressionStatement","src":"2185:21:44"},{"id":43461,"nodeType":"Break","src":"2224:5:44"}]}},{"expression":{"id":43465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2258:18:44","subExpression":{"id":43464,"name":"currentIteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43410,"src":"2258:16:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43466,"nodeType":"ExpressionStatement","src":"2258:18:44"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43418,"src":"1903:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":43422,"name":"maxIterations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43406,"src":"1907:13:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1903:17:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43468,"initializationExpression":{"assignments":[43418],"declarations":[{"constant":false,"id":43418,"mutability":"mutable","name":"i","nameLocation":"1896:1:44","nodeType":"VariableDeclaration","scope":43468,"src":"1888:9:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43417,"name":"uint256","nodeType":"ElementaryTypeName","src":"1888:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43420,"initialValue":{"hexValue":"30","id":43419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1900:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1888:13:44"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":43425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1922:3:44","subExpression":{"id":43424,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43418,"src":"1922:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43426,"nodeType":"ExpressionStatement","src":"1922:3:44"},"nodeType":"ForStatement","src":"1883:404:44"},{"expression":{"arguments":[{"id":43470,"name":"iterationFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43414,"src":"2305:14:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5573657220696e646578206e6f7420666f756e6420627920736574746572","id":43471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2321:32:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_e3cbfc2605a6d8918ab8c0feab18c3e1fd26d27f26dc6a4fa4312e6cf81cfe97","typeString":"literal_string \"User index not found by setter\""},"value":"User index not found by setter"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e3cbfc2605a6d8918ab8c0feab18c3e1fd26d27f26dc6a4fa4312e6cf81cfe97","typeString":"literal_string \"User index not found by setter\""}],"id":43469,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2297:7:44","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":43472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:57:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43473,"nodeType":"ExpressionStatement","src":"2297:57:44"}]},"implemented":true,"kind":"function","modifiers":[],"name":"setActor","nameLocation":"1083:8:44","parameters":{"id":43333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43332,"mutability":"mutable","name":"targetUser","nameLocation":"1100:10:44","nodeType":"VariableDeclaration","scope":43475,"src":"1092:18:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43331,"name":"address","nodeType":"ElementaryTypeName","src":"1092:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1091:20:44"},"returnParameters":{"id":43334,"nodeType":"ParameterList","parameters":[],"src":"1121:0:44"},"scope":43645,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43499,"nodeType":"FunctionDefinition","src":"2367:179:44","nodes":[],"body":{"id":43498,"nodeType":"Block","src":"2460:86:44","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43489,"name":"iteration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43477,"src":"2512:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":43490,"name":"PRIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43041,"src":"2524:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:17:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":43492,"name":"seed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43479,"src":"2532:4:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:24:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43487,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2495:3:44","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":43488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2499:12:44","memberName":"encodePacked","nodeType":"MemberAccess","src":"2495:16:44","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2495:42:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43486,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2485:9:44","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":43495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2485:53:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":43485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2477:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":43484,"name":"uint256","nodeType":"ElementaryTypeName","src":"2477:7:44","typeDescriptions":{}}},"id":43496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:62:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":43483,"id":43497,"nodeType":"Return","src":"2470:69:44"}]},"implemented":true,"kind":"function","modifiers":[],"name":"generateFuzzNumber","nameLocation":"2376:18:44","parameters":{"id":43480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43477,"mutability":"mutable","name":"iteration","nameLocation":"2403:9:44","nodeType":"VariableDeclaration","scope":43499,"src":"2395:17:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43476,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43479,"mutability":"mutable","name":"seed","nameLocation":"2422:4:44","nodeType":"VariableDeclaration","scope":43499,"src":"2414:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43478,"name":"uint256","nodeType":"ElementaryTypeName","src":"2414:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:33:44"},"returnParameters":{"id":43483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43499,"src":"2451:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43481,"name":"uint256","nodeType":"ElementaryTypeName","src":"2451:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2450:9:44"},"scope":43645,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":43609,"nodeType":"FunctionDefinition","src":"2552:464:44","nodes":[],"body":{"id":43608,"nodeType":"Block","src":"2627:389:44","nodes":[],"statements":[{"assignments":[43507],"declarations":[{"constant":false,"id":43507,"mutability":"mutable","name":"s","nameLocation":"2650:1:44","nodeType":"VariableDeclaration","scope":43608,"src":"2637:14:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43506,"name":"bytes","nodeType":"ElementaryTypeName","src":"2637:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":43512,"initialValue":{"arguments":[{"hexValue":"3430","id":43510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2664:2:44","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"}],"id":43509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2654:9:44","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":43508,"name":"bytes","nodeType":"ElementaryTypeName","src":"2658:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":43511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2654:13:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2637:30:44"},{"body":{"id":43601,"nodeType":"Block","src":"2710:274:44","statements":[{"assignments":[43524],"declarations":[{"constant":false,"id":43524,"mutability":"mutable","name":"b","nameLocation":"2731:1:44","nodeType":"VariableDeclaration","scope":43601,"src":"2724:8:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":43523,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2724:6:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":43549,"initialValue":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":43533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43501,"src":"2764:5:44","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":43532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2756:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":43531,"name":"uint160","nodeType":"ElementaryTypeName","src":"2756:7:44","typeDescriptions":{}}},"id":43534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2756:14:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":43530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2748:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":43529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2748:7:44","typeDescriptions":{}}},"id":43535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2748:23:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":43536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2775:1:44","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":43537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2781:1:44","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3139","id":43538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2786:2:44","typeDescriptions":{"typeIdentifier":"t_rational_19_by_1","typeString":"int_const 19"},"value":"19"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":43539,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43514,"src":"2791:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2786:6:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":43541,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2785:8:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2781:12:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":43543,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2780:14:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2775:19:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":43545,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2774:21:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2748:47:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":43528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2742:5:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":43527,"name":"uint8","nodeType":"ElementaryTypeName","src":"2742:5:44","typeDescriptions":{}}},"id":43547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2742:54:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":43526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2735:6:44","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":43525,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2735:6:44","typeDescriptions":{}}},"id":43548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2735:62:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"2724:73:44"},{"assignments":[43551],"declarations":[{"constant":false,"id":43551,"mutability":"mutable","name":"hi","nameLocation":"2818:2:44","nodeType":"VariableDeclaration","scope":43601,"src":"2811:9:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":43550,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2811:6:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":43561,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":43559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":43556,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43524,"src":"2836:1:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2830:5:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":43554,"name":"uint8","nodeType":"ElementaryTypeName","src":"2830:5:44","typeDescriptions":{}}},"id":43557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2830:8:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3136","id":43558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2841:2:44","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"2830:13:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":43553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2823:6:44","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":43552,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2823:6:44","typeDescriptions":{}}},"id":43560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:21:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"2811:33:44"},{"assignments":[43563],"declarations":[{"constant":false,"id":43563,"mutability":"mutable","name":"lo","nameLocation":"2865:2:44","nodeType":"VariableDeclaration","scope":43601,"src":"2858:9:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":43562,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2858:6:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":43578,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":43576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":43568,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43524,"src":"2883:1:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2877:5:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":43566,"name":"uint8","nodeType":"ElementaryTypeName","src":"2877:5:44","typeDescriptions":{}}},"id":43569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2877:8:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":43575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3136","id":43570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2888:2:44","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":43573,"name":"hi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43551,"src":"2899:2:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2893:5:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":43571,"name":"uint8","nodeType":"ElementaryTypeName","src":"2893:5:44","typeDescriptions":{}}},"id":43574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2893:9:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2888:14:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2877:25:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":43565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2870:6:44","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":43564,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2870:6:44","typeDescriptions":{}}},"id":43577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2870:33:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"2858:45:44"},{"expression":{"id":43587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":43579,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43507,"src":"2917:1:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":43583,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":43580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:44","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":43581,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43514,"src":"2923:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2919:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2917:8:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":43585,"name":"hi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43551,"src":"2933:2:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43584,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43644,"src":"2928:4:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_bytes1_$","typeString":"function (bytes1) pure returns (bytes1)"}},"id":43586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2928:8:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2917:19:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":43588,"nodeType":"ExpressionStatement","src":"2917:19:44"},{"expression":{"id":43599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":43589,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43507,"src":"2950:1:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":43595,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":43590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2952:1:44","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":43591,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43514,"src":"2956:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2952:5:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":43593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2960:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2952:9:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2950:12:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":43597,"name":"lo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43563,"src":"2970:2:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43596,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43644,"src":"2965:4:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_bytes1_$","typeString":"function (bytes1) pure returns (bytes1)"}},"id":43598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2965:8:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2950:23:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":43600,"nodeType":"ExpressionStatement","src":"2950:23:44"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43514,"src":"2697:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3230","id":43518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2701:2:44","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"2697:6:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43602,"initializationExpression":{"assignments":[43514],"declarations":[{"constant":false,"id":43514,"mutability":"mutable","name":"i","nameLocation":"2690:1:44","nodeType":"VariableDeclaration","scope":43602,"src":"2682:9:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43513,"name":"uint256","nodeType":"ElementaryTypeName","src":"2682:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43516,"initialValue":{"hexValue":"30","id":43515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2694:1:44","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2682:13:44"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":43521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2705:3:44","subExpression":{"id":43520,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43514,"src":"2705:1:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43522,"nodeType":"ExpressionStatement","src":"2705:3:44"},"nodeType":"ForStatement","src":"2677:307:44"},{"expression":{"arguments":[{"id":43605,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43507,"src":"3007:1:44","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3000:6:44","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":43603,"name":"string","nodeType":"ElementaryTypeName","src":"3000:6:44","typeDescriptions":{}}},"id":43606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3000:9:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":43505,"id":43607,"nodeType":"Return","src":"2993:16:44"}]},"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"2561:8:44","parameters":{"id":43502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43501,"mutability":"mutable","name":"value","nameLocation":"2578:5:44","nodeType":"VariableDeclaration","scope":43609,"src":"2570:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43500,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:15:44"},"returnParameters":{"id":43505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43504,"mutability":"mutable","name":"str","nameLocation":"2622:3:44","nodeType":"VariableDeclaration","scope":43609,"src":"2608:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43503,"name":"string","nodeType":"ElementaryTypeName","src":"2608:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2607:19:44"},"scope":43645,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":43644,"nodeType":"FunctionDefinition","src":"3022:168:44","nodes":[],"body":{"id":43643,"nodeType":"Block","src":"3079:111:44","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":43621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":43618,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43611,"src":"3099:1:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3093:5:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":43616,"name":"uint8","nodeType":"ElementaryTypeName","src":"3093:5:44","typeDescriptions":{}}},"id":43619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3093:8:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3130","id":43620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3104:2:44","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"3093:13:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":43639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":43636,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43611,"src":"3173:1:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3167:5:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":43634,"name":"uint8","nodeType":"ElementaryTypeName","src":"3167:5:44","typeDescriptions":{}}},"id":43637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3167:8:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"30783537","id":43638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3178:4:44","typeDescriptions":{"typeIdentifier":"t_rational_87_by_1","typeString":"int_const 87"},"value":"0x57"},"src":"3167:15:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":43633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3160:6:44","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":43632,"name":"bytes1","nodeType":"ElementaryTypeName","src":"3160:6:44","typeDescriptions":{}}},"id":43640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3160:23:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"functionReturnParameters":43615,"id":43641,"nodeType":"Return","src":"3153:30:44"},"id":43642,"nodeType":"IfStatement","src":"3089:94:44","trueBody":{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":43629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":43626,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43611,"src":"3128:1:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":43625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3122:5:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":43624,"name":"uint8","nodeType":"ElementaryTypeName","src":"3122:5:44","typeDescriptions":{}}},"id":43627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3122:8:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"30783330","id":43628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3133:4:44","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"0x30"},"src":"3122:15:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":43623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3115:6:44","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":43622,"name":"bytes1","nodeType":"ElementaryTypeName","src":"3115:6:44","typeDescriptions":{}}},"id":43630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3115:23:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"functionReturnParameters":43615,"id":43631,"nodeType":"Return","src":"3108:30:44"}}]},"implemented":true,"kind":"function","modifiers":[],"name":"char","nameLocation":"3031:4:44","parameters":{"id":43612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43611,"mutability":"mutable","name":"b","nameLocation":"3043:1:44","nodeType":"VariableDeclaration","scope":43644,"src":"3036:8:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":43610,"name":"bytes1","nodeType":"ElementaryTypeName","src":"3036:6:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"3035:10:44"},"returnParameters":{"id":43615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43614,"mutability":"mutable","name":"c","nameLocation":"3076:1:44","nodeType":"VariableDeclaration","scope":43644,"src":"3069:8:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":43613,"name":"bytes1","nodeType":"ElementaryTypeName","src":"3069:6:44","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"3068:10:44"},"scope":43645,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":43239,"name":"BeforeAfter","nameLocations":["117:11:44"],"nodeType":"IdentifierPath","referencedDeclaration":43027,"src":"117:11:44"},"id":43240,"nodeType":"InheritanceSpecifier","src":"117:11:44"}],"canonicalName":"PreconditionsBase","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[43645,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013],"name":"PreconditionsBase","nameLocation":"96:17:44","scope":43646,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,43244,44810]}],"license":"MIT"}},"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol":{"id":45,"ast":{"absolutePath":"test/fuzzing/helpers/preconditions/PreconditionsSampleContract.sol","id":43752,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PreconditionsBase":[43645],"PreconditionsSampleContract":[43751],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"32:1319:45","nodes":[{"id":43647,"nodeType":"PragmaDirective","src":"32:23:45","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":43648,"nodeType":"ImportDirective","src":"57:33:45","nodes":[],"absolutePath":"test/fuzzing/helpers/preconditions/PreconditionsBase.sol","file":"./PreconditionsBase.sol","nameLocation":"-1:-1:-1","scope":43752,"sourceUnit":43646,"symbolAliases":[],"unitAlias":""},{"id":43751,"nodeType":"ContractDefinition","src":"92:1258:45","nodes":[{"id":43670,"nodeType":"FunctionDefinition","src":"156:178:45","nodes":[],"body":{"id":43669,"nodeType":"Block","src":"268:66:45","nodes":[],"statements":[{"expression":{"id":43667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":43658,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43656,"src":"278:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFunctionParams_$42827_memory_ptr","typeString":"struct BeforeAfter.SampleFunctionParams memory"}},"id":43660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"285:10:45","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42826,"src":"278:17:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":43663,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43652,"src":"307:11:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":43664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"320:1:45","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"313030","id":43665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"323:3:45","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}],"expression":{"id":43661,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"298:2:45","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"301:5:45","memberName":"clamp","nodeType":"MemberAccess","referencedDeclaration":40648,"src":"298:8:45","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) external returns (uint256)"}},"id":43666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"298:29:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"278:49:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43668,"nodeType":"ExpressionStatement","src":"278:49:45"}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFunctionPreconditions","nameLocation":"165:27:45","parameters":{"id":43653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43652,"mutability":"mutable","name":"sampleInput","nameLocation":"201:11:45","nodeType":"VariableDeclaration","scope":43670,"src":"193:19:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43651,"name":"uint256","nodeType":"ElementaryTypeName","src":"193:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"192:21:45"},"returnParameters":{"id":43657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43656,"mutability":"mutable","name":"params","nameLocation":"260:6:45","nodeType":"VariableDeclaration","scope":43670,"src":"232:34:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFunctionParams_$42827_memory_ptr","typeString":"struct BeforeAfter.SampleFunctionParams"},"typeName":{"id":43655,"nodeType":"UserDefinedTypeName","pathNode":{"id":43654,"name":"SampleFunctionParams","nameLocations":["232:20:45"],"nodeType":"IdentifierPath","referencedDeclaration":42827,"src":"232:20:45"},"referencedDeclaration":42827,"src":"232:20:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFunctionParams_$42827_storage_ptr","typeString":"struct BeforeAfter.SampleFunctionParams"}},"visibility":"internal"}],"src":"231:36:45"},"scope":43751,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43685,"nodeType":"FunctionDefinition","src":"340:191:45","nodes":[],"body":{"id":43684,"nodeType":"Block","src":"483:48:45","nodes":[],"statements":[{"expression":{"id":43682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":43678,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43676,"src":"493:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithRequireParams_$42830_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithRequireParams memory"}},"id":43680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"500:10:45","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42829,"src":"493:17:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43681,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43672,"src":"513:11:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"493:31:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43683,"nodeType":"ExpressionStatement","src":"493:31:45"}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithRequirePreconditions","nameLocation":"349:34:45","parameters":{"id":43673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43672,"mutability":"mutable","name":"sampleInput","nameLocation":"389:11:45","nodeType":"VariableDeclaration","scope":43685,"src":"384:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43671,"name":"bool","nodeType":"ElementaryTypeName","src":"384:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"383:18:45"},"returnParameters":{"id":43677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43676,"mutability":"mutable","name":"params","nameLocation":"471:6:45","nodeType":"VariableDeclaration","scope":43685,"src":"436:41:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithRequireParams_$42830_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithRequireParams"},"typeName":{"id":43675,"nodeType":"UserDefinedTypeName","pathNode":{"id":43674,"name":"SampleFailWithRequireParams","nameLocations":["436:27:45"],"nodeType":"IdentifierPath","referencedDeclaration":42830,"src":"436:27:45"},"referencedDeclaration":42830,"src":"436:27:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithRequireParams_$42830_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithRequireParams"}},"visibility":"internal"}],"src":"435:43:45"},"scope":43751,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43700,"nodeType":"FunctionDefinition","src":"537:196:45","nodes":[],"body":{"id":43699,"nodeType":"Block","src":"687:46:45","nodes":[],"statements":[{"expression":{"id":43697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":43693,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43691,"src":"697:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithCustomErrorParams_$42833_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithCustomErrorParams memory"}},"id":43695,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"704:10:45","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42832,"src":"697:17:45","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43696,"name":"sampleNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43687,"src":"717:9:45","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"697:29:45","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":43698,"nodeType":"ExpressionStatement","src":"697:29:45"}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithCustomErrorPreconditions","nameLocation":"546:38:45","parameters":{"id":43688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43687,"mutability":"mutable","name":"sampleNum","nameLocation":"591:9:45","nodeType":"VariableDeclaration","scope":43700,"src":"585:15:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":43686,"name":"uint8","nodeType":"ElementaryTypeName","src":"585:5:45","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"584:17:45"},"returnParameters":{"id":43692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43691,"mutability":"mutable","name":"params","nameLocation":"675:6:45","nodeType":"VariableDeclaration","scope":43700,"src":"636:45:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithCustomErrorParams_$42833_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithCustomErrorParams"},"typeName":{"id":43690,"nodeType":"UserDefinedTypeName","pathNode":{"id":43689,"name":"SampleFailWithCustomErrorParams","nameLocations":["636:31:45"],"nodeType":"IdentifierPath","referencedDeclaration":42833,"src":"636:31:45"},"referencedDeclaration":42833,"src":"636:31:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithCustomErrorParams_$42833_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithCustomErrorParams"}},"visibility":"internal"}],"src":"635:47:45"},"scope":43751,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43720,"nodeType":"FunctionDefinition","src":"739:206:45","nodes":[],"body":{"id":43719,"nodeType":"Block","src":"881:64:45","nodes":[],"statements":[{"expression":{"id":43717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":43708,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43706,"src":"891:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithPanicParams_$42836_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithPanicParams memory"}},"id":43710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"898:10:45","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42835,"src":"891:17:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":43713,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43702,"src":"920:11:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":43714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"933:1:45","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"38","id":43715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:1:45","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"}],"expression":{"id":43711,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"911:2:45","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"914:5:45","memberName":"clamp","nodeType":"MemberAccess","referencedDeclaration":40648,"src":"911:8:45","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) external returns (uint256)"}},"id":43716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"911:27:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"891:47:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43718,"nodeType":"ExpressionStatement","src":"891:47:45"}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithPanicPreconditions","nameLocation":"748:32:45","parameters":{"id":43703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43702,"mutability":"mutable","name":"sampleInput","nameLocation":"789:11:45","nodeType":"VariableDeclaration","scope":43720,"src":"781:19:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43701,"name":"uint256","nodeType":"ElementaryTypeName","src":"781:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"780:21:45"},"returnParameters":{"id":43707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43706,"mutability":"mutable","name":"params","nameLocation":"869:6:45","nodeType":"VariableDeclaration","scope":43720,"src":"836:39:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithPanicParams_$42836_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithPanicParams"},"typeName":{"id":43705,"nodeType":"UserDefinedTypeName","pathNode":{"id":43704,"name":"SampleFailWithPanicParams","nameLocations":["836:25:45"],"nodeType":"IdentifierPath","referencedDeclaration":42836,"src":"836:25:45"},"referencedDeclaration":42836,"src":"836:25:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithPanicParams_$42836_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithPanicParams"}},"visibility":"internal"}],"src":"835:41:45"},"scope":43751,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43735,"nodeType":"FunctionDefinition","src":"951:192:45","nodes":[],"body":{"id":43734,"nodeType":"Block","src":"1095:48:45","nodes":[],"statements":[{"expression":{"id":43732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":43728,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43726,"src":"1105:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithAssertParams_$42839_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithAssertParams memory"}},"id":43730,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1112:10:45","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42838,"src":"1105:17:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43731,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43722,"src":"1125:11:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1105:31:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43733,"nodeType":"ExpressionStatement","src":"1105:31:45"}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailWithAssertPreconditions","nameLocation":"960:33:45","parameters":{"id":43723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43722,"mutability":"mutable","name":"sampleInput","nameLocation":"1002:11:45","nodeType":"VariableDeclaration","scope":43735,"src":"994:19:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43721,"name":"uint256","nodeType":"ElementaryTypeName","src":"994:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"993:21:45"},"returnParameters":{"id":43727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43726,"mutability":"mutable","name":"params","nameLocation":"1083:6:45","nodeType":"VariableDeclaration","scope":43735,"src":"1049:40:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithAssertParams_$42839_memory_ptr","typeString":"struct BeforeAfter.SampleFailWithAssertParams"},"typeName":{"id":43725,"nodeType":"UserDefinedTypeName","pathNode":{"id":43724,"name":"SampleFailWithAssertParams","nameLocations":["1049:26:45"],"nodeType":"IdentifierPath","referencedDeclaration":42839,"src":"1049:26:45"},"referencedDeclaration":42839,"src":"1049:26:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailWithAssertParams_$42839_storage_ptr","typeString":"struct BeforeAfter.SampleFailWithAssertParams"}},"visibility":"internal"}],"src":"1048:42:45"},"scope":43751,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43750,"nodeType":"FunctionDefinition","src":"1149:199:45","nodes":[],"body":{"id":43749,"nodeType":"Block","src":"1300:48:45","nodes":[],"statements":[{"expression":{"id":43747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":43743,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43741,"src":"1310:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailReturnEmptyDataParams_$42842_memory_ptr","typeString":"struct BeforeAfter.SampleFailReturnEmptyDataParams memory"}},"id":43745,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1317:10:45","memberName":"sampleUint","nodeType":"MemberAccess","referencedDeclaration":42841,"src":"1310:17:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43746,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43737,"src":"1330:11:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1310:31:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43748,"nodeType":"ExpressionStatement","src":"1310:31:45"}]},"implemented":true,"kind":"function","modifiers":[],"name":"sampleFailReturnEmptyDataPreconditions","nameLocation":"1158:38:45","parameters":{"id":43738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43737,"mutability":"mutable","name":"sampleInput","nameLocation":"1202:11:45","nodeType":"VariableDeclaration","scope":43750,"src":"1197:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43736,"name":"bool","nodeType":"ElementaryTypeName","src":"1197:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1196:18:45"},"returnParameters":{"id":43742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43741,"mutability":"mutable","name":"params","nameLocation":"1288:6:45","nodeType":"VariableDeclaration","scope":43750,"src":"1249:45:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailReturnEmptyDataParams_$42842_memory_ptr","typeString":"struct BeforeAfter.SampleFailReturnEmptyDataParams"},"typeName":{"id":43740,"nodeType":"UserDefinedTypeName","pathNode":{"id":43739,"name":"SampleFailReturnEmptyDataParams","nameLocations":["1249:31:45"],"nodeType":"IdentifierPath","referencedDeclaration":42842,"src":"1249:31:45"},"referencedDeclaration":42842,"src":"1249:31:45","typeDescriptions":{"typeIdentifier":"t_struct$_SampleFailReturnEmptyDataParams_$42842_storage_ptr","typeString":"struct BeforeAfter.SampleFailReturnEmptyDataParams"}},"visibility":"internal"}],"src":"1248:47:45"},"scope":43751,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":43649,"name":"PreconditionsBase","nameLocations":["132:17:45"],"nodeType":"IdentifierPath","referencedDeclaration":43645,"src":"132:17:45"},"id":43650,"nodeType":"InheritanceSpecifier","src":"132:17:45"}],"canonicalName":"PreconditionsSampleContract","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[43751,43645,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013],"name":"PreconditionsSampleContract","nameLocation":"101:27:45","scope":43752,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,43244,44810]}],"license":"MIT"}},"test/fuzzing/properties/Properties.sol":{"id":46,"ast":{"absolutePath":"test/fuzzing/properties/Properties.sol","id":43774,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzLibString":[39439],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"Properties":[43773],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"Properties_ERR":[44798],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"0:629:46","nodes":[{"id":43753,"nodeType":"PragmaDirective","src":"0:23:46","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":43754,"nodeType":"ImportDirective","src":"25:30:46","nodes":[],"absolutePath":"test/fuzzing/properties/Properties_ERR.sol","file":"./Properties_ERR.sol","nameLocation":"-1:-1:-1","scope":43774,"sourceUnit":44799,"symbolAliases":[],"unitAlias":""},{"id":43773,"nodeType":"ContractDefinition","src":"57:571:46","nodes":[{"id":43764,"nodeType":"FunctionDefinition","src":"274:86:46","nodes":[],"body":{"id":43763,"nodeType":"Block","src":"332:28:46","nodes":[],"statements":[{"expression":{"hexValue":"74727565","id":43761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"349:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":43760,"id":43762,"nodeType":"Return","src":"342:11:46"}]},"implemented":true,"kind":"function","modifiers":[],"name":"invariant_GLOB_01","nameLocation":"283:17:46","parameters":{"id":43757,"nodeType":"ParameterList","parameters":[],"src":"300:2:46"},"returnParameters":{"id":43760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43764,"src":"326:4:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43758,"name":"bool","nodeType":"ElementaryTypeName","src":"326:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"325:6:46"},"scope":43773,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":43772,"nodeType":"FunctionDefinition","src":"541:85:46","nodes":[],"body":{"id":43771,"nodeType":"Block","src":"598:28:46","nodes":[],"statements":[{"expression":{"hexValue":"74727565","id":43769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"615:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":43768,"id":43770,"nodeType":"Return","src":"608:11:46"}]},"implemented":true,"kind":"function","modifiers":[],"name":"invariant_INV_01","nameLocation":"550:16:46","parameters":{"id":43765,"nodeType":"ParameterList","parameters":[],"src":"566:2:46"},"returnParameters":{"id":43768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43772,"src":"592:4:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":43766,"name":"bool","nodeType":"ElementaryTypeName","src":"592:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"591:6:46"},"scope":43773,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":43755,"name":"Properties_ERR","nameLocations":["80:14:46"],"nodeType":"IdentifierPath","referencedDeclaration":44798,"src":"80:14:46"},"id":43756,"nodeType":"InheritanceSpecifier","src":"80:14:46"}],"canonicalName":"Properties","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[43773,44798,44624,44162,45200,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"Properties","nameLocation":"66:10:46","scope":43774,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}]}},"test/fuzzing/properties/PropertiesBase.sol":{"id":47,"ast":{"absolutePath":"test/fuzzing/properties/PropertiesBase.sol","id":44163,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzLibString":[39439],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"0:3098:47","nodes":[{"id":43775,"nodeType":"PragmaDirective","src":"0:23:47","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":43776,"nodeType":"ImportDirective","src":"25:48:47","nodes":[],"absolutePath":"lib/fuzzlib/src/FuzzBase.sol","file":"@perimetersec/fuzzlib/src/FuzzBase.sol","nameLocation":"-1:-1:-1","scope":44163,"sourceUnit":39014,"symbolAliases":[],"unitAlias":""},{"id":43777,"nodeType":"ImportDirective","src":"74:53:47","nodes":[],"absolutePath":"lib/fuzzlib/src/FuzzLibString.sol","file":"@perimetersec/fuzzlib/src/FuzzLibString.sol","nameLocation":"-1:-1:-1","scope":44163,"sourceUnit":39440,"symbolAliases":[],"unitAlias":""},{"id":43778,"nodeType":"ImportDirective","src":"128:48:47","nodes":[],"absolutePath":"lib/fuzzlib/src/FuzzBase.sol","file":"@perimetersec/fuzzlib/src/FuzzBase.sol","nameLocation":"-1:-1:-1","scope":44163,"sourceUnit":39014,"symbolAliases":[],"unitAlias":""},{"id":43779,"nodeType":"ImportDirective","src":"178:38:47","nodes":[],"absolutePath":"test/fuzzing/properties/PropertiesDescriptions.sol","file":"./PropertiesDescriptions.sol","nameLocation":"-1:-1:-1","scope":44163,"sourceUnit":44175,"symbolAliases":[],"unitAlias":""},{"id":43780,"nodeType":"ImportDirective","src":"217:36:47","nodes":[],"absolutePath":"test/fuzzing/helpers/BeforeAfter.sol","file":"../helpers/BeforeAfter.sol","nameLocation":"-1:-1:-1","scope":44163,"sourceUnit":43028,"symbolAliases":[],"unitAlias":""},{"id":43781,"nodeType":"ImportDirective","src":"254:36:47","nodes":[],"absolutePath":"test/fuzzing/utils/FuzzConstants.sol","file":"../utils/FuzzConstants.sol","nameLocation":"-1:-1:-1","scope":44163,"sourceUnit":45201,"symbolAliases":[],"unitAlias":""},{"id":43783,"nodeType":"ImportDirective","src":"292:46:47","nodes":[],"absolutePath":"lib/forge-std/src/StdMath.sol","file":"forge-std/StdMath.sol","nameLocation":"-1:-1:-1","scope":44163,"sourceUnit":7470,"symbolAliases":[{"foreign":{"id":43782,"name":"stdMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7469,"src":"300:7:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":44162,"nodeType":"ContractDefinition","src":"340:2757:47","nodes":[{"id":43894,"nodeType":"FunctionDefinition","src":"580:711:47","nodes":[],"body":{"id":43893,"nodeType":"Block","src":"675:616:47","nodes":[],"statements":[{"assignments":[43801],"declarations":[{"constant":false,"id":43801,"mutability":"mutable","name":"dt","nameLocation":"693:2:47","nodeType":"VariableDeclaration","scope":43893,"src":"685:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43800,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":43802,"nodeType":"VariableDeclarationStatement","src":"685:10:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43803,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43791,"src":"709:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":43804,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43793,"src":"714:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"709:6:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":43816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43812,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43801,"src":"742:2:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43813,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43793,"src":"747:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":43814,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43791,"src":"751:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"747:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"742:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43817,"nodeType":"ExpressionStatement","src":"742:10:47"},"id":43818,"nodeType":"IfStatement","src":"705:47:47","trueBody":{"expression":{"id":43810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43806,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43801,"src":"717:2:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43807,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43791,"src":"722:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":43808,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43793,"src":"726:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"722:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"717:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":43811,"nodeType":"ExpressionStatement","src":"717:10:47"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43819,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43801,"src":"766:2:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":43820,"name":"maxDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43795,"src":"771:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"766:13:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43892,"nodeType":"IfStatement","src":"762:523:47","trueBody":{"id":43891,"nodeType":"Block","src":"781:504:47","statements":[{"assignments":[43823],"declarations":[{"constant":false,"id":43823,"mutability":"mutable","name":"aBytes","nameLocation":"808:6:47","nodeType":"VariableDeclaration","scope":43891,"src":"795:19:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43822,"name":"bytes","nodeType":"ElementaryTypeName","src":"795:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":43828,"initialValue":{"arguments":[{"id":43826,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43791,"src":"834:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43824,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"817:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":43825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"821:12:47","memberName":"encodePacked","nodeType":"MemberAccess","src":"817:16:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"795:41:47"},{"assignments":[43830],"declarations":[{"constant":false,"id":43830,"mutability":"mutable","name":"bBytes","nameLocation":"863:6:47","nodeType":"VariableDeclaration","scope":43891,"src":"850:19:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43829,"name":"bytes","nodeType":"ElementaryTypeName","src":"850:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":43835,"initialValue":{"arguments":[{"id":43833,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43793,"src":"889:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43831,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"872:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":43832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"876:12:47","memberName":"encodePacked","nodeType":"MemberAccess","src":"872:16:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"872:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"850:41:47"},{"assignments":[43837],"declarations":[{"constant":false,"id":43837,"mutability":"mutable","name":"aStr","nameLocation":"919:4:47","nodeType":"VariableDeclaration","scope":43891,"src":"905:18:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43836,"name":"string","nodeType":"ElementaryTypeName","src":"905:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":43842,"initialValue":{"arguments":[{"id":43840,"name":"aBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43823,"src":"952:6:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":43838,"name":"FuzzLibString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39439,"src":"926:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FuzzLibString_$39439_$","typeString":"type(library FuzzLibString)"}},"id":43839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"940:11:47","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":39306,"src":"926:25:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":43841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"905:54:47"},{"assignments":[43844],"declarations":[{"constant":false,"id":43844,"mutability":"mutable","name":"bStr","nameLocation":"987:4:47","nodeType":"VariableDeclaration","scope":43891,"src":"973:18:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43843,"name":"string","nodeType":"ElementaryTypeName","src":"973:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":43849,"initialValue":{"arguments":[{"id":43847,"name":"bBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43830,"src":"1020:6:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":43845,"name":"FuzzLibString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39439,"src":"994:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FuzzLibString_$39439_$","typeString":"type(library FuzzLibString)"}},"id":43846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1008:11:47","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":39306,"src":"994:25:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":43848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"994:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"973:54:47"},{"expression":{"arguments":[{"hexValue":"4572726f723a2061203d7e2062206e6f7420736174697366696564205b75696e745d","id":43853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1048:36:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_1640b3df9ed5c81b9acb9813c8135bd5ac80b4dca16c35ecc4999bc5e0f97021","typeString":"literal_string \"Error: a =~ b not satisfied [uint]\""},"value":"Error: a =~ b not satisfied [uint]"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1640b3df9ed5c81b9acb9813c8135bd5ac80b4dca16c35ecc4999bc5e0f97021","typeString":"literal_string \"Error: a =~ b not satisfied [uint]\""}],"expression":{"id":43850,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1041:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1044:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41517,"src":"1041:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) external"}},"id":43854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1041:44:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43855,"nodeType":"ExpressionStatement","src":"1041:44:47"},{"expression":{"arguments":[{"hexValue":"20202056616c75652061","id":43859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1106:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_6c4e379321e4807c299828aab1f3faa75efa92eb18da02ef209356d313a3c5d5","typeString":"literal_string \"   Value a\""},"value":"   Value a"},{"id":43860,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43791,"src":"1120:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6c4e379321e4807c299828aab1f3faa75efa92eb18da02ef209356d313a3c5d5","typeString":"literal_string \"   Value a\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43856,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1099:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1102:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"1099:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":43861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1099:23:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43862,"nodeType":"ExpressionStatement","src":"1099:23:47"},{"expression":{"arguments":[{"hexValue":"20202056616c75652062","id":43866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1143:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_79989866c8ab75893d915d749ce45efde022fd3eba505f6b736b4972ba31b69a","typeString":"literal_string \"   Value b\""},"value":"   Value b"},{"id":43867,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43793,"src":"1157:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_79989866c8ab75893d915d749ce45efde022fd3eba505f6b736b4972ba31b69a","typeString":"literal_string \"   Value b\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43863,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1136:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1139:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"1136:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":43868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1136:23:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43869,"nodeType":"ExpressionStatement","src":"1136:23:47"},{"expression":{"arguments":[{"hexValue":"204d61782044656c7461","id":43873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1180:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd2884c74a25327f5cafe8471ed73da28ba1991b65dde72feb1cd4f78f5dc2a5","typeString":"literal_string \" Max Delta\""},"value":" Max Delta"},{"id":43874,"name":"maxDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43795,"src":"1194:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cd2884c74a25327f5cafe8471ed73da28ba1991b65dde72feb1cd4f78f5dc2a5","typeString":"literal_string \" Max Delta\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43870,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1173:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1176:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"1173:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":43875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1173:30:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43876,"nodeType":"ExpressionStatement","src":"1173:30:47"},{"expression":{"arguments":[{"hexValue":"202020202044656c7461","id":43880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1224:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_39d8d5e74991bbc141eb1ca770e60e69523d5c43706b72685708d217b293c55f","typeString":"literal_string \"     Delta\""},"value":"     Delta"},{"id":43881,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43801,"src":"1238:2:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39d8d5e74991bbc141eb1ca770e60e69523d5c43706b72685708d217b293c55f","typeString":"literal_string \"     Delta\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43877,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1217:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1220:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"1217:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":43882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1217:24:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43883,"nodeType":"ExpressionStatement","src":"1217:24:47"},{"expression":{"arguments":[{"hexValue":"66616c7365","id":43887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1260:5:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":43888,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43797,"src":"1267:6:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":43884,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1255:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1258:1:47","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"1255:4:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":43889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1255:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43890,"nodeType":"ExpressionStatement","src":"1255:19:47"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"assertApproxEq","nameLocation":"589:14:47","parameters":{"id":43798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43791,"mutability":"mutable","name":"a","nameLocation":"612:1:47","nodeType":"VariableDeclaration","scope":43894,"src":"604:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43790,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43793,"mutability":"mutable","name":"b","nameLocation":"623:1:47","nodeType":"VariableDeclaration","scope":43894,"src":"615:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43792,"name":"uint256","nodeType":"ElementaryTypeName","src":"615:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43795,"mutability":"mutable","name":"maxDelta","nameLocation":"634:8:47","nodeType":"VariableDeclaration","scope":43894,"src":"626:16:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43794,"name":"uint256","nodeType":"ElementaryTypeName","src":"626:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43797,"mutability":"mutable","name":"reason","nameLocation":"658:6:47","nodeType":"VariableDeclaration","scope":43894,"src":"644:20:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43796,"name":"string","nodeType":"ElementaryTypeName","src":"644:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"603:62:47"},"returnParameters":{"id":43799,"nodeType":"ParameterList","parameters":[],"src":"675:0:47"},"scope":44162,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":43999,"nodeType":"FunctionDefinition","src":"1297:707:47","nodes":[],"body":{"id":43998,"nodeType":"Block","src":"1389:615:47","nodes":[],"statements":[{"assignments":[43906],"declarations":[{"constant":false,"id":43906,"mutability":"mutable","name":"dt","nameLocation":"1406:2:47","nodeType":"VariableDeclaration","scope":43998,"src":"1399:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":43905,"name":"int256","nodeType":"ElementaryTypeName","src":"1399:6:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":43907,"nodeType":"VariableDeclarationStatement","src":"1399:9:47"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":43910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43908,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43896,"src":"1422:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":43909,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43898,"src":"1427:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1422:6:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":43921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43917,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43906,"src":"1455:2:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":43920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43918,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43898,"src":"1460:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":43919,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43896,"src":"1464:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1460:5:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1455:10:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":43922,"nodeType":"ExpressionStatement","src":"1455:10:47"},"id":43923,"nodeType":"IfStatement","src":"1418:47:47","trueBody":{"expression":{"id":43915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43911,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43906,"src":"1430:2:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":43914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43912,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43896,"src":"1435:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":43913,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43898,"src":"1439:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1435:5:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1430:10:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":43916,"nodeType":"ExpressionStatement","src":"1430:10:47"}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":43926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":43924,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43906,"src":"1479:2:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":43925,"name":"maxDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43900,"src":"1484:8:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1479:13:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":43997,"nodeType":"IfStatement","src":"1475:523:47","trueBody":{"id":43996,"nodeType":"Block","src":"1494:504:47","statements":[{"assignments":[43928],"declarations":[{"constant":false,"id":43928,"mutability":"mutable","name":"aBytes","nameLocation":"1521:6:47","nodeType":"VariableDeclaration","scope":43996,"src":"1508:19:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43927,"name":"bytes","nodeType":"ElementaryTypeName","src":"1508:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":43933,"initialValue":{"arguments":[{"id":43931,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43896,"src":"1547:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":43929,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1530:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":43930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1534:12:47","memberName":"encodePacked","nodeType":"MemberAccess","src":"1530:16:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1530:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1508:41:47"},{"assignments":[43935],"declarations":[{"constant":false,"id":43935,"mutability":"mutable","name":"bBytes","nameLocation":"1576:6:47","nodeType":"VariableDeclaration","scope":43996,"src":"1563:19:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43934,"name":"bytes","nodeType":"ElementaryTypeName","src":"1563:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":43940,"initialValue":{"arguments":[{"id":43938,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43898,"src":"1602:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":43936,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1585:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":43937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1589:12:47","memberName":"encodePacked","nodeType":"MemberAccess","src":"1585:16:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1585:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1563:41:47"},{"assignments":[43942],"declarations":[{"constant":false,"id":43942,"mutability":"mutable","name":"aStr","nameLocation":"1632:4:47","nodeType":"VariableDeclaration","scope":43996,"src":"1618:18:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43941,"name":"string","nodeType":"ElementaryTypeName","src":"1618:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":43947,"initialValue":{"arguments":[{"id":43945,"name":"aBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43928,"src":"1665:6:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":43943,"name":"FuzzLibString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39439,"src":"1639:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FuzzLibString_$39439_$","typeString":"type(library FuzzLibString)"}},"id":43944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1653:11:47","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":39306,"src":"1639:25:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":43946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1639:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1618:54:47"},{"assignments":[43949],"declarations":[{"constant":false,"id":43949,"mutability":"mutable","name":"bStr","nameLocation":"1700:4:47","nodeType":"VariableDeclaration","scope":43996,"src":"1686:18:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43948,"name":"string","nodeType":"ElementaryTypeName","src":"1686:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":43954,"initialValue":{"arguments":[{"id":43952,"name":"bBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43935,"src":"1733:6:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":43950,"name":"FuzzLibString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39439,"src":"1707:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FuzzLibString_$39439_$","typeString":"type(library FuzzLibString)"}},"id":43951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:11:47","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":39306,"src":"1707:25:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":43953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1707:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1686:54:47"},{"expression":{"arguments":[{"hexValue":"4572726f723a2061203d7e2062206e6f7420736174697366696564205b75696e745d","id":43958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1761:36:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_1640b3df9ed5c81b9acb9813c8135bd5ac80b4dca16c35ecc4999bc5e0f97021","typeString":"literal_string \"Error: a =~ b not satisfied [uint]\""},"value":"Error: a =~ b not satisfied [uint]"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1640b3df9ed5c81b9acb9813c8135bd5ac80b4dca16c35ecc4999bc5e0f97021","typeString":"literal_string \"Error: a =~ b not satisfied [uint]\""}],"expression":{"id":43955,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1754:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1757:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41517,"src":"1754:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) external"}},"id":43959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1754:44:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43960,"nodeType":"ExpressionStatement","src":"1754:44:47"},{"expression":{"arguments":[{"hexValue":"20202056616c75652061","id":43964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1819:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_6c4e379321e4807c299828aab1f3faa75efa92eb18da02ef209356d313a3c5d5","typeString":"literal_string \"   Value a\""},"value":"   Value a"},{"id":43965,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43896,"src":"1833:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6c4e379321e4807c299828aab1f3faa75efa92eb18da02ef209356d313a3c5d5","typeString":"literal_string \"   Value a\""},{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":43961,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1812:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1815:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41577,"src":"1812:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_int256_$returns$__$","typeString":"function (string memory,int256) external"}},"id":43966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:23:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43967,"nodeType":"ExpressionStatement","src":"1812:23:47"},{"expression":{"arguments":[{"hexValue":"20202056616c75652062","id":43971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1856:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_79989866c8ab75893d915d749ce45efde022fd3eba505f6b736b4972ba31b69a","typeString":"literal_string \"   Value b\""},"value":"   Value b"},{"id":43972,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43898,"src":"1870:1:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_79989866c8ab75893d915d749ce45efde022fd3eba505f6b736b4972ba31b69a","typeString":"literal_string \"   Value b\""},{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":43968,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1849:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1852:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41577,"src":"1849:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_int256_$returns$__$","typeString":"function (string memory,int256) external"}},"id":43973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1849:23:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43974,"nodeType":"ExpressionStatement","src":"1849:23:47"},{"expression":{"arguments":[{"hexValue":"204d61782044656c7461","id":43978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1893:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd2884c74a25327f5cafe8471ed73da28ba1991b65dde72feb1cd4f78f5dc2a5","typeString":"literal_string \" Max Delta\""},"value":" Max Delta"},{"id":43979,"name":"maxDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43900,"src":"1907:8:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cd2884c74a25327f5cafe8471ed73da28ba1991b65dde72feb1cd4f78f5dc2a5","typeString":"literal_string \" Max Delta\""},{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":43975,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1886:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1889:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41577,"src":"1886:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_int256_$returns$__$","typeString":"function (string memory,int256) external"}},"id":43980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:30:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43981,"nodeType":"ExpressionStatement","src":"1886:30:47"},{"expression":{"arguments":[{"hexValue":"202020202044656c7461","id":43985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1937:12:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_39d8d5e74991bbc141eb1ca770e60e69523d5c43706b72685708d217b293c55f","typeString":"literal_string \"     Delta\""},"value":"     Delta"},{"id":43986,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43906,"src":"1951:2:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39d8d5e74991bbc141eb1ca770e60e69523d5c43706b72685708d217b293c55f","typeString":"literal_string \"     Delta\""},{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":43982,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1930:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1933:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41577,"src":"1930:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_int256_$returns$__$","typeString":"function (string memory,int256) external"}},"id":43987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1930:24:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43988,"nodeType":"ExpressionStatement","src":"1930:24:47"},{"expression":{"arguments":[{"hexValue":"66616c7365","id":43992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1973:5:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":43993,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43902,"src":"1980:6:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":43989,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"1968:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":43991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1971:1:47","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"1968:4:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":43994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1968:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43995,"nodeType":"ExpressionStatement","src":"1968:19:47"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"assertApproxEq","nameLocation":"1306:14:47","parameters":{"id":43903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43896,"mutability":"mutable","name":"a","nameLocation":"1328:1:47","nodeType":"VariableDeclaration","scope":43999,"src":"1321:8:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":43895,"name":"int256","nodeType":"ElementaryTypeName","src":"1321:6:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":43898,"mutability":"mutable","name":"b","nameLocation":"1338:1:47","nodeType":"VariableDeclaration","scope":43999,"src":"1331:8:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":43897,"name":"int256","nodeType":"ElementaryTypeName","src":"1331:6:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":43900,"mutability":"mutable","name":"maxDelta","nameLocation":"1348:8:47","nodeType":"VariableDeclaration","scope":43999,"src":"1341:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":43899,"name":"int256","nodeType":"ElementaryTypeName","src":"1341:6:47","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":43902,"mutability":"mutable","name":"reason","nameLocation":"1372:6:47","nodeType":"VariableDeclaration","scope":43999,"src":"1358:20:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43901,"name":"string","nodeType":"ElementaryTypeName","src":"1358:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1320:59:47"},"returnParameters":{"id":43904,"nodeType":"ParameterList","parameters":[],"src":"1389:0:47"},"scope":44162,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":44096,"nodeType":"FunctionDefinition","src":"2010:714:47","nodes":[],"body":{"id":44095,"nodeType":"Block","src":"2139:585:47","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44010,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44001,"src":"2153:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":44011,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44003,"src":"2158:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:6:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44034,"nodeType":"IfStatement","src":"2149:181:47","trueBody":{"id":44033,"nodeType":"Block","src":"2161:169:47","statements":[{"expression":{"arguments":[{"hexValue":"74727565","id":44016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2180:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"496e76617269616e74206f6b2c20636865636b656420666f723a20","id":44017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ebde186dbe0ad0c4d696edf55db7202cb7a6aaa4e8cdaa6b3cfc634b3e59f8a","typeString":"literal_string \"Invariant ok, checked for: \""},"value":"Invariant ok, checked for: "}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ebde186dbe0ad0c4d696edf55db7202cb7a6aaa4e8cdaa6b3cfc634b3e59f8a","typeString":"literal_string \"Invariant ok, checked for: \""}],"expression":{"id":44013,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2175:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2178:1:47","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"2175:4:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:41:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44019,"nodeType":"ExpressionStatement","src":"2175:41:47"},{"expression":{"arguments":[{"id":44023,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44007,"src":"2237:6:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44020,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2230:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2233:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41517,"src":"2230:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) external"}},"id":44024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2230:14:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44025,"nodeType":"ExpressionStatement","src":"2230:14:47"},{"expression":{"arguments":[{"hexValue":"612069732067726561746572207468616e206f7220657175616c20746f2062","id":44029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2265:33:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_51057e73c9ef99ddd195eec0848a52e779b52414c682033d341ae4cb4ad7e847","typeString":"literal_string \"a is greater than or equal to b\""},"value":"a is greater than or equal to b"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_51057e73c9ef99ddd195eec0848a52e779b52414c682033d341ae4cb4ad7e847","typeString":"literal_string \"a is greater than or equal to b\""}],"expression":{"id":44026,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2258:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2261:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41517,"src":"2258:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) external"}},"id":44030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:41:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44031,"nodeType":"ExpressionStatement","src":"2258:41:47"},{"functionReturnParameters":44009,"id":44032,"nodeType":"Return","src":"2313:7:47"}]}},{"assignments":[44036],"declarations":[{"constant":false,"id":44036,"mutability":"mutable","name":"diff","nameLocation":"2348:4:47","nodeType":"VariableDeclaration","scope":44095,"src":"2340:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44035,"name":"uint256","nodeType":"ElementaryTypeName","src":"2340:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":44040,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44037,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44003,"src":"2355:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":44038,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44001,"src":"2359:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2355:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2340:20:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44041,"name":"diff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44036,"src":"2375:4:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":44042,"name":"maxWeiDiff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44005,"src":"2382:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2375:17:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":44093,"nodeType":"Block","src":"2575:143:47","statements":[{"expression":{"arguments":[{"hexValue":"74727565","id":44076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2594:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"496e76617269616e74206f6b2c20636865636b656420666f723a20","id":44077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2600:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ebde186dbe0ad0c4d696edf55db7202cb7a6aaa4e8cdaa6b3cfc634b3e59f8a","typeString":"literal_string \"Invariant ok, checked for: \""},"value":"Invariant ok, checked for: "}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ebde186dbe0ad0c4d696edf55db7202cb7a6aaa4e8cdaa6b3cfc634b3e59f8a","typeString":"literal_string \"Invariant ok, checked for: \""}],"expression":{"id":44073,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2589:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2592:1:47","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"2589:4:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:41:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44079,"nodeType":"ExpressionStatement","src":"2589:41:47"},{"expression":{"arguments":[{"id":44083,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44007,"src":"2651:6:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44080,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2644:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2647:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41517,"src":"2644:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) external"}},"id":44084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2644:14:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44085,"nodeType":"ExpressionStatement","src":"2644:14:47"},{"expression":{"arguments":[{"hexValue":"446966666572656e636520696e207765693a20","id":44089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2679:21:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_d70c608229dd069616c2606de68f6201db1835d48f618a468ce21cdcc5332d0a","typeString":"literal_string \"Difference in wei: \""},"value":"Difference in wei: "},{"id":44090,"name":"diff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44036,"src":"2702:4:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d70c608229dd069616c2606de68f6201db1835d48f618a468ce21cdcc5332d0a","typeString":"literal_string \"Difference in wei: \""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44086,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2672:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"2672:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:35:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44092,"nodeType":"ExpressionStatement","src":"2672:35:47"}]},"id":44094,"nodeType":"IfStatement","src":"2371:347:47","trueBody":{"id":44072,"nodeType":"Block","src":"2394:175:47","statements":[{"expression":{"arguments":[{"hexValue":"613a20","id":44047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2415:5:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5a01f2d0fda5c18914487e2f35c49ad5871795a587f5e51e070e7b4bab02401","typeString":"literal_string \"a: \""},"value":"a: "},{"id":44048,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44001,"src":"2422:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b5a01f2d0fda5c18914487e2f35c49ad5871795a587f5e51e070e7b4bab02401","typeString":"literal_string \"a: \""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44044,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2408:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2411:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"2408:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2408:16:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44050,"nodeType":"ExpressionStatement","src":"2408:16:47"},{"expression":{"arguments":[{"hexValue":"623a20","id":44054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2445:5:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd2766435cf7e6f4d624e80cccf37bc4badd5a9e5b01feede7bc5e52a7c6a496","typeString":"literal_string \"b: \""},"value":"b: "},{"id":44055,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44003,"src":"2452:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cd2766435cf7e6f4d624e80cccf37bc4badd5a9e5b01feede7bc5e52a7c6a496","typeString":"literal_string \"b: \""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44051,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2438:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2441:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"2438:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2438:16:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44057,"nodeType":"ExpressionStatement","src":"2438:16:47"},{"expression":{"arguments":[{"hexValue":"446966666572656e636520696e2077656920697320626967676572207468616e206578706563746564","id":44061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2475:43:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_adece21ffb27a4e949adf8cb4e4c44434a439d3cee2d66d872da41adba226df7","typeString":"literal_string \"Difference in wei is bigger than expected\""},"value":"Difference in wei is bigger than expected"},{"id":44062,"name":"diff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44036,"src":"2520:4:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_adece21ffb27a4e949adf8cb4e4c44434a439d3cee2d66d872da41adba226df7","typeString":"literal_string \"Difference in wei is bigger than expected\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44058,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2468:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2471:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"2468:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2468:57:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44064,"nodeType":"ExpressionStatement","src":"2468:57:47"},{"expression":{"arguments":[{"hexValue":"66616c7365","id":44068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2544:5:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":44069,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44007,"src":"2551:6:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44065,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2539:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2542:1:47","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"2539:4:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2539:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44071,"nodeType":"ExpressionStatement","src":"2539:19:47"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"greaterThanOrEqualWithToleranceWei","nameLocation":"2019:34:47","parameters":{"id":44008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44001,"mutability":"mutable","name":"a","nameLocation":"2062:1:47","nodeType":"VariableDeclaration","scope":44096,"src":"2054:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44000,"name":"uint256","nodeType":"ElementaryTypeName","src":"2054:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44003,"mutability":"mutable","name":"b","nameLocation":"2073:1:47","nodeType":"VariableDeclaration","scope":44096,"src":"2065:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44002,"name":"uint256","nodeType":"ElementaryTypeName","src":"2065:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44005,"mutability":"mutable","name":"maxWeiDiff","nameLocation":"2084:10:47","nodeType":"VariableDeclaration","scope":44096,"src":"2076:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44004,"name":"uint256","nodeType":"ElementaryTypeName","src":"2076:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44007,"mutability":"mutable","name":"reason","nameLocation":"2110:6:47","nodeType":"VariableDeclaration","scope":44096,"src":"2096:20:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":44006,"name":"string","nodeType":"ElementaryTypeName","src":"2096:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2053:64:47"},"returnParameters":{"id":44009,"nodeType":"ParameterList","parameters":[],"src":"2139:0:47"},"scope":44162,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":44161,"nodeType":"FunctionDefinition","src":"2730:365:47","nodes":[],"body":{"id":44160,"nodeType":"Block","src":"2839:256:47","nodes":[],"statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44109,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44098,"src":"2849:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":44110,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44100,"src":"2853:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2849:5:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":44117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":44115,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44098,"src":"2865:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44116,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44100,"src":"2869:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2865:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2849:21:47","trueExpression":{"id":44114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":44112,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44100,"src":"2857:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44113,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44098,"src":"2861:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2857:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44119,"nodeType":"ExpressionStatement","src":"2849:21:47"},{"assignments":[44121],"declarations":[{"constant":false,"id":44121,"mutability":"mutable","name":"delta","nameLocation":"2888:5:47","nodeType":"VariableDeclaration","scope":44160,"src":"2880:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2880:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":44127,"initialValue":{"arguments":[{"id":44124,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44098,"src":"2917:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":44125,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44100,"src":"2920:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44122,"name":"stdMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7469,"src":"2896:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_stdMath_$7469_$","typeString":"type(library stdMath)"}},"id":44123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2904:12:47","memberName":"percentDelta","nodeType":"MemberAccess","referencedDeclaration":7439,"src":"2896:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":44126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2896:26:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2880:42:47"},{"expression":{"arguments":[{"hexValue":"613a20","id":44131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2939:5:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5a01f2d0fda5c18914487e2f35c49ad5871795a587f5e51e070e7b4bab02401","typeString":"literal_string \"a: \""},"value":"a: "},{"id":44132,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44098,"src":"2946:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b5a01f2d0fda5c18914487e2f35c49ad5871795a587f5e51e070e7b4bab02401","typeString":"literal_string \"a: \""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44128,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2932:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2935:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"2932:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2932:16:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44134,"nodeType":"ExpressionStatement","src":"2932:16:47"},{"expression":{"arguments":[{"hexValue":"623a20","id":44138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2965:5:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd2766435cf7e6f4d624e80cccf37bc4badd5a9e5b01feede7bc5e52a7c6a496","typeString":"literal_string \"b: \""},"value":"b: "},{"id":44139,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44100,"src":"2972:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cd2766435cf7e6f4d624e80cccf37bc4badd5a9e5b01feede7bc5e52a7c6a496","typeString":"literal_string \"b: \""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44135,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2958:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2961:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"2958:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2958:16:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44141,"nodeType":"ExpressionStatement","src":"2958:16:47"},{"expression":{"arguments":[{"hexValue":"446966666572656e6365202520697320626967676572207468616e206578706563746564","id":44145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2991:38:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_f25db154dffe27f102f24b245ba15c9495a2fd0c2d61e296d7aa4383ba9d850f","typeString":"literal_string \"Difference % is bigger than expected\""},"value":"Difference % is bigger than expected"},{"id":44146,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44121,"src":"3031:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f25db154dffe27f102f24b245ba15c9495a2fd0c2d61e296d7aa4383ba9d850f","typeString":"literal_string \"Difference % is bigger than expected\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44142,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2984:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2987:3:47","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"2984:6:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:53:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44148,"nodeType":"ExpressionStatement","src":"2984:53:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44149,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44121,"src":"3051:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":44150,"name":"maxDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44102,"src":"3059:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3051:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44159,"nodeType":"IfStatement","src":"3047:41:47","trueBody":{"expression":{"arguments":[{"hexValue":"66616c7365","id":44155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3074:5:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":44156,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44104,"src":"3081:6:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44152,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3069:2:47","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3072:1:47","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"3069:4:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3069:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44158,"nodeType":"ExpressionStatement","src":"3069:19:47"}}]},"implemented":true,"kind":"function","modifiers":[],"name":"isApproxEqRel","nameLocation":"2739:13:47","parameters":{"id":44105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44098,"mutability":"mutable","name":"a","nameLocation":"2761:1:47","nodeType":"VariableDeclaration","scope":44161,"src":"2753:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44097,"name":"uint256","nodeType":"ElementaryTypeName","src":"2753:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44100,"mutability":"mutable","name":"b","nameLocation":"2772:1:47","nodeType":"VariableDeclaration","scope":44161,"src":"2764:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44099,"name":"uint256","nodeType":"ElementaryTypeName","src":"2764:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44102,"mutability":"mutable","name":"maxDelta","nameLocation":"2783:8:47","nodeType":"VariableDeclaration","scope":44161,"src":"2775:16:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44101,"name":"uint256","nodeType":"ElementaryTypeName","src":"2775:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44104,"mutability":"mutable","name":"reason","nameLocation":"2807:6:47","nodeType":"VariableDeclaration","scope":44161,"src":"2793:20:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":44103,"name":"string","nodeType":"ElementaryTypeName","src":"2793:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2752:62:47"},"returnParameters":{"id":44108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44161,"src":"2833:4:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44106,"name":"bool","nodeType":"ElementaryTypeName","src":"2833:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2832:6:47"},"scope":44162,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":43784,"name":"PropertiesDescriptions","nameLocations":["367:22:47"],"nodeType":"IdentifierPath","referencedDeclaration":44174,"src":"367:22:47"},"id":43785,"nodeType":"InheritanceSpecifier","src":"367:22:47"},{"baseName":{"id":43786,"name":"BeforeAfter","nameLocations":["391:11:47"],"nodeType":"IdentifierPath","referencedDeclaration":43027,"src":"391:11:47"},"id":43787,"nodeType":"InheritanceSpecifier","src":"391:11:47"},{"baseName":{"id":43788,"name":"FuzzConstants","nameLocations":["404:13:47"],"nodeType":"IdentifierPath","referencedDeclaration":45200,"src":"404:13:47"},"id":43789,"nodeType":"InheritanceSpecifier","src":"404:13:47"}],"canonicalName":"PropertiesBase","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[44162,45200,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"PropertiesBase","nameLocation":"349:14:47","scope":44163,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}]}},"test/fuzzing/properties/PropertiesDescriptions.sol":{"id":48,"ast":{}},"test/fuzzing/properties/PropertiesReverts.sol":{"id":49,"ast":{"absolutePath":"test/fuzzing/properties/PropertiesReverts.sol","id":44625,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzLibString":[39439],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"36:4649:49","nodes":[{"id":44176,"nodeType":"PragmaDirective","src":"36:23:49","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":44177,"nodeType":"ImportDirective","src":"61:30:49","nodes":[],"absolutePath":"test/fuzzing/properties/PropertiesBase.sol","file":"./PropertiesBase.sol","nameLocation":"-1:-1:-1","scope":44625,"sourceUnit":44163,"symbolAliases":[],"unitAlias":""},{"id":44624,"nodeType":"ContractDefinition","src":"93:4591:49","nodes":[{"id":44248,"nodeType":"FunctionDefinition","src":"149:915:49","nodes":[],"body":{"id":44247,"nodeType":"Block","src":"206:858:49","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":44184,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44181,"src":"252:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"263:6:49","memberName":"length","nodeType":"MemberAccess","src":"252:17:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":44186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"273:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"252:22:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44208,"nodeType":"IfStatement","src":"248:267:49","trueBody":{"id":44207,"nodeType":"Block","src":"276:239:49","statements":[{"condition":{"id":44188,"name":"CATCH_EMPTY_REVERTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43055,"src":"294:19:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":44204,"nodeType":"Block","src":"398:86:49","statements":[{"expression":{"arguments":[{"hexValue":"74727565","id":44200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"421:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"526576657274206461746120697320656d7074792c20616c6c6f77656420627920636f6e666967","id":44201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"427:41:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_a5c6e1a7b7d8106df225c049b3c414f4dc3c76b3b5842286e5158c7ccd91eb92","typeString":"literal_string \"Revert data is empty, allowed by config\""},"value":"Revert data is empty, allowed by config"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a5c6e1a7b7d8106df225c049b3c414f4dc3c76b3b5842286e5158c7ccd91eb92","typeString":"literal_string \"Revert data is empty, allowed by config\""}],"expression":{"id":44197,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"416:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"419:1:49","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"416:4:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"416:53:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44203,"nodeType":"ExpressionStatement","src":"416:53:49"}]},"id":44205,"nodeType":"IfStatement","src":"290:194:49","trueBody":{"id":44196,"nodeType":"Block","src":"315:77:49","statements":[{"expression":{"arguments":[{"hexValue":"66616c7365","id":44192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"338:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"456d707479207265766572742064617461206e6f7420616c6c6f776564","id":44193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"345:31:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_dab2baf6e122bfb15936dee0a8ee8b5fdb564f21cd6b9b7af8f5fc0a9dde8662","typeString":"literal_string \"Empty revert data not allowed\""},"value":"Empty revert data not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dab2baf6e122bfb15936dee0a8ee8b5fdb564f21cd6b9b7af8f5fc0a9dde8662","typeString":"literal_string \"Empty revert data not allowed\""}],"expression":{"id":44189,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"333:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"336:1:49","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"333:4:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"333:44:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44195,"nodeType":"ExpressionStatement","src":"333:44:49"}]}},{"functionReturnParameters":44183,"id":44206,"nodeType":"Return","src":"498:7:49"}]}},{"assignments":[44210],"declarations":[{"constant":false,"id":44210,"mutability":"mutable","name":"returnedError","nameLocation":"532:13:49","nodeType":"VariableDeclaration","scope":44247,"src":"525:20:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":44209,"name":"bytes4","nodeType":"ElementaryTypeName","src":"525:6:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":44211,"nodeType":"VariableDeclarationStatement","src":"525:20:49"},{"AST":{"nativeSrc":"564:69:49","nodeType":"YulBlock","src":"564:69:49","statements":[{"nativeSrc":"578:45:49","nodeType":"YulAssignment","src":"578:45:49","value":{"arguments":[{"arguments":[{"name":"returnData","nativeSrc":"605:10:49","nodeType":"YulIdentifier","src":"605:10:49"},{"kind":"number","nativeSrc":"617:4:49","nodeType":"YulLiteral","src":"617:4:49","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"601:3:49","nodeType":"YulIdentifier","src":"601:3:49"},"nativeSrc":"601:21:49","nodeType":"YulFunctionCall","src":"601:21:49"}],"functionName":{"name":"mload","nativeSrc":"595:5:49","nodeType":"YulIdentifier","src":"595:5:49"},"nativeSrc":"595:28:49","nodeType":"YulFunctionCall","src":"595:28:49"},"variableNames":[{"name":"returnedError","nativeSrc":"578:13:49","nodeType":"YulIdentifier","src":"578:13:49"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":44181,"isOffset":false,"isSlot":false,"src":"605:10:49","valueSize":1},{"declaration":44210,"isOffset":false,"isSlot":false,"src":"578:13:49","valueSize":1}],"id":44212,"nodeType":"InlineAssembly","src":"555:78:49"},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":44220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44213,"name":"returnedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44210,"src":"678:13:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"50616e69632875696e7432353629","id":44217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"712:16:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_4e487b71539e0164c9d29506cc725e49342bcac15e0927282bf30fedfe1c7268","typeString":"literal_string \"Panic(uint256)\""},"value":"Panic(uint256)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4e487b71539e0164c9d29506cc725e49342bcac15e0927282bf30fedfe1c7268","typeString":"literal_string \"Panic(uint256)\""}],"id":44216,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"702:9:49","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":44218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"702:27:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":44215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"695:6:49","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":44214,"name":"bytes4","nodeType":"ElementaryTypeName","src":"695:6:49","typeDescriptions":{}}},"id":44219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"695:35:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"678:52:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44227,"nodeType":"IfStatement","src":"674:127:49","trueBody":{"id":44226,"nodeType":"Block","src":"732:69:49","statements":[{"expression":{"arguments":[{"id":44222,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44181,"src":"759:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44221,"name":"_handlePanic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44477,"src":"746:12:49","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":44223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"746:24:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44224,"nodeType":"ExpressionStatement","src":"746:24:49"},{"functionReturnParameters":44183,"id":44225,"nodeType":"Return","src":"784:7:49"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":44235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44228,"name":"returnedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44210,"src":"854:13:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":44232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"888:15:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":44231,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"878:9:49","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":44233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"878:26:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":44230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"871:6:49","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":44229,"name":"bytes4","nodeType":"ElementaryTypeName","src":"871:6:49","typeDescriptions":{}}},"id":44234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"871:34:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"854:51:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44242,"nodeType":"IfStatement","src":"850:126:49","trueBody":{"id":44241,"nodeType":"Block","src":"907:69:49","statements":[{"expression":{"arguments":[{"id":44237,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44181,"src":"934:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44236,"name":"_handleError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44519,"src":"921:12:49","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":44238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"921:24:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44239,"nodeType":"ExpressionStatement","src":"921:24:49"},{"functionReturnParameters":44183,"id":44240,"nodeType":"Return","src":"959:7:49"}]}},{"expression":{"arguments":[{"id":44244,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44181,"src":"1046:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44243,"name":"_handleCustomError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44547,"src":"1027:18:49","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":44245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1027:30:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44246,"nodeType":"ExpressionStatement","src":"1027:30:49"}]},"implemented":true,"kind":"function","modifiers":[],"name":"invariant_ERR","nameLocation":"158:13:49","parameters":{"id":44182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44181,"mutability":"mutable","name":"returnData","nameLocation":"185:10:49","nodeType":"VariableDeclaration","scope":44248,"src":"172:23:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44180,"name":"bytes","nodeType":"ElementaryTypeName","src":"172:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"171:25:49"},"returnParameters":{"id":44183,"nodeType":"ParameterList","parameters":[],"src":"206:0:49"},"scope":44624,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":44286,"nodeType":"FunctionDefinition","src":"1070:320:49","nodes":[],"body":{"id":44285,"nodeType":"Block","src":"1152:238:49","nodes":[],"statements":[{"assignments":[44258],"declarations":[{"constant":false,"id":44258,"mutability":"mutable","name":"panicCodes","nameLocation":"1179:10:49","nodeType":"VariableDeclaration","scope":44285,"src":"1162:27:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":44256,"name":"uint256","nodeType":"ElementaryTypeName","src":"1162:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44257,"nodeType":"ArrayTypeName","src":"1162:9:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":44264,"initialValue":{"arguments":[{"hexValue":"33","id":44262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1206:1:49","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}],"id":44261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1192:13:49","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":44259,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44260,"nodeType":"ArrayTypeName","src":"1196:9:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":44263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1192:16:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1162:46:49"},{"expression":{"id":44269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44265,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44258,"src":"1218:10:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44267,"indexExpression":{"hexValue":"30","id":44266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1229:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1218:13:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44268,"name":"PANIC_ENUM_OUT_OF_BOUNDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45184,"src":"1234:24:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1218:40:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44270,"nodeType":"ExpressionStatement","src":"1218:40:49"},{"expression":{"id":44275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44271,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44258,"src":"1268:10:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44273,"indexExpression":{"hexValue":"31","id":44272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1279:1:49","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1268:13:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44274,"name":"PANIC_POP_EMPTY_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45190,"src":"1284:21:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1268:37:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44276,"nodeType":"ExpressionStatement","src":"1268:37:49"},{"expression":{"id":44281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44277,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44258,"src":"1315:10:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44279,"indexExpression":{"hexValue":"32","id":44278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1326:1:49","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1315:13:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44280,"name":"PANIC_ARRAY_OUT_OF_BOUNDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45193,"src":"1331:25:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1315:41:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44282,"nodeType":"ExpressionStatement","src":"1315:41:49"},{"expression":{"id":44283,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44258,"src":"1373:10:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":44253,"id":44284,"nodeType":"Return","src":"1366:17:49"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_getAllowedPanicCodes","nameLocation":"1079:21:49","parameters":{"id":44249,"nodeType":"ParameterList","parameters":[],"src":"1100:2:49"},"returnParameters":{"id":44253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44286,"src":"1134:16:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":44250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1134:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44251,"nodeType":"ArrayTypeName","src":"1134:9:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1133:18:49"},"scope":44624,"stateMutability":"pure","virtual":true,"visibility":"internal"},{"id":44306,"nodeType":"FunctionDefinition","src":"1396:276:49","nodes":[],"body":{"id":44305,"nodeType":"Block","src":"1479:193:49","nodes":[],"statements":[{"assignments":[44296],"declarations":[{"constant":false,"id":44296,"mutability":"mutable","name":"allowedErrors","nameLocation":"1505:13:49","nodeType":"VariableDeclaration","scope":44305,"src":"1489:29:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":44294,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1489:6:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":44295,"nodeType":"ArrayTypeName","src":"1489:8:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"id":44302,"initialValue":{"arguments":[{"hexValue":"31","id":44300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1534:1:49","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":44299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1521:12:49","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes4[] memory)"},"typeName":{"baseType":{"id":44297,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1525:6:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":44298,"nodeType":"ArrayTypeName","src":"1525:8:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}}},"id":44301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1521:15:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1489:47:49"},{"expression":{"id":44303,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44296,"src":"1652:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"functionReturnParameters":44291,"id":44304,"nodeType":"Return","src":"1645:20:49"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_getAllowedCustomErrors","nameLocation":"1405:23:49","parameters":{"id":44287,"nodeType":"ParameterList","parameters":[],"src":"1428:2:49"},"returnParameters":{"id":44291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44306,"src":"1462:15:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":44288,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1462:6:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":44289,"nodeType":"ArrayTypeName","src":"1462:8:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"1461:17:49"},"scope":44624,"stateMutability":"pure","virtual":true,"visibility":"internal"},{"id":44407,"nodeType":"FunctionDefinition","src":"1678:781:49","nodes":[],"body":{"id":44406,"nodeType":"Block","src":"1770:689:49","nodes":[],"statements":[{"assignments":[44317],"declarations":[{"constant":false,"id":44317,"mutability":"mutable","name":"allowedErrors","nameLocation":"1795:13:49","nodeType":"VariableDeclaration","scope":44406,"src":"1780:28:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":44315,"name":"bytes","nodeType":"ElementaryTypeName","src":"1780:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":44316,"nodeType":"ArrayTypeName","src":"1780:7:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":44323,"initialValue":{"arguments":[{"hexValue":"39","id":44321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1823:1:49","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"}],"id":44320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1811:11:49","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":44318,"name":"bytes","nodeType":"ElementaryTypeName","src":"1815:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":44319,"nodeType":"ArrayTypeName","src":"1815:7:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":44322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1811:14:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1780:45:49"},{"expression":{"id":44328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44324,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"1835:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44326,"indexExpression":{"hexValue":"30","id":44325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1849:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1835:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44327,"name":"INSUFFICIENT_ALLOWANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45085,"src":"1854:22:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1835:41:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44329,"nodeType":"ExpressionStatement","src":"1835:41:49"},{"expression":{"id":44334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44330,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"1886:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44332,"indexExpression":{"hexValue":"31","id":44331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1900:1:49","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1886:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44333,"name":"TRANSFER_FROM_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45097,"src":"1905:18:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1886:37:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44335,"nodeType":"ExpressionStatement","src":"1886:37:49"},{"expression":{"id":44340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44336,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"1933:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44338,"indexExpression":{"hexValue":"32","id":44337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1947:1:49","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1933:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44339,"name":"TRANSFER_TO_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45109,"src":"1952:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1933:35:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44341,"nodeType":"ExpressionStatement","src":"1933:35:49"},{"expression":{"id":44346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44342,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"1978:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44344,"indexExpression":{"hexValue":"33","id":44343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1992:1:49","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1978:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44345,"name":"APPROVE_TO_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45121,"src":"1997:15:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1978:34:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44347,"nodeType":"ExpressionStatement","src":"1978:34:49"},{"expression":{"id":44352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44348,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"2022:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44350,"indexExpression":{"hexValue":"34","id":44349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2036:1:49","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2022:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44351,"name":"MINT_TO_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45133,"src":"2041:12:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2022:31:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44353,"nodeType":"ExpressionStatement","src":"2022:31:49"},{"expression":{"id":44358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44354,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"2063:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44356,"indexExpression":{"hexValue":"35","id":44355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2077:1:49","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2063:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44357,"name":"BURN_FROM_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45145,"src":"2082:14:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2063:33:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44359,"nodeType":"ExpressionStatement","src":"2063:33:49"},{"expression":{"id":44364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44360,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"2106:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44362,"indexExpression":{"hexValue":"36","id":44361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2120:1:49","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2106:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44363,"name":"DECREASED_ALLOWANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45157,"src":"2125:19:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2106:38:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44365,"nodeType":"ExpressionStatement","src":"2106:38:49"},{"expression":{"id":44370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44366,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"2154:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44368,"indexExpression":{"hexValue":"37","id":44367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2168:1:49","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2154:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44369,"name":"BURN_EXCEEDS_BALANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45169,"src":"2173:20:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2154:39:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44371,"nodeType":"ExpressionStatement","src":"2154:39:49"},{"expression":{"id":44376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44372,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"2203:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44374,"indexExpression":{"hexValue":"38","id":44373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2217:1:49","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2203:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44375,"name":"EXCEEDS_BALANCE_ERROR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45073,"src":"2222:21:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2203:40:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44377,"nodeType":"ExpressionStatement","src":"2203:40:49"},{"body":{"id":44402,"nodeType":"Block","src":"2305:126:49","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":44397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":44390,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44308,"src":"2333:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44389,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2323:9:49","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":44391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2323:21:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"baseExpression":{"id":44393,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"2358:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44395,"indexExpression":{"id":44394,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44379,"src":"2372:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2358:16:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44392,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2348:9:49","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":44396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:27:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2323:52:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44401,"nodeType":"IfStatement","src":"2319:102:49","trueBody":{"id":44400,"nodeType":"Block","src":"2377:44:49","statements":[{"expression":{"hexValue":"74727565","id":44398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2402:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":44312,"id":44399,"nodeType":"Return","src":"2395:11:49"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44382,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44379,"src":"2274:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":44383,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44317,"src":"2278:13:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2292:6:49","memberName":"length","nodeType":"MemberAccess","src":"2278:20:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2274:24:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44403,"initializationExpression":{"assignments":[44379],"declarations":[{"constant":false,"id":44379,"mutability":"mutable","name":"i","nameLocation":"2267:1:49","nodeType":"VariableDeclaration","scope":44403,"src":"2259:9:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44378,"name":"uint256","nodeType":"ElementaryTypeName","src":"2259:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":44381,"initialValue":{"hexValue":"30","id":44380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2271:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2259:13:49"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":44387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2300:3:49","subExpression":{"id":44386,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44379,"src":"2300:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44388,"nodeType":"ExpressionStatement","src":"2300:3:49"},"nodeType":"ForStatement","src":"2254:177:49"},{"expression":{"hexValue":"66616c7365","id":44404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2447:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":44312,"id":44405,"nodeType":"Return","src":"2440:12:49"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_isAllowedERC20Error","nameLocation":"1687:20:49","parameters":{"id":44309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44308,"mutability":"mutable","name":"returnData","nameLocation":"1721:10:49","nodeType":"VariableDeclaration","scope":44407,"src":"1708:23:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44307,"name":"bytes","nodeType":"ElementaryTypeName","src":"1708:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1707:25:49"},"returnParameters":{"id":44312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44407,"src":"1764:4:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44310,"name":"bool","nodeType":"ElementaryTypeName","src":"1764:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1763:6:49"},"scope":44624,"stateMutability":"pure","virtual":true,"visibility":"internal"},{"id":44477,"nodeType":"FunctionDefinition","src":"2465:558:49","nodes":[],"body":{"id":44476,"nodeType":"Block","src":"2520:503:49","nodes":[],"statements":[{"assignments":[44413],"declarations":[{"constant":false,"id":44413,"mutability":"mutable","name":"panicCode","nameLocation":"2538:9:49","nodeType":"VariableDeclaration","scope":44476,"src":"2530:17:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44412,"name":"uint256","nodeType":"ElementaryTypeName","src":"2530:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":44417,"initialValue":{"arguments":[{"id":44415,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44409,"src":"2568:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44414,"name":"_extractPanicCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44584,"src":"2550:17:49","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) returns (uint256)"}},"id":44416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2550:29:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2530:49:49"},{"assignments":[44422],"declarations":[{"constant":false,"id":44422,"mutability":"mutable","name":"allowedCodes","nameLocation":"2606:12:49","nodeType":"VariableDeclaration","scope":44476,"src":"2589:29:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":44420,"name":"uint256","nodeType":"ElementaryTypeName","src":"2589:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44421,"nodeType":"ArrayTypeName","src":"2589:9:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":44425,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":44423,"name":"_getAllowedPanicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44286,"src":"2621:21:49","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function () pure returns (uint256[] memory)"}},"id":44424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2621:23:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2589:55:49"},{"assignments":[44427],"declarations":[{"constant":false,"id":44427,"mutability":"mutable","name":"isAllowed","nameLocation":"2659:9:49","nodeType":"VariableDeclaration","scope":44476,"src":"2654:14:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44426,"name":"bool","nodeType":"ElementaryTypeName","src":"2654:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":44429,"initialValue":{"hexValue":"66616c7365","id":44428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2671:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"2654:22:49"},{"body":{"id":44453,"nodeType":"Block","src":"2737:130:49","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44441,"name":"panicCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44413,"src":"2755:9:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":44442,"name":"allowedCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44422,"src":"2768:12:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44444,"indexExpression":{"id":44443,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44431,"src":"2781:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2768:15:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2755:28:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44452,"nodeType":"IfStatement","src":"2751:106:49","trueBody":{"id":44451,"nodeType":"Block","src":"2785:72:49","statements":[{"expression":{"id":44448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":44446,"name":"isAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44427,"src":"2803:9:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":44447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2815:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2803:16:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44449,"nodeType":"ExpressionStatement","src":"2803:16:49"},{"id":44450,"nodeType":"Break","src":"2837:5:49"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44434,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44431,"src":"2707:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":44435,"name":"allowedCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44422,"src":"2711:12:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2724:6:49","memberName":"length","nodeType":"MemberAccess","src":"2711:19:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2707:23:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44454,"initializationExpression":{"assignments":[44431],"declarations":[{"constant":false,"id":44431,"mutability":"mutable","name":"i","nameLocation":"2700:1:49","nodeType":"VariableDeclaration","scope":44454,"src":"2692:9:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44430,"name":"uint256","nodeType":"ElementaryTypeName","src":"2692:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":44433,"initialValue":{"hexValue":"30","id":44432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2704:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2692:13:49"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":44439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2732:3:49","subExpression":{"id":44438,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44431,"src":"2732:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44440,"nodeType":"ExpressionStatement","src":"2732:3:49"},"nodeType":"ForStatement","src":"2687:180:49"},{"expression":{"arguments":[{"hexValue":"50616e696320636f6465","id":44458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2884:12:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_4b36c02528e590b5fe14e98617dd6bfbcfcc927933990072f3a754ce2cad7d85","typeString":"literal_string \"Panic code\""},"value":"Panic code"},{"arguments":[{"id":44461,"name":"panicCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44413,"src":"2906:9:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":44460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2898:7:49","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":44459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2898:7:49","typeDescriptions":{}}},"id":44462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2898:18:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4b36c02528e590b5fe14e98617dd6bfbcfcc927933990072f3a754ce2cad7d85","typeString":"literal_string \"Panic code\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":44455,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2877:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2880:3:49","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41622,"src":"2877:6:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_bytes32_$returns$__$","typeString":"function (string memory,bytes32) external"}},"id":44463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2877:40:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44464,"nodeType":"ExpressionStatement","src":"2877:40:49"},{"condition":{"id":44466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2931:10:49","subExpression":{"id":44465,"name":"isAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44427,"src":"2932:9:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44475,"nodeType":"IfStatement","src":"2927:90:49","trueBody":{"id":44474,"nodeType":"Block","src":"2943:74:49","statements":[{"expression":{"arguments":[{"hexValue":"66616c7365","id":44470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2962:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"446973616c6c6f7765642050616e696320636f646520656e636f756e746572656421","id":44471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2969:36:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_64236eb4acc2eeab5c4375db12dc1e39646b1ce648e24e9e27db2b1ee1a3170b","typeString":"literal_string \"Disallowed Panic code encountered!\""},"value":"Disallowed Panic code encountered!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64236eb4acc2eeab5c4375db12dc1e39646b1ce648e24e9e27db2b1ee1a3170b","typeString":"literal_string \"Disallowed Panic code encountered!\""}],"expression":{"id":44467,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"2957:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2960:1:49","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"2957:4:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:49:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44473,"nodeType":"ExpressionStatement","src":"2957:49:49"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"_handlePanic","nameLocation":"2474:12:49","parameters":{"id":44410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44409,"mutability":"mutable","name":"returnData","nameLocation":"2500:10:49","nodeType":"VariableDeclaration","scope":44477,"src":"2487:23:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44408,"name":"bytes","nodeType":"ElementaryTypeName","src":"2487:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2486:25:49"},"returnParameters":{"id":44411,"nodeType":"ParameterList","parameters":[],"src":"2520:0:49"},"scope":44624,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":44519,"nodeType":"FunctionDefinition","src":"3029:415:49","nodes":[],"body":{"id":44518,"nodeType":"Block","src":"3084:360:49","nodes":[],"statements":[{"assignments":[44483],"declarations":[{"constant":false,"id":44483,"mutability":"mutable","name":"revertMsg","nameLocation":"3108:9:49","nodeType":"VariableDeclaration","scope":44518,"src":"3094:23:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":44482,"name":"string","nodeType":"ElementaryTypeName","src":"3094:6:49","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":44487,"initialValue":{"arguments":[{"id":44485,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44479,"src":"3142:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44484,"name":"_extractRevertMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44623,"src":"3120:21:49","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) returns (string memory)"}},"id":44486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3120:33:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"3094:59:49"},{"expression":{"arguments":[{"hexValue":"4572726f7228737472696e6729207265766572742072657475726e446174613a20","id":44491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3170:35:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_b516efedba07536c700fd4319359641062dff41ba86dcb199e5530799dd58a35","typeString":"literal_string \"Error(string) revert returnData: \""},"value":"Error(string) revert returnData: "},{"id":44492,"name":"revertMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44483,"src":"3207:9:49","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b516efedba07536c700fd4319359641062dff41ba86dcb199e5530799dd58a35","typeString":"literal_string \"Error(string) revert returnData: \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44488,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3163:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3166:3:49","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41532,"src":"3163:6:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory) external"}},"id":44493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3163:54:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44494,"nodeType":"ExpressionStatement","src":"3163:54:49"},{"condition":{"arguments":[{"id":44496,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44479,"src":"3253:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44495,"name":"_isAllowedERC20Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44407,"src":"3232:20:49","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":44497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3232:32:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44507,"nodeType":"IfStatement","src":"3228:127:49","trueBody":{"id":44506,"nodeType":"Block","src":"3266:89:49","statements":[{"expression":{"arguments":[{"hexValue":"4552433230206572726f7220656e636f756e7465726564","id":44501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3287:25:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_1af89c7f1ecf14e045229bd0af694608155272b2eda44d039eb673785cc5e890","typeString":"literal_string \"ERC20 error encountered\""},"value":"ERC20 error encountered"},{"id":44502,"name":"revertMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44483,"src":"3314:9:49","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1af89c7f1ecf14e045229bd0af694608155272b2eda44d039eb673785cc5e890","typeString":"literal_string \"ERC20 error encountered\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44498,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3280:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3283:3:49","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41532,"src":"3280:6:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory) external"}},"id":44503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3280:44:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44504,"nodeType":"ExpressionStatement","src":"3280:44:49"},{"functionReturnParameters":44481,"id":44505,"nodeType":"Return","src":"3338:7:49"}]}},{"condition":{"id":44508,"name":"CATCH_REQUIRE_REVERT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43052,"src":"3369:20:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44517,"nodeType":"IfStatement","src":"3365:73:49","trueBody":{"id":44516,"nodeType":"Block","src":"3391:47:49","statements":[{"expression":{"arguments":[{"hexValue":"66616c7365","id":44512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3410:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":44513,"name":"revertMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44483,"src":"3417:9:49","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44509,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3405:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3408:1:49","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"3405:4:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3405:22:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44515,"nodeType":"ExpressionStatement","src":"3405:22:49"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"_handleError","nameLocation":"3038:12:49","parameters":{"id":44480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44479,"mutability":"mutable","name":"returnData","nameLocation":"3064:10:49","nodeType":"VariableDeclaration","scope":44519,"src":"3051:23:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44478,"name":"bytes","nodeType":"ElementaryTypeName","src":"3051:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3050:25:49"},"returnParameters":{"id":44481,"nodeType":"ParameterList","parameters":[],"src":"3084:0:49"},"scope":44624,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":44547,"nodeType":"FunctionDefinition","src":"3450:346:49","nodes":[],"body":{"id":44546,"nodeType":"Block","src":"3511:285:49","nodes":[],"statements":[{"assignments":[44525],"declarations":[{"constant":false,"id":44525,"mutability":"mutable","name":"returnedError","nameLocation":"3528:13:49","nodeType":"VariableDeclaration","scope":44546,"src":"3521:20:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":44524,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3521:6:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":44526,"nodeType":"VariableDeclarationStatement","src":"3521:20:49"},{"AST":{"nativeSrc":"3560:69:49","nodeType":"YulBlock","src":"3560:69:49","statements":[{"nativeSrc":"3574:45:49","nodeType":"YulAssignment","src":"3574:45:49","value":{"arguments":[{"arguments":[{"name":"returnData","nativeSrc":"3601:10:49","nodeType":"YulIdentifier","src":"3601:10:49"},{"kind":"number","nativeSrc":"3613:4:49","nodeType":"YulLiteral","src":"3613:4:49","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3597:3:49","nodeType":"YulIdentifier","src":"3597:3:49"},"nativeSrc":"3597:21:49","nodeType":"YulFunctionCall","src":"3597:21:49"}],"functionName":{"name":"mload","nativeSrc":"3591:5:49","nodeType":"YulIdentifier","src":"3591:5:49"},"nativeSrc":"3591:28:49","nodeType":"YulFunctionCall","src":"3591:28:49"},"variableNames":[{"name":"returnedError","nativeSrc":"3574:13:49","nodeType":"YulIdentifier","src":"3574:13:49"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":44521,"isOffset":false,"isSlot":false,"src":"3601:10:49","valueSize":1},{"declaration":44525,"isOffset":false,"isSlot":false,"src":"3574:13:49","valueSize":1}],"id":44527,"nodeType":"InlineAssembly","src":"3551:78:49"},{"expression":{"arguments":[{"hexValue":"437573746f6d2070726f746f636f6c206572726f722072657475726e446174613a20","id":44531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3646:36:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_598f38089503cf00a4dfbbff7d71e97d7b998120a23ab328437f7e13e4f35f5a","typeString":"literal_string \"Custom protocol error returnData: \""},"value":"Custom protocol error returnData: "},{"arguments":[{"id":44533,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44521,"src":"3706:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44532,"name":"_extractRevertMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44623,"src":"3684:21:49","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) returns (string memory)"}},"id":44534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3684:33:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_598f38089503cf00a4dfbbff7d71e97d7b998120a23ab328437f7e13e4f35f5a","typeString":"literal_string \"Custom protocol error returnData: \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44528,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3639:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3642:3:49","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41532,"src":"3639:6:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory) external"}},"id":44535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3639:79:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44536,"nodeType":"ExpressionStatement","src":"3639:79:49"},{"expression":{"arguments":[{"id":44540,"name":"returnedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44525,"src":"3740:13:49","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"arguments":[],"expression":{"argumentTypes":[],"id":44541,"name":"_getAllowedCustomErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44306,"src":"3755:23:49","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$","typeString":"function () pure returns (bytes4[] memory)"}},"id":44542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3755:25:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},{"id":44543,"name":"ERR_01","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44173,"src":"3782:6:49","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44537,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3728:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3731:8:49","memberName":"errAllow","nodeType":"MemberAccess","referencedDeclaration":40513,"src":"3728:11:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes4_$_t_array$_t_bytes4_$dyn_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes4,bytes4[] memory,string memory) external"}},"id":44544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3728:61:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44545,"nodeType":"ExpressionStatement","src":"3728:61:49"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_handleCustomError","nameLocation":"3459:18:49","parameters":{"id":44522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44521,"mutability":"mutable","name":"returnData","nameLocation":"3491:10:49","nodeType":"VariableDeclaration","scope":44547,"src":"3478:23:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44520,"name":"bytes","nodeType":"ElementaryTypeName","src":"3478:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3477:25:49"},"returnParameters":{"id":44523,"nodeType":"ParameterList","parameters":[],"src":"3511:0:49"},"scope":44624,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":44584,"nodeType":"FunctionDefinition","src":"3802:420:49","nodes":[],"body":{"id":44583,"nodeType":"Block","src":"3880:342:49","nodes":[],"statements":[{"expression":{"arguments":[{"hexValue":"5245564552542044415441204c454e475448","id":44557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3897:20:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_3765292b651293c32924b936bb25547d5cbe034bdf0bcb47f5883c74e61073c2","typeString":"literal_string \"REVERT DATA LENGTH\""},"value":"REVERT DATA LENGTH"},{"expression":{"id":44558,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44549,"src":"3919:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3930:6:49","memberName":"length","nodeType":"MemberAccess","src":"3919:17:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3765292b651293c32924b936bb25547d5cbe034bdf0bcb47f5883c74e61073c2","typeString":"literal_string \"REVERT DATA LENGTH\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44554,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3890:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3893:3:49","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41562,"src":"3890:6:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256) external"}},"id":44560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3890:47:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44561,"nodeType":"ExpressionStatement","src":"3890:47:49"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":44562,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44549,"src":"3951:10:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3962:6:49","memberName":"length","nodeType":"MemberAccess","src":"3951:17:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3336","id":44564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3971:2:49","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},"src":"3951:22:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44576,"nodeType":"IfStatement","src":"3947:134:49","trueBody":{"id":44575,"nodeType":"Block","src":"3975:106:49","statements":[{"expression":{"arguments":[{"hexValue":"66616c7365","id":44569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3994:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"556e6578706563746564207265766572742064617461206c656e67746820666f722070616e696320636f6465","id":44570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4001:46:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_547ff42095d23024bc3f8bc8869d2980cdde1172f33d8fc96e2d3290c6f7645e","typeString":"literal_string \"Unexpected revert data length for panic code\""},"value":"Unexpected revert data length for panic code"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_547ff42095d23024bc3f8bc8869d2980cdde1172f33d8fc96e2d3290c6f7645e","typeString":"literal_string \"Unexpected revert data length for panic code\""}],"expression":{"id":44566,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"3989:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3992:1:49","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"3989:4:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3989:59:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44572,"nodeType":"ExpressionStatement","src":"3989:59:49"},{"expression":{"hexValue":"30","id":44573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4069:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":44553,"id":44574,"nodeType":"Return","src":"4062:8:49"}]}},{"assignments":[44578],"declarations":[{"constant":false,"id":44578,"mutability":"mutable","name":"panicCode","nameLocation":"4099:9:49","nodeType":"VariableDeclaration","scope":44583,"src":"4091:17:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44577,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":44579,"nodeType":"VariableDeclarationStatement","src":"4091:17:49"},{"AST":{"nativeSrc":"4127:63:49","nodeType":"YulBlock","src":"4127:63:49","statements":[{"nativeSrc":"4141:39:49","nodeType":"YulAssignment","src":"4141:39:49","value":{"arguments":[{"arguments":[{"name":"revertData","nativeSrc":"4164:10:49","nodeType":"YulIdentifier","src":"4164:10:49"},{"kind":"number","nativeSrc":"4176:2:49","nodeType":"YulLiteral","src":"4176:2:49","type":"","value":"36"}],"functionName":{"name":"add","nativeSrc":"4160:3:49","nodeType":"YulIdentifier","src":"4160:3:49"},"nativeSrc":"4160:19:49","nodeType":"YulFunctionCall","src":"4160:19:49"}],"functionName":{"name":"mload","nativeSrc":"4154:5:49","nodeType":"YulIdentifier","src":"4154:5:49"},"nativeSrc":"4154:26:49","nodeType":"YulFunctionCall","src":"4154:26:49"},"variableNames":[{"name":"panicCode","nativeSrc":"4141:9:49","nodeType":"YulIdentifier","src":"4141:9:49"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":44578,"isOffset":false,"isSlot":false,"src":"4141:9:49","valueSize":1},{"declaration":44549,"isOffset":false,"isSlot":false,"src":"4164:10:49","valueSize":1}],"id":44580,"nodeType":"InlineAssembly","src":"4118:72:49"},{"expression":{"id":44581,"name":"panicCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44578,"src":"4206:9:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":44553,"id":44582,"nodeType":"Return","src":"4199:16:49"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_extractPanicCode","nameLocation":"3811:17:49","parameters":{"id":44550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44549,"mutability":"mutable","name":"revertData","nameLocation":"3842:10:49","nodeType":"VariableDeclaration","scope":44584,"src":"3829:23:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44548,"name":"bytes","nodeType":"ElementaryTypeName","src":"3829:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3828:25:49"},"returnParameters":{"id":44553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44552,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44584,"src":"3871:7:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44551,"name":"uint256","nodeType":"ElementaryTypeName","src":"3871:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3870:9:49"},"scope":44624,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":44623,"nodeType":"FunctionDefinition","src":"4228:454:49","nodes":[],"body":{"id":44622,"nodeType":"Block","src":"4317:365:49","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":44591,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44586,"src":"4331:11:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4343:6:49","memberName":"length","nodeType":"MemberAccess","src":"4331:18:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3638","id":44593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4352:2:49","typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"68"},"src":"4331:23:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44612,"nodeType":"IfStatement","src":"4327:219:49","trueBody":{"id":44611,"nodeType":"Block","src":"4356:190:49","statements":[{"expression":{"arguments":[{"hexValue":"526177207265766572742064617461202868657829","id":44598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4377:23:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1a0f39a1080910e497e9ef79823d2b39939b725e939fafc579a2357df67fca7","typeString":"literal_string \"Raw revert data (hex)\""},"value":"Raw revert data (hex)"},{"id":44599,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44586,"src":"4402:11:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a1a0f39a1080910e497e9ef79823d2b39939b725e939fafc579a2357df67fca7","typeString":"literal_string \"Raw revert data (hex)\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":44595,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"4370:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4373:3:49","memberName":"log","nodeType":"MemberAccess","referencedDeclaration":41547,"src":"4370:6:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (string memory,bytes memory) external"}},"id":44600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4370:44:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44601,"nodeType":"ExpressionStatement","src":"4370:44:49"},{"expression":{"arguments":[{"hexValue":"66616c7365","id":44605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4433:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"52657475726e65642064617461206973206e6f7420612076616c696420726576657274206d657373616765","id":44606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4440:45:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_ec2e82306c59f761d4e8c7414fb319bd45e85b3599adfbf444bb736bbf6fa7d5","typeString":"literal_string \"Returned data is not a valid revert message\""},"value":"Returned data is not a valid revert message"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec2e82306c59f761d4e8c7414fb319bd45e85b3599adfbf444bb736bbf6fa7d5","typeString":"literal_string \"Returned data is not a valid revert message\""}],"expression":{"id":44602,"name":"fl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38996,"src":"4428:2:49","typeDescriptions":{"typeIdentifier":"t_contract$_Fuzzlib_$39466","typeString":"contract Fuzzlib"}},"id":44604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4431:1:49","memberName":"t","nodeType":"MemberAccess","referencedDeclaration":39522,"src":"4428:4:49","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) external"}},"id":44607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4428:58:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44608,"nodeType":"ExpressionStatement","src":"4428:58:49"},{"expression":{"hexValue":"496e76616c6964207265766572742064617461206c656e677468","id":44609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4507:28:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_636c825c7397b7cb175d9459cea544d897207f6e8a12a3f33dd74b2986584b6e","typeString":"literal_string \"Invalid revert data length\""},"value":"Invalid revert data length"},"functionReturnParameters":44590,"id":44610,"nodeType":"Return","src":"4500:35:49"}]}},{"AST":{"nativeSrc":"4565:61:49","nodeType":"YulBlock","src":"4565:61:49","statements":[{"nativeSrc":"4579:37:49","nodeType":"YulAssignment","src":"4579:37:49","value":{"arguments":[{"name":"_returnData","nativeSrc":"4598:11:49","nodeType":"YulIdentifier","src":"4598:11:49"},{"kind":"number","nativeSrc":"4611:4:49","nodeType":"YulLiteral","src":"4611:4:49","type":"","value":"0x04"}],"functionName":{"name":"add","nativeSrc":"4594:3:49","nodeType":"YulIdentifier","src":"4594:3:49"},"nativeSrc":"4594:22:49","nodeType":"YulFunctionCall","src":"4594:22:49"},"variableNames":[{"name":"_returnData","nativeSrc":"4579:11:49","nodeType":"YulIdentifier","src":"4579:11:49"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":44586,"isOffset":false,"isSlot":false,"src":"4579:11:49","valueSize":1},{"declaration":44586,"isOffset":false,"isSlot":false,"src":"4598:11:49","valueSize":1}],"id":44613,"nodeType":"InlineAssembly","src":"4556:70:49"},{"expression":{"arguments":[{"id":44616,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44586,"src":"4653:11:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":44618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4667:6:49","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":44617,"name":"string","nodeType":"ElementaryTypeName","src":"4667:6:49","typeDescriptions":{}}}],"id":44619,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4666:8:49","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"id":44614,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4642:3:49","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":44615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4646:6:49","memberName":"decode","nodeType":"MemberAccess","src":"4642:10:49","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":44620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4642:33:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":44590,"id":44621,"nodeType":"Return","src":"4635:40:49"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_extractRevertMessage","nameLocation":"4237:21:49","parameters":{"id":44587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44586,"mutability":"mutable","name":"_returnData","nameLocation":"4272:11:49","nodeType":"VariableDeclaration","scope":44623,"src":"4259:24:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44585,"name":"bytes","nodeType":"ElementaryTypeName","src":"4259:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4258:26:49"},"returnParameters":{"id":44590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44623,"src":"4302:13:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":44588,"name":"string","nodeType":"ElementaryTypeName","src":"4302:6:49","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4301:15:49"},"scope":44624,"stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"abstract":true,"baseContracts":[{"baseName":{"id":44178,"name":"PropertiesBase","nameLocations":["128:14:49"],"nodeType":"IdentifierPath","referencedDeclaration":44162,"src":"128:14:49"},"id":44179,"nodeType":"InheritanceSpecifier","src":"128:14:49"}],"canonicalName":"RevertHandler","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[44624,44162,45200,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"RevertHandler","nameLocation":"111:13:49","scope":44625,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}],"license":"GPL-3.0"}},"test/fuzzing/properties/Properties_ERR.sol":{"id":50,"ast":{"absolutePath":"test/fuzzing/properties/Properties_ERR.sol","id":44799,"exportedSymbols":{"BeforeAfter":[43027],"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzConstants":[45200],"FuzzLibString":[39439],"FuzzSetup":[42753],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"PropertiesBase":[44162],"PropertiesDescriptions":[44174],"Properties_ERR":[44798],"RevertHandler":[44624],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"35:1663:50","nodes":[{"id":44626,"nodeType":"PragmaDirective","src":"35:23:50","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":44627,"nodeType":"ImportDirective","src":"60:33:50","nodes":[],"absolutePath":"test/fuzzing/properties/PropertiesReverts.sol","file":"./PropertiesReverts.sol","nameLocation":"-1:-1:-1","scope":44799,"sourceUnit":44625,"symbolAliases":[],"unitAlias":""},{"id":44798,"nodeType":"ContractDefinition","src":"95:1602:50","nodes":[{"id":44674,"nodeType":"FunctionDefinition","src":"249:404:50","nodes":[],"body":{"id":44673,"nodeType":"Block","src":"340:313:50","nodes":[],"statements":[{"assignments":[44640],"declarations":[{"constant":false,"id":44640,"mutability":"mutable","name":"panicCodes","nameLocation":"367:10:50","nodeType":"VariableDeclaration","scope":44673,"src":"350:27:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":44638,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44639,"nodeType":"ArrayTypeName","src":"350:9:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":44646,"initialValue":{"arguments":[{"hexValue":"34","id":44644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"394:1:50","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"id":44643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"380:13:50","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":44641,"name":"uint256","nodeType":"ElementaryTypeName","src":"384:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44642,"nodeType":"ArrayTypeName","src":"384:9:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":44645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"380:16:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"350:46:50"},{"expression":{"id":44651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44647,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44640,"src":"406:10:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44649,"indexExpression":{"hexValue":"30","id":44648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"417:1:50","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"406:13:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44650,"name":"PANIC_ENUM_OUT_OF_BOUNDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45184,"src":"422:24:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"406:40:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44652,"nodeType":"ExpressionStatement","src":"406:40:50"},{"expression":{"id":44657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44653,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44640,"src":"456:10:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44655,"indexExpression":{"hexValue":"31","id":44654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"467:1:50","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"456:13:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44656,"name":"PANIC_POP_EMPTY_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45190,"src":"472:21:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"456:37:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44658,"nodeType":"ExpressionStatement","src":"456:37:50"},{"expression":{"id":44663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44659,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44640,"src":"503:10:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44661,"indexExpression":{"hexValue":"32","id":44660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"514:1:50","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"503:13:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44662,"name":"PANIC_ARRAY_OUT_OF_BOUNDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45193,"src":"519:25:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"503:41:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44664,"nodeType":"ExpressionStatement","src":"503:41:50"},{"expression":{"id":44669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44665,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44640,"src":"554:10:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":44667,"indexExpression":{"hexValue":"33","id":44666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"565:1:50","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"554:13:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44668,"name":"PANIC_ARITHMETIC","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45178,"src":"570:16:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"554:32:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44670,"nodeType":"ExpressionStatement","src":"554:32:50"},{"expression":{"id":44671,"name":"panicCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44640,"src":"636:10:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":44635,"id":44672,"nodeType":"Return","src":"629:17:50"}]},"baseFunctions":[44286],"implemented":true,"kind":"function","modifiers":[],"name":"_getAllowedPanicCodes","nameLocation":"258:21:50","overrides":{"id":44631,"nodeType":"OverrideSpecifier","overrides":[],"src":"304:8:50"},"parameters":{"id":44630,"nodeType":"ParameterList","parameters":[],"src":"279:2:50"},"returnParameters":{"id":44635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44674,"src":"322:16:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":44632,"name":"uint256","nodeType":"ElementaryTypeName","src":"322:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44633,"nodeType":"ArrayTypeName","src":"322:9:50","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"321:18:50"},"scope":44798,"stateMutability":"pure","virtual":true,"visibility":"internal"},{"id":44695,"nodeType":"FunctionDefinition","src":"659:240:50","nodes":[],"body":{"id":44694,"nodeType":"Block","src":"751:148:50","nodes":[],"statements":[{"assignments":[44685],"declarations":[{"constant":false,"id":44685,"mutability":"mutable","name":"allowedErrors","nameLocation":"777:13:50","nodeType":"VariableDeclaration","scope":44694,"src":"761:29:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":44683,"name":"bytes4","nodeType":"ElementaryTypeName","src":"761:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":44684,"nodeType":"ArrayTypeName","src":"761:8:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"id":44691,"initialValue":{"arguments":[{"hexValue":"31","id":44689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"806:1:50","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":44688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"793:12:50","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes4[] memory)"},"typeName":{"baseType":{"id":44686,"name":"bytes4","nodeType":"ElementaryTypeName","src":"797:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":44687,"nodeType":"ArrayTypeName","src":"797:8:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}}},"id":44690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:15:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"nodeType":"VariableDeclarationStatement","src":"761:47:50"},{"expression":{"id":44692,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44685,"src":"879:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"functionReturnParameters":44680,"id":44693,"nodeType":"Return","src":"872:20:50"}]},"baseFunctions":[44306],"implemented":true,"kind":"function","modifiers":[],"name":"_getAllowedCustomErrors","nameLocation":"668:23:50","overrides":{"id":44676,"nodeType":"OverrideSpecifier","overrides":[],"src":"716:8:50"},"parameters":{"id":44675,"nodeType":"ParameterList","parameters":[],"src":"691:2:50"},"returnParameters":{"id":44680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44695,"src":"734:15:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":44677,"name":"bytes4","nodeType":"ElementaryTypeName","src":"734:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":44678,"nodeType":"ArrayTypeName","src":"734:8:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"733:17:50"},"scope":44798,"stateMutability":"pure","virtual":true,"visibility":"internal"},{"id":44797,"nodeType":"FunctionDefinition","src":"905:790:50","nodes":[],"body":{"id":44796,"nodeType":"Block","src":"1006:689:50","nodes":[],"statements":[{"assignments":[44707],"declarations":[{"constant":false,"id":44707,"mutability":"mutable","name":"allowedErrors","nameLocation":"1031:13:50","nodeType":"VariableDeclaration","scope":44796,"src":"1016:28:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":44705,"name":"bytes","nodeType":"ElementaryTypeName","src":"1016:5:50","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":44706,"nodeType":"ArrayTypeName","src":"1016:7:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":44713,"initialValue":{"arguments":[{"hexValue":"39","id":44711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1059:1:50","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"}],"id":44710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1047:11:50","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":44708,"name":"bytes","nodeType":"ElementaryTypeName","src":"1051:5:50","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":44709,"nodeType":"ArrayTypeName","src":"1051:7:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":44712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1047:14:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1016:45:50"},{"expression":{"id":44718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44714,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1071:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44716,"indexExpression":{"hexValue":"30","id":44715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1085:1:50","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1071:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44717,"name":"INSUFFICIENT_ALLOWANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45085,"src":"1090:22:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1071:41:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44719,"nodeType":"ExpressionStatement","src":"1071:41:50"},{"expression":{"id":44724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44720,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1122:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44722,"indexExpression":{"hexValue":"31","id":44721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:1:50","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1122:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44723,"name":"TRANSFER_FROM_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45097,"src":"1141:18:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1122:37:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44725,"nodeType":"ExpressionStatement","src":"1122:37:50"},{"expression":{"id":44730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44726,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1169:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44728,"indexExpression":{"hexValue":"32","id":44727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1183:1:50","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1169:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44729,"name":"TRANSFER_TO_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45109,"src":"1188:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1169:35:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44731,"nodeType":"ExpressionStatement","src":"1169:35:50"},{"expression":{"id":44736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44732,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1214:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44734,"indexExpression":{"hexValue":"33","id":44733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1228:1:50","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1214:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44735,"name":"APPROVE_TO_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45121,"src":"1233:15:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1214:34:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44737,"nodeType":"ExpressionStatement","src":"1214:34:50"},{"expression":{"id":44742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44738,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1258:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44740,"indexExpression":{"hexValue":"34","id":44739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1272:1:50","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1258:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44741,"name":"MINT_TO_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45133,"src":"1277:12:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1258:31:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44743,"nodeType":"ExpressionStatement","src":"1258:31:50"},{"expression":{"id":44748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44744,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1299:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44746,"indexExpression":{"hexValue":"35","id":44745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1313:1:50","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1299:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44747,"name":"BURN_FROM_ZERO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45145,"src":"1318:14:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1299:33:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44749,"nodeType":"ExpressionStatement","src":"1299:33:50"},{"expression":{"id":44754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44750,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1342:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44752,"indexExpression":{"hexValue":"36","id":44751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1356:1:50","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1342:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44753,"name":"DECREASED_ALLOWANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45157,"src":"1361:19:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1342:38:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44755,"nodeType":"ExpressionStatement","src":"1342:38:50"},{"expression":{"id":44760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44756,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1390:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44758,"indexExpression":{"hexValue":"37","id":44757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1404:1:50","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1390:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44759,"name":"BURN_EXCEEDS_BALANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45169,"src":"1409:20:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1390:39:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44761,"nodeType":"ExpressionStatement","src":"1390:39:50"},{"expression":{"id":44766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":44762,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1439:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44764,"indexExpression":{"hexValue":"38","id":44763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1453:1:50","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1439:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":44765,"name":"EXCEEDS_BALANCE_ERROR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45073,"src":"1458:21:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1439:40:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":44767,"nodeType":"ExpressionStatement","src":"1439:40:50"},{"body":{"id":44792,"nodeType":"Block","src":"1541:126:50","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":44787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":44780,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44697,"src":"1569:10:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44779,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1559:9:50","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":44781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:21:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"baseExpression":{"id":44783,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1594:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44785,"indexExpression":{"id":44784,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44769,"src":"1608:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1594:16:50","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44782,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1584:9:50","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":44786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1584:27:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1559:52:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44791,"nodeType":"IfStatement","src":"1555:102:50","trueBody":{"id":44790,"nodeType":"Block","src":"1613:44:50","statements":[{"expression":{"hexValue":"74727565","id":44788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1638:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":44702,"id":44789,"nodeType":"Return","src":"1631:11:50"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":44772,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44769,"src":"1510:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":44773,"name":"allowedErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44707,"src":"1514:13:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":44774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1528:6:50","memberName":"length","nodeType":"MemberAccess","src":"1514:20:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1510:24:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44793,"initializationExpression":{"assignments":[44769],"declarations":[{"constant":false,"id":44769,"mutability":"mutable","name":"i","nameLocation":"1503:1:50","nodeType":"VariableDeclaration","scope":44793,"src":"1495:9:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44768,"name":"uint256","nodeType":"ElementaryTypeName","src":"1495:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":44771,"initialValue":{"hexValue":"30","id":44770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1507:1:50","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1495:13:50"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":44777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1536:3:50","subExpression":{"id":44776,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44769,"src":"1536:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":44778,"nodeType":"ExpressionStatement","src":"1536:3:50"},"nodeType":"ForStatement","src":"1490:177:50"},{"expression":{"hexValue":"66616c7365","id":44794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1683:5:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":44702,"id":44795,"nodeType":"Return","src":"1676:12:50"}]},"baseFunctions":[44407],"implemented":true,"kind":"function","modifiers":[],"name":"_isAllowedERC20Error","nameLocation":"914:20:50","overrides":{"id":44699,"nodeType":"OverrideSpecifier","overrides":[],"src":"982:8:50"},"parameters":{"id":44698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44697,"mutability":"mutable","name":"returnData","nameLocation":"948:10:50","nodeType":"VariableDeclaration","scope":44797,"src":"935:23:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44696,"name":"bytes","nodeType":"ElementaryTypeName","src":"935:5:50","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"934:25:50"},"returnParameters":{"id":44702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44701,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44797,"src":"1000:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44700,"name":"bool","nodeType":"ElementaryTypeName","src":"1000:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"999:6:50"},"scope":44798,"stateMutability":"pure","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":44628,"name":"RevertHandler","nameLocations":["131:13:50"],"nodeType":"IdentifierPath","referencedDeclaration":44624,"src":"131:13:50"},"id":44629,"nodeType":"InheritanceSpecifier","src":"131:13:50"}],"canonicalName":"Properties_ERR","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[44798,44624,44162,45200,43027,42753,45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013,44174],"name":"Properties_ERR","nameLocation":"113:14:50","scope":44799,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}],"license":"GPL-3.0"}},"test/fuzzing/utils/FunctionCalls.sol":{"id":51,"ast":{"absolutePath":"test/fuzzing/utils/FunctionCalls.sol","id":45020,"exportedSymbols":{"FunctionCalls":[45019],"FuzzActors":[45059],"FuzzBase":[39013],"FuzzStorageVariables":[43059],"Fuzzlib":[39466],"PlatformCrytic":[42273],"SampleContract":[42819],"StdAssertions":[2695],"StdChains":[3522],"StdCheats":[6375],"StdInvariant":[6735],"StdStorage":[7507],"StdStyle":[10675],"StdUtils":[12053],"Test":[12105],"TestBase":[65],"Vm":[16143],"console":[24267],"console2":[24267],"safeconsole":[38983],"stdError":[6441],"stdJson":[7327],"stdMath":[7469],"stdStorage":[9464],"stdToml":[11267]},"nodeType":"SourceUnit","src":"32:2260:51","nodes":[{"id":44800,"nodeType":"PragmaDirective","src":"32:23:51","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":44801,"nodeType":"ImportDirective","src":"57:48:51","nodes":[],"absolutePath":"lib/fuzzlib/src/FuzzBase.sol","file":"@perimetersec/fuzzlib/src/FuzzBase.sol","nameLocation":"-1:-1:-1","scope":45020,"sourceUnit":39014,"symbolAliases":[],"unitAlias":""},{"id":44802,"nodeType":"ImportDirective","src":"106:45:51","nodes":[],"absolutePath":"test/fuzzing/helpers/FuzzStorageVariables.sol","file":"../helpers/FuzzStorageVariables.sol","nameLocation":"-1:-1:-1","scope":45020,"sourceUnit":43060,"symbolAliases":[],"unitAlias":""},{"id":45019,"nodeType":"ContractDefinition","src":"153:2138:51","nodes":[{"id":44810,"nodeType":"EventDefinition","src":"216:46:51","nodes":[],"anonymous":false,"eventSelector":"5b79e5e399858b8631a3a68acc1e6aafebcd8cfb9a8090eadd55191ab84b4481","name":"SampleFunctionCall","nameLocation":"222:18:51","parameters":{"id":44809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44808,"indexed":false,"mutability":"mutable","name":"sampleInput","nameLocation":"249:11:51","nodeType":"VariableDeclaration","scope":44810,"src":"241:19:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44807,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"240:21:51"}},{"id":44848,"nodeType":"FunctionDefinition","src":"268:344:51","nodes":[],"body":{"id":44847,"nodeType":"Block","src":"375:237:51","nodes":[],"statements":[{"eventCall":{"arguments":[{"id":44820,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44812,"src":"409:11:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":44819,"name":"SampleFunctionCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44810,"src":"390:18:51","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":44821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"390:31:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44822,"nodeType":"EmitStatement","src":"385:36:51"},{"expression":{"arguments":[{"id":44826,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"441:12:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":44823,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"432:2:51","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":44825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"435:5:51","memberName":"prank","nodeType":"MemberAccess","referencedDeclaration":15742,"src":"432:8:51","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":44827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"432:22:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44828,"nodeType":"ExpressionStatement","src":"432:22:51"},{"expression":{"id":44845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":44829,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44815,"src":"465:7:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":44830,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44817,"src":"474:10:51","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":44831,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"464:21:51","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"expression":{"id":44839,"name":"SampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42819,"src":"552:14:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SampleContract_$42819_$","typeString":"type(contract SampleContract)"}},"id":44840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"567:14:51","memberName":"sampleFunction","nodeType":"MemberAccess","referencedDeclaration":42771,"src":"552:29:51","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_uint256_$returns$__$","typeString":"function SampleContract.sampleFunction(uint256)"}},"id":44841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"582:8:51","memberName":"selector","nodeType":"MemberAccess","src":"552:38:51","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":44842,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44812,"src":"592:11:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44837,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"529:3:51","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":44838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"533:18:51","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"529:22:51","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":44843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"529:75:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":44834,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"508:14:51","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":44833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"500:7:51","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":44832,"name":"address","nodeType":"ElementaryTypeName","src":"500:7:51","typeDescriptions":{}}},"id":44835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"500:23:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":44836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"524:4:51","memberName":"call","nodeType":"MemberAccess","src":"500:28:51","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":44844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"500:105:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"464:141:51","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44846,"nodeType":"ExpressionStatement","src":"464:141:51"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_sampleFunctionCall","nameLocation":"277:19:51","parameters":{"id":44813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44812,"mutability":"mutable","name":"sampleInput","nameLocation":"305:11:51","nodeType":"VariableDeclaration","scope":44848,"src":"297:19:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44811,"name":"uint256","nodeType":"ElementaryTypeName","src":"297:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"296:21:51"},"returnParameters":{"id":44818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44815,"mutability":"mutable","name":"success","nameLocation":"341:7:51","nodeType":"VariableDeclaration","scope":44848,"src":"336:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44814,"name":"bool","nodeType":"ElementaryTypeName","src":"336:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44817,"mutability":"mutable","name":"returnData","nameLocation":"363:10:51","nodeType":"VariableDeclaration","scope":44848,"src":"350:23:51","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44816,"name":"bytes","nodeType":"ElementaryTypeName","src":"350:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"335:39:51"},"scope":45019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":44882,"nodeType":"FunctionDefinition","src":"618:318:51","nodes":[],"body":{"id":44881,"nodeType":"Block","src":"729:207:51","nodes":[],"statements":[{"expression":{"arguments":[{"id":44860,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"748:12:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":44857,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"739:2:51","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":44859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"742:5:51","memberName":"prank","nodeType":"MemberAccess","referencedDeclaration":15742,"src":"739:8:51","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":44861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"739:22:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44862,"nodeType":"ExpressionStatement","src":"739:22:51"},{"expression":{"id":44879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":44863,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44853,"src":"772:7:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":44864,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44855,"src":"781:10:51","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":44865,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"771:21:51","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"expression":{"id":44873,"name":"SampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42819,"src":"860:14:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SampleContract_$42819_$","typeString":"type(contract SampleContract)"}},"id":44874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"875:21:51","memberName":"sampleFailWithRequire","nodeType":"MemberAccess","referencedDeclaration":42780,"src":"860:36:51","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$__$returns$__$","typeString":"function SampleContract.sampleFailWithRequire()"}},"id":44875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"897:8:51","memberName":"selector","nodeType":"MemberAccess","src":"860:45:51","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":44876,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44850,"src":"907:11:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":44871,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"837:3:51","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":44872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"841:18:51","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"837:22:51","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":44877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:82:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":44868,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"803:14:51","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":44867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"795:7:51","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":44866,"name":"address","nodeType":"ElementaryTypeName","src":"795:7:51","typeDescriptions":{}}},"id":44869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"795:23:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":44870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"819:4:51","memberName":"call","nodeType":"MemberAccess","src":"795:28:51","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":44878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"795:134:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"771:158:51","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44880,"nodeType":"ExpressionStatement","src":"771:158:51"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_sampleFailWithRequireCall","nameLocation":"627:26:51","parameters":{"id":44851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44850,"mutability":"mutable","name":"sampleInput","nameLocation":"659:11:51","nodeType":"VariableDeclaration","scope":44882,"src":"654:16:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44849,"name":"bool","nodeType":"ElementaryTypeName","src":"654:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"653:18:51"},"returnParameters":{"id":44856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44853,"mutability":"mutable","name":"success","nameLocation":"695:7:51","nodeType":"VariableDeclaration","scope":44882,"src":"690:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44852,"name":"bool","nodeType":"ElementaryTypeName","src":"690:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44855,"mutability":"mutable","name":"returnData","nameLocation":"717:10:51","nodeType":"VariableDeclaration","scope":44882,"src":"704:23:51","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44854,"name":"bytes","nodeType":"ElementaryTypeName","src":"704:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"689:39:51"},"scope":45019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":44916,"nodeType":"FunctionDefinition","src":"942:347:51","nodes":[],"body":{"id":44915,"nodeType":"Block","src":"1078:211:51","nodes":[],"statements":[{"expression":{"arguments":[{"id":44894,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"1097:12:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":44891,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1088:2:51","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":44893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1091:5:51","memberName":"prank","nodeType":"MemberAccess","referencedDeclaration":15742,"src":"1088:8:51","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":44895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1088:22:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44896,"nodeType":"ExpressionStatement","src":"1088:22:51"},{"expression":{"id":44913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":44897,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44887,"src":"1121:7:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":44898,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44889,"src":"1130:10:51","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":44899,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1120:21:51","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"expression":{"id":44907,"name":"SampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42819,"src":"1209:14:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SampleContract_$42819_$","typeString":"type(contract SampleContract)"}},"id":44908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1224:25:51","memberName":"sampleFailWithCustomError","nodeType":"MemberAccess","referencedDeclaration":42788,"src":"1209:40:51","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$__$returns$__$","typeString":"function SampleContract.sampleFailWithCustomError()"}},"id":44909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1250:8:51","memberName":"selector","nodeType":"MemberAccess","src":"1209:49:51","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":44910,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44884,"src":"1260:11:51","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":44905,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1186:3:51","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":44906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1190:18:51","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1186:22:51","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":44911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1186:86:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":44902,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"1152:14:51","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":44901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1144:7:51","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":44900,"name":"address","nodeType":"ElementaryTypeName","src":"1144:7:51","typeDescriptions":{}}},"id":44903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1144:23:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":44904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1168:4:51","memberName":"call","nodeType":"MemberAccess","src":"1144:28:51","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":44912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1144:138:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"1120:162:51","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44914,"nodeType":"ExpressionStatement","src":"1120:162:51"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_sampleFailWithCustomErrorCall","nameLocation":"951:30:51","parameters":{"id":44885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44884,"mutability":"mutable","name":"sampleInput","nameLocation":"988:11:51","nodeType":"VariableDeclaration","scope":44916,"src":"982:17:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":44883,"name":"uint8","nodeType":"ElementaryTypeName","src":"982:5:51","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"981:19:51"},"returnParameters":{"id":44890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44887,"mutability":"mutable","name":"success","nameLocation":"1040:7:51","nodeType":"VariableDeclaration","scope":44916,"src":"1035:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44886,"name":"bool","nodeType":"ElementaryTypeName","src":"1035:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44889,"mutability":"mutable","name":"returnData","nameLocation":"1062:10:51","nodeType":"VariableDeclaration","scope":44916,"src":"1049:23:51","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44888,"name":"bytes","nodeType":"ElementaryTypeName","src":"1049:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1034:39:51"},"scope":45019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":44950,"nodeType":"FunctionDefinition","src":"1295:317:51","nodes":[],"body":{"id":44949,"nodeType":"Block","src":"1407:205:51","nodes":[],"statements":[{"expression":{"arguments":[{"id":44928,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"1426:12:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":44925,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1417:2:51","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":44927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1420:5:51","memberName":"prank","nodeType":"MemberAccess","referencedDeclaration":15742,"src":"1417:8:51","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":44929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1417:22:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44930,"nodeType":"ExpressionStatement","src":"1417:22:51"},{"expression":{"id":44947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":44931,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44921,"src":"1450:7:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":44932,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44923,"src":"1459:10:51","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":44933,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1449:21:51","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"expression":{"id":44941,"name":"SampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42819,"src":"1538:14:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SampleContract_$42819_$","typeString":"type(contract SampleContract)"}},"id":44942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1553:19:51","memberName":"sampleFailWithPanic","nodeType":"MemberAccess","referencedDeclaration":42805,"src":"1538:34:51","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$__$returns$__$","typeString":"function SampleContract.sampleFailWithPanic()"}},"id":44943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1573:8:51","memberName":"selector","nodeType":"MemberAccess","src":"1538:43:51","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":44944,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44918,"src":"1583:11:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44939,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1515:3:51","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":44940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1519:18:51","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1515:22:51","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":44945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1515:80:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":44936,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"1481:14:51","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":44935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1473:7:51","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":44934,"name":"address","nodeType":"ElementaryTypeName","src":"1473:7:51","typeDescriptions":{}}},"id":44937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1473:23:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":44938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1497:4:51","memberName":"call","nodeType":"MemberAccess","src":"1473:28:51","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":44946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1473:132:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"1449:156:51","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44948,"nodeType":"ExpressionStatement","src":"1449:156:51"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_sampleFailWithPanicCall","nameLocation":"1304:24:51","parameters":{"id":44919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44918,"mutability":"mutable","name":"sampleInput","nameLocation":"1337:11:51","nodeType":"VariableDeclaration","scope":44950,"src":"1329:19:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44917,"name":"uint256","nodeType":"ElementaryTypeName","src":"1329:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1328:21:51"},"returnParameters":{"id":44924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44921,"mutability":"mutable","name":"success","nameLocation":"1373:7:51","nodeType":"VariableDeclaration","scope":44950,"src":"1368:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44920,"name":"bool","nodeType":"ElementaryTypeName","src":"1368:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44923,"mutability":"mutable","name":"returnData","nameLocation":"1395:10:51","nodeType":"VariableDeclaration","scope":44950,"src":"1382:23:51","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44922,"name":"bytes","nodeType":"ElementaryTypeName","src":"1382:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1367:39:51"},"scope":45019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":44984,"nodeType":"FunctionDefinition","src":"1618:319:51","nodes":[],"body":{"id":44983,"nodeType":"Block","src":"1731:206:51","nodes":[],"statements":[{"expression":{"arguments":[{"id":44962,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"1750:12:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":44959,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1741:2:51","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":44961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1744:5:51","memberName":"prank","nodeType":"MemberAccess","referencedDeclaration":15742,"src":"1741:8:51","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":44963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1741:22:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44964,"nodeType":"ExpressionStatement","src":"1741:22:51"},{"expression":{"id":44981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":44965,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44955,"src":"1774:7:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":44966,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44957,"src":"1783:10:51","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":44967,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1773:21:51","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"expression":{"id":44975,"name":"SampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42819,"src":"1862:14:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SampleContract_$42819_$","typeString":"type(contract SampleContract)"}},"id":44976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1877:20:51","memberName":"sampleFailWithAssert","nodeType":"MemberAccess","referencedDeclaration":42813,"src":"1862:35:51","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$__$returns$__$","typeString":"function SampleContract.sampleFailWithAssert()"}},"id":44977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1898:8:51","memberName":"selector","nodeType":"MemberAccess","src":"1862:44:51","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":44978,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44952,"src":"1908:11:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":44973,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1839:3:51","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":44974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1843:18:51","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1839:22:51","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":44979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1839:81:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":44970,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"1805:14:51","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":44969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1797:7:51","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":44968,"name":"address","nodeType":"ElementaryTypeName","src":"1797:7:51","typeDescriptions":{}}},"id":44971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1797:23:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":44972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1821:4:51","memberName":"call","nodeType":"MemberAccess","src":"1797:28:51","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":44980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1797:133:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"1773:157:51","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44982,"nodeType":"ExpressionStatement","src":"1773:157:51"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_sampleFailWithAssertCall","nameLocation":"1627:25:51","parameters":{"id":44953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44952,"mutability":"mutable","name":"sampleInput","nameLocation":"1661:11:51","nodeType":"VariableDeclaration","scope":44984,"src":"1653:19:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44951,"name":"uint256","nodeType":"ElementaryTypeName","src":"1653:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1652:21:51"},"returnParameters":{"id":44958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44955,"mutability":"mutable","name":"success","nameLocation":"1697:7:51","nodeType":"VariableDeclaration","scope":44984,"src":"1692:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44954,"name":"bool","nodeType":"ElementaryTypeName","src":"1692:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44957,"mutability":"mutable","name":"returnData","nameLocation":"1719:10:51","nodeType":"VariableDeclaration","scope":44984,"src":"1706:23:51","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44956,"name":"bytes","nodeType":"ElementaryTypeName","src":"1706:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1691:39:51"},"scope":45019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":45018,"nodeType":"FunctionDefinition","src":"1943:346:51","nodes":[],"body":{"id":45017,"nodeType":"Block","src":"2078:211:51","nodes":[],"statements":[{"expression":{"arguments":[{"id":44996,"name":"currentActor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43035,"src":"2097:12:51","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":44993,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"2088:2:51","typeDescriptions":{"typeIdentifier":"t_contract$_Vm_$16143","typeString":"contract Vm"}},"id":44995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2091:5:51","memberName":"prank","nodeType":"MemberAccess","referencedDeclaration":15742,"src":"2088:8:51","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":44997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2088:22:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44998,"nodeType":"ExpressionStatement","src":"2088:22:51"},{"expression":{"id":45015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":44999,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44989,"src":"2121:7:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":45000,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44991,"src":"2130:10:51","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":45001,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2120:21:51","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"expression":{"id":45009,"name":"SampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42819,"src":"2209:14:51","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SampleContract_$42819_$","typeString":"type(contract SampleContract)"}},"id":45010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2224:25:51","memberName":"sampleFailReturnEmptyData","nodeType":"MemberAccess","referencedDeclaration":42818,"src":"2209:40:51","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$__$returns$__$","typeString":"function SampleContract.sampleFailReturnEmptyData()"}},"id":45011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2250:8:51","memberName":"selector","nodeType":"MemberAccess","src":"2209:49:51","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":45012,"name":"sampleInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44986,"src":"2260:11:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":45007,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2186:3:51","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2190:18:51","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2186:22:51","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2186:86:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":45004,"name":"sampleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43058,"src":"2152:14:51","typeDescriptions":{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SampleContract_$42819","typeString":"contract SampleContract"}],"id":45003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2144:7:51","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":45002,"name":"address","nodeType":"ElementaryTypeName","src":"2144:7:51","typeDescriptions":{}}},"id":45005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2144:23:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":45006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2168:4:51","memberName":"call","nodeType":"MemberAccess","src":"2144:28:51","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":45014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2144:138:51","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"2120:162:51","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":45016,"nodeType":"ExpressionStatement","src":"2120:162:51"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_sampleFailReturnEmptyDataCall","nameLocation":"1952:30:51","parameters":{"id":44987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44986,"mutability":"mutable","name":"sampleInput","nameLocation":"1988:11:51","nodeType":"VariableDeclaration","scope":45018,"src":"1983:16:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44985,"name":"bool","nodeType":"ElementaryTypeName","src":"1983:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1982:18:51"},"returnParameters":{"id":44992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44989,"mutability":"mutable","name":"success","nameLocation":"2040:7:51","nodeType":"VariableDeclaration","scope":45018,"src":"2035:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44988,"name":"bool","nodeType":"ElementaryTypeName","src":"2035:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44991,"mutability":"mutable","name":"returnData","nameLocation":"2062:10:51","nodeType":"VariableDeclaration","scope":45018,"src":"2049:23:51","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44990,"name":"bytes","nodeType":"ElementaryTypeName","src":"2049:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2034:39:51"},"scope":45019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":44803,"name":"FuzzBase","nameLocations":["179:8:51"],"nodeType":"IdentifierPath","referencedDeclaration":39013,"src":"179:8:51"},"id":44804,"nodeType":"InheritanceSpecifier","src":"179:8:51"},{"baseName":{"id":44805,"name":"FuzzStorageVariables","nameLocations":["189:20:51"],"nodeType":"IdentifierPath","referencedDeclaration":43059,"src":"189:20:51"},"id":44806,"nodeType":"InheritanceSpecifier","src":"189:20:51"}],"canonicalName":"FunctionCalls","contractDependencies":[39466,42273],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[45019,43059,45059,12105,12053,6735,6375,5582,3522,2695,65,62,39013],"name":"FunctionCalls","nameLocation":"162:13:51","scope":45020,"usedErrors":[],"usedEvents":[100,104,108,112,116,120,124,128,134,140,148,156,162,168,174,180,185,190,195,202,209,216,44810]}],"license":"MIT"}},"test/fuzzing/utils/FuzzActors.sol":{"id":52,"ast":{}},"test/fuzzing/utils/FuzzConstants.sol":{"id":53,"ast":{"absolutePath":"test/fuzzing/utils/FuzzConstants.sol","id":45201,"exportedSymbols":{"FuzzConstants":[45200]},"nodeType":"SourceUnit","src":"0:2386:53","nodes":[{"id":45061,"nodeType":"PragmaDirective","src":"0:23:53","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":45200,"nodeType":"ContractDefinition","src":"25:2360:53","nodes":[{"id":45073,"nodeType":"VariableDeclaration","src":"219:156:53","nodes":[],"constant":true,"mutability":"constant","name":"EXCEEDS_BALANCE_ERROR","nameLocation":"243:21:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45062,"name":"bytes","nodeType":"ElementaryTypeName","src":"219:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"315:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45067,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"305:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"305:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"298:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45065,"name":"bytes4","nodeType":"ElementaryTypeName","src":"298:6:53","typeDescriptions":{}}},"id":45070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"298:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":45071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"334:40:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"expression":{"id":45063,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"275:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"279:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"275:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"275:100:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45085,"nodeType":"VariableDeclaration","src":"381:148:53","nodes":[],"constant":true,"mutability":"constant","name":"INSUFFICIENT_ALLOWANCE","nameLocation":"405:22:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45074,"name":"bytes","nodeType":"ElementaryTypeName","src":"381:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"478:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45079,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"468:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"468:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"461:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45077,"name":"bytes4","nodeType":"ElementaryTypeName","src":"461:6:53","typeDescriptions":{}}},"id":45082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"461:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":45083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"497:31:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"expression":{"id":45075,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"438:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"442:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"438:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"438:91:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45097,"nodeType":"VariableDeclaration","src":"535:152:53","nodes":[],"constant":true,"mutability":"constant","name":"TRANSFER_FROM_ZERO","nameLocation":"559:18:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45086,"name":"bytes","nodeType":"ElementaryTypeName","src":"535:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"628:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45091,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"618:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"618:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"611:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45089,"name":"bytes4","nodeType":"ElementaryTypeName","src":"611:6:53","typeDescriptions":{}}},"id":45094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"611:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":45095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"647:39:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"expression":{"id":45087,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"588:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"592:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"588:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"588:99:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45109,"nodeType":"VariableDeclaration","src":"693:148:53","nodes":[],"constant":true,"mutability":"constant","name":"TRANSFER_TO_ZERO","nameLocation":"717:16:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45098,"name":"bytes","nodeType":"ElementaryTypeName","src":"693:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"784:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45103,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"774:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"774:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"767:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45101,"name":"bytes4","nodeType":"ElementaryTypeName","src":"767:6:53","typeDescriptions":{}}},"id":45106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"767:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":45107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"803:37:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"expression":{"id":45099,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"744:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"748:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"744:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"744:97:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45121,"nodeType":"VariableDeclaration","src":"847:146:53","nodes":[],"constant":true,"mutability":"constant","name":"APPROVE_TO_ZERO","nameLocation":"871:15:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45110,"name":"bytes","nodeType":"ElementaryTypeName","src":"847:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"937:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45115,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"927:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"927:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"920:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45113,"name":"bytes4","nodeType":"ElementaryTypeName","src":"920:6:53","typeDescriptions":{}}},"id":45118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":45119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"956:36:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"expression":{"id":45111,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"897:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"901:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"897:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"897:96:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45133,"nodeType":"VariableDeclaration","src":"999:140:53","nodes":[],"constant":true,"mutability":"constant","name":"MINT_TO_ZERO","nameLocation":"1023:12:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45122,"name":"bytes","nodeType":"ElementaryTypeName","src":"999:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1086:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45127,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1076:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1076:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1069:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45125,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1069:6:53","typeDescriptions":{}}},"id":45130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1069:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":45131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1105:33:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"expression":{"id":45123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1046:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1050:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1046:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1046:93:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45145,"nodeType":"VariableDeclaration","src":"1145:144:53","nodes":[],"constant":true,"mutability":"constant","name":"BURN_FROM_ZERO","nameLocation":"1169:14:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45134,"name":"bytes","nodeType":"ElementaryTypeName","src":"1145:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1234:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45139,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1224:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1224:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1217:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45137,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1217:6:53","typeDescriptions":{}}},"id":45142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1217:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":45143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1253:35:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"expression":{"id":45135,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1194:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1198:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1194:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1194:95:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45157,"nodeType":"VariableDeclaration","src":"1295:153:53","nodes":[],"constant":true,"mutability":"constant","name":"DECREASED_ALLOWANCE","nameLocation":"1319:19:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45146,"name":"bytes","nodeType":"ElementaryTypeName","src":"1295:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1389:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45151,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1379:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1379:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1372:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45149,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1372:6:53","typeDescriptions":{}}},"id":45154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1372:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":45155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1408:39:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"expression":{"id":45147,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1349:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1353:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1349:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1349:99:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45169,"nodeType":"VariableDeclaration","src":"1454:151:53","nodes":[],"constant":true,"mutability":"constant","name":"BURN_EXCEEDS_BALANCE","nameLocation":"1478:20:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":45158,"name":"bytes","nodeType":"ElementaryTypeName","src":"1454:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"4572726f7228737472696e6729","id":45164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1549:15:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""},"value":"Error(string)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa","typeString":"literal_string \"Error(string)\""}],"id":45163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1539:9:53","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":45165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1539:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":45162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1532:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":45161,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1532:6:53","typeDescriptions":{}}},"id":45166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:34:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":45167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1568:36:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"expression":{"id":45159,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1509:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":45160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1513:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1509:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":45168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1509:96:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"internal"},{"id":45172,"nodeType":"VariableDeclaration","src":"1771:46:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_GENERAL","nameLocation":"1797:13:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1771:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":45171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1813:4:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"id":45175,"nodeType":"VariableDeclaration","src":"1823:45:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_ASSERT","nameLocation":"1849:12:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45173,"name":"uint256","nodeType":"ElementaryTypeName","src":"1823:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783031","id":45174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1864:4:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"},"visibility":"internal"},{"id":45178,"nodeType":"VariableDeclaration","src":"1874:49:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_ARITHMETIC","nameLocation":"1900:16:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45176,"name":"uint256","nodeType":"ElementaryTypeName","src":"1874:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783131","id":45177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1919:4:53","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"0x11"},"visibility":"internal"},{"id":45181,"nodeType":"VariableDeclaration","src":"1929:55:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_DIVISION_BY_ZERO","nameLocation":"1955:22:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1929:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783132","id":45180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1980:4:53","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"0x12"},"visibility":"internal"},{"id":45184,"nodeType":"VariableDeclaration","src":"1990:57:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_ENUM_OUT_OF_BOUNDS","nameLocation":"2016:24:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45182,"name":"uint256","nodeType":"ElementaryTypeName","src":"1990:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783231","id":45183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2043:4:53","typeDescriptions":{"typeIdentifier":"t_rational_33_by_1","typeString":"int_const 33"},"value":"0x21"},"visibility":"internal"},{"id":45187,"nodeType":"VariableDeclaration","src":"2053:67:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_STORAGE_BYTES_ARRAY_ENCODING","nameLocation":"2079:34:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2053:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783232","id":45186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2116:4:53","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"visibility":"internal"},{"id":45190,"nodeType":"VariableDeclaration","src":"2126:54:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_POP_EMPTY_ARRAY","nameLocation":"2152:21:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45188,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783331","id":45189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2176:4:53","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"0x31"},"visibility":"internal"},{"id":45193,"nodeType":"VariableDeclaration","src":"2186:58:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_ARRAY_OUT_OF_BOUNDS","nameLocation":"2212:25:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45191,"name":"uint256","nodeType":"ElementaryTypeName","src":"2186:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783332","id":45192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:4:53","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"0x32"},"visibility":"internal"},{"id":45196,"nodeType":"VariableDeclaration","src":"2250:60:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_ALLOC_TOO_MUCH_MEMORY","nameLocation":"2276:27:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45194,"name":"uint256","nodeType":"ElementaryTypeName","src":"2250:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783431","id":45195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2306:4:53","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"0x41"},"visibility":"internal"},{"id":45199,"nodeType":"VariableDeclaration","src":"2316:66:53","nodes":[],"constant":true,"mutability":"constant","name":"PANIC_ZERO_INIT_INTERNAL_FUNCTION","nameLocation":"2342:33:53","scope":45200,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2316:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783531","id":45198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2378:4:53","typeDescriptions":{"typeIdentifier":"t_rational_81_by_1","typeString":"int_const 81"},"value":"0x51"},"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"FuzzConstants","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[45200],"name":"FuzzConstants","nameLocation":"34:13:53","scope":45201,"usedErrors":[],"usedEvents":[]}]}}}},"solcLongVersion":"0.8.25","solcVersion":"0.8.25"}